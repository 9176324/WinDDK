<?xml version="1.0"?>
<component>

<?component error="true" debug="true"?>

<comment>
	This component is responsible for maintaining the criteria for a filter.
	Currently, a filter is defined as a set of defect ID's to exclude along
	with a set of regular expressions to exclude.
</comment>

<registration
	description="PREfast Defect Filter"
	progid="PREfast.DefectFilter"
	version="1.00"
	classid="{A313549E-C110-41f8-970C-838236285CA5}"
>
</registration>

<public>
	<property name="name"      ><put /><get /></property>
	<property name="excludeWarnings"  ><get /></property>
	<property name="excludeRegExps"   ><get /></property>
	<property name="isReadOnly"><put /><get /></property>

	<method name="init">
		<parameter name="objDefectDefinitions" />
		<parameter name="objDefectRegExpDefinitions" />
		<parameter name="strName" />
		<parameter name="strExcludeWarnings" />
		<parameter name="strExcludeRegExps" />
		<parameter name="fReadOnly" />
        <parameter name="fInvert" />
	</method>

	<method name="enable">
		<parameter name="strIDs" />
		<parameter name="fEnable" />
	</method>

	<method name="isEnabled">
		<parameter name="strID" />
	</method>

	<method name="isEquivalent">
		<parameter name="objFilter" />
	</method>

	<method name="copyTo">
		<parameter name="objFilter" />
	</method>

    <method name="connectEvents">
        <parameter name="objListener" />
    </method>

	<event name="onChanged" />
</public>

<script language="JScript">
<![CDATA[
/////////////////////////////////////////////////////////////////////////////
// Beginning of script block
//

/////////////////////////////////////////////////////////////////////////////
// Construction
var description = new PREfastDefectFilter;
function PREfastDefectFilter()
{
	// Initialize the class
	this.get_name = get_name;
	this.put_name = put_name;
	this.get_excludeWarnings = get_excludeWarnings;
	this.get_excludeRegExps = get_excludeRegExps;
	this.get_isReadOnly= get_isReadOnly;
	this.put_isReadOnly= put_isReadOnly;

	this.init = init;
	this.enable = enable;
	this.isEnabled = isEnabled;
	this.isEquivalent = isEquivalent;
	this.copyTo = copyTo;
    this.connectEvents = connectEvents;

	// Initialize the dictionary object
	m_dict.CompareMode = 1;

    m_objListeners = new Array();
}

/////////////////////////////////////////////////////////////////////////////
//
function connectEvents( objListener )
{
    m_objListeners.push( objListener );
}

/////////////////////////////////////////////////////////////////////////////
//
function get_name()
{
	// Ensure that the object has been initialized
	EnsureInitialized();
	return m_strName;
}


/////////////////////////////////////////////////////////////////////////////
//
function put_name(strName)
{
	// Ensure that the object has been initialized
	EnsureInitialized();
	m_strName = strName;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_excludeWarnings()
{
	// Ensure that the object has been initialized
	EnsureInitialized();

	var arrOut = new Array;
	var arr = (new VBArray(m_dict.Keys())).toArray();
	for (var i in arr)
	{
		var strID = arr[i];
		if (IsNumeric(strID))
			arrOut[arrOut.length] = strID;
	}
	return new String(arrOut.join(';'));
}


/////////////////////////////////////////////////////////////////////////////
//
function get_excludeRegExps()
{
	// Ensure that the object has been initialized
	EnsureInitialized();

	var arrOut = new Array;
	var arr = (new VBArray(m_dict.Keys())).toArray();
	for (var i in arr)
	{
		var strID = arr[i];
		if (!IsNumeric(strID))
			arrOut[arrOut.length] = strID;
	}
	return new String(arrOut.join(';'));
}


/////////////////////////////////////////////////////////////////////////////
//
function get_isReadOnly()
{
	return new Boolean(m_fReadOnly);
}


/////////////////////////////////////////////////////////////////////////////
//
function put_isReadOnly(fReadOnly)
{
	m_fReadOnly = new Boolean(fReadOnly);
}


/////////////////////////////////////////////////////////////////////////////
//
function init(objDefectDefinitions, objDefectRegExpDefinitions, strName,
	strExcludeWarnings, strExcludeRegExps, fReadOnly, fInvert)
{
	// Ensure that the object is not read-only
	if(m_fReadOnly)
		throw new Error(0, "PREfast.DefectFilter object is set to read-only");

	// Save the specified parameters
	m_objDefectDefinitions = objDefectDefinitions;
	m_objDefectRegExpDefinitions = objDefectRegExpDefinitions;
	m_strName = strName;
	m_fReadOnly = fReadOnly;

	// Remove all entries from the dictionary
	m_dict.RemoveAll();

    if (fInvert)
    {
	    var defs = m_objDefectDefinitions.defectDefNodes;
	    var cDefs = defs.length;
	    for (var i = 0; i < cDefs; ++i)
	    {
		    var strID = defs(i).selectSingleNode("@id").text;
		    m_dict(strID) = true;
	    }
    }
	
	// Add each valid entry to the dictionary
	var arrStrings = new Array(strExcludeWarnings, strExcludeRegExps);
	for (var j in arrStrings)
	{
		var strIDs = arrStrings[j];
		if (strIDs && strIDs.length)
		{
			var arr = strIDs.split(';');
			for (var i in arr)
			{
				var strID = arr[i];
				if (strID && strID.length)
				{
					if (m_objDefectDefinitions.exists(strID))
                        if ( fInvert )
                            m_dict.Remove(strID);
                        else
                            m_dict(strID) = true;
				    if (m_objDefectRegExpDefinitions.exists(strID))
						m_dict(strID) = true;
				}
			}
		}
	}
}


/////////////////////////////////////////////////////////////////////////////
//
function enable(strIDs, fEnable)
{
	// Ensure that the object has been initialized
	EnsureInitialized();

	// Ensure that the object is not read-only
	if (m_fReadOnly)
		throw new Error(0, "PREfast.DefectFilter object is set to read-only");

	var fChanged = false;
	var arr = strIDs.split(';');
	if (fEnable)
	{
		for (var i in arr)
		{
			var strID = arr[i];
			if (m_dict.Exists(strID))
			{
				m_dict.Remove(strID);
				fChanged = true;
			}
		}
	}
	else
	{
		for (var i in arr)
		{
			var strID = arr[i];
			if (!m_dict.Exists(strID))
			{
				m_dict(strID) = true;
				fChanged = true;
			}
		}
	}

	// Fire an event
	fireOnChanged();
}


/////////////////////////////////////////////////////////////////////////////
//
function isEnabled(strID)
{
	// Ensure that the object has been initialized
	EnsureInitialized();
	return !m_dict.Exists(strID);
}


/////////////////////////////////////////////////////////////////////////////
//
function isEquivalent(objFilter)
{
	// Ensure that the object has been initialized
	EnsureInitialized();

	// Put the specified filter into a dictionary
	var dict1 = m_dict;
	var dict2 = new ActiveXObject("Scripting.Dictionary");

	// Add each valid entry to the dictionary
	var arrStrings = new Array(objFilter.excludeWarnings, objFilter.excludeRegExps);
	for (var j in arrStrings)
	{
		var strIDs = arrStrings[j];
		if (strIDs && strIDs.length)
		{
			var arr = strIDs.split(';');
			for (var i in arr)
			{
				var strID = arr[i];
				if (strID && strID.length)
				{
					dict2(strID) = true;
				}
			}
		}
	}


	// Not equivalent if key counts are not equal
	if (dict1.Count != dict2.Count)
		return false;

	// Loop through each key of the first dictionary
	var arrKeys = (new VBArray(dict1.Keys())).toArray();
	var arrItems = (new VBArray(dict1.Items())).toArray();
	for (var i in arrKeys)
	{
		// Not equivalent if the key does not exist in second dictionary
		if (!dict2.Exists(arrKeys[i]))
			return false;

		// Not equivalent if associated values are different
		if (dict2(arrKeys[i]) != arrItems[i])
			return false;
	}

	// All tests pass - dictionaries are equivalent
	return true;
}


/////////////////////////////////////////////////////////////////////////////
//
function copyTo(objFilter)
{
	// Ensure that the object has been initialized
	EnsureInitialized();

	// Reinitialize the specified filter
	objFilter.init(m_objDefectDefinitions, m_objDefectRegExpDefinitions,
		objFilter.name, get_excludeWarnings(), get_excludeRegExps());
}

/////////////////////////////////////////////////////////////////////////////
// "events"

function fireOnChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectFilter_onChanged ) )
            m_objListeners[i].DefectFilter_onChanged();
    }
}

/////////////////////////////////////////////////////////////////////////////
// Implementation


/////////////////////////////////////////////////////////////////////////////
//
function EnsureInitialized()
{
	if (!m_strName || !m_objDefectDefinitions || !m_objDefectRegExpDefinitions)
		throw new Error(0, "PREfast.DefectFilter object not initialized");
}


/////////////////////////////////////////////////////////////////////////////
//
var s_reNotNumeric = /[^0-9]/;
function IsNumeric(strID)
{
	return !s_reNotNumeric.test(strID);
}


/////////////////////////////////////////////////////////////////////////////
// Data Members

var m_objDefectDefinitions;
var m_objDefectRegExpDefinitions;
var m_strName;
var m_fReadOnly;

var m_objListeners;

//
// End of script block
/////////////////////////////////////////////////////////////////////////////
]]>
</script>

<object id="m_dict" progid="Scripting.Dictionary" />

</component>
