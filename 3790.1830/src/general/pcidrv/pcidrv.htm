<html>

<head>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<meta NAME="GENERATOR" CONTENT="Microsoft FrontPage 4.0">
<title>PCIDRV</title>
<meta NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</head>

<body TEXT="#000000" LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff" leftmargin="8">
<font FACE="Verdana">

<h2><a NAME="NETVMINI">Sample WDM Driver For PCI Device</a> </h2>

<h3>SUMMARY</h3>
</font><font FACE="Verdana" SIZE="2">

<p>This sample is a fully functional WDM driver for Intel 82557/82558 based PCI Ethernet Adapter (10/100) and Intel compatibles. The purpose of this sample is to teach how to write a WDM driver for a PCI device. The choice of Intel Ethernet Adapter is made because the hardware is relatively inexpensive, easily available, supports advanced hardware features such as scatter-gather DMA, full fledge power management - ability to wake the machine on external event (Wait-Wake), ability to power down the device when not in use (Idle detection) - hardware <a href="http://www.intel.com/design/network/manuals/8255X_OpenSDM.htm">specification</a> is publicly available, and the source code to interface with the hardware is also available in the DDK. 
<P>
Following is the list of key features demonstrated in this sample.
<UL>
<LI> How to map hardware resources in a platform independent manner. This sample shows how to determine whether the I/O BAR of a PCI device has been mapped into memory space or I/O space by just using the Translated resource list provided by the PNP manager, and use the appropriate accessor functions to read/write to the device.
<LI> How to do SCATTER GATHER DMA operation using the new DMA interfaces provided on Windows 2000. Depending on the build environment, it chooses to use either the Win2K compliant, Version 0, DMA functions or Windows XP compliant, Version2 functions. GetScatterGatherList versus BuildScatterGatherList.
<LI> How to do software tracing that works on Windows 2000 and beyond. You can control the tracing spew using Flags and Level values and also dump variable length buffers using HEXDUMP macros. The sample can be built to do boot-time tracing. Read Boot-Time tracing section in this document for more information on how to enable that.
<LI> This sample demonstrate all aspect of power management. It shows how to be a power policy owner of a device and do S-D state mappings, generate D-IRPs, generate Wait-wake IRPs, perform idle detection, and  fast resume. Since there are inherent race conditions in the system provided power management APIs (PoRegisterDeviceForIdleDetection) for doing IDLE detection, this sample uses it own idle detection logic.
<LI> 
</UL>
<p>On Windows platform, drivers for network devices have to be an NDIS miniport driver. Only then protocols can bind and perform network transfer. So, how can a generic WDM driver be used for a network controller?  Well, for illustration purposes, this sample driver can be made to work either as an NDIS miniport by using another NDIS-WDM sample driver from the DDK as an upper filter or as a  standalone (user defined class called <b>Sample PCI Device</b>) driver. Further details about these configurations is given below. You can consider this a Featured3 version of toaster function driver.

<p>The WDM interface in this sample is based on the Toaster function driver, and all the code to access the hardware is taken from the E100BEX NDIS miniport sample from the DDK and converted to use WDM interfaces instead of NDIS functions. The sample has been written in such a way, separating all the hardware specific code in separate modules and isolating them in a subdirctory, it can be easily adapted to work for any PCI and PCMCIA device.

<p><B>Note: This sample provides an example of a minimal driver intended for educational purposes. Neither the driver nor its sample test programs are intended for use in a production environment. As stated earlier, this sample is meant to demonstrate how to write a WDM driver for a generic PCI device. This sample doesn't espouse that you write a WDM driver with an NDIS edge for PCI network controllers. For network controllers, you should write a monolithic NDIS miniport driver based on the samples given under the src\network\ndis directory. </B></p>
<p>
The sample driver has been tested on the following Intel Ethernet controllers:
<p>
<font face="Verdana" size="3">
<TABLE  border="1" width="100%">
<TBODY>
<TR>
<TD><b>Device Desc</b></TD>
<TD><b>Hardware ID</b></TD></TR>
<TR>
<TD>IBM Netfinity 10/100 Ethernet Adapter</TD>
<TD>PCI\VEN_8086&amp;DEV_1229&amp;SUBSYS_005C1014&amp;REV_05</TD></TR>
<TR>
<TD>Intel(R) PRO/100+ Management Adapter with Alert On LAN</TD>
<TD>PCI\VEN_8086&amp;DEV_1229&amp;SUBSYS_000E8086&amp;REV_08</TD></TR>
<TR>
<TD>Intel 8255x-based PCI Ethernet Adapter (10/100)</TD>
<TD>PCI\VEN_8086&amp;DEV_1229&amp;SUBSYS_00000000&amp;REV_01</TD></TR>
<TR>
<TD>Intel Pro/100 S Server Adapter</TD>
<TD>PCI\VEN_8086&amp;DEV_1229&amp;SUBSYS_00508086&amp;REV_0D</TD></TR>
<TR>
<TD>Intel 8255x-based PCI Ethernet Adapter (10/100)</TD>
<TD>PCI\VEN_8086&amp;DEV_1229&amp;SUBSYS_00031179&amp;REV_08</TD></TR>
<TR>
<TD>Intel(R) PRO/100 VE Network Connection</TD>
<TD>PCI\VEN_8086&amp;DEV_103D&amp;SUBSYS_00011179&amp;REV_83</TD></TR>
<TD>Intel(R) PRO/100 VM Network Connection</TD>
<TD>PCI\VEN_8086&amp;DEV_1031&amp;REV_42</TD></TR>
<TD>Intel(R) PRO/100 VE Network Connection</TD>
<TD>PCI\VEN_8086&amp;DEV_1038&amp;REV_41</TD></TR>
<TR>
<TD>Intel(R) PRO/100 SR Mobile Adapter</TD>
<TD>PCI\VEN_8086&amp;DEV_1229</TD></TR>
<TR>
<TD></TD>
<TD></TD></TR>
<TR>
<TD></TD>
<TD></TD></TR></TBODY></TABLE>
</font>
<p>Click <a href="http://www.intel.com/support/network/adapter/pro100/24659.htm#2">here</a> to get a complete list of Intel Network adapters.<p>


<font face=Verdana>

<table border="1" width="100%">
  <tr>
    <td width="25%">
      <p align="center"><font face="Verdana" size="2"><b>Operating System</b></font></td>


</font>

</font>
    <td width="25%"><b><font face="Verdana" size="2">Can sample be built in the
      OS?</font></b></td>
<font FACE="Verdana" SIZE="2">

    <td width="25%"><b>Does sample </b><font face="Verdana" size="2"><b>work in the
      OS?</b></font></td>
    <td width="25%"><span style="letter-spacing: -1pt"><font face="Verdana" size="2"><b>Can
      sample be used in a production environment for the OS?</b></font></span></td>
  </tr>


</font>
  <tr>

<td width="25%"><font face="Verdana" size="2">Windows Server 2003</font></td>
<font face=Verdana>
<font FACE="Verdana" SIZE="2">

<td width="25%" align="center">Yes</td>
<td width="25%" align="center">
<font FACE="Verdana" SIZE="2">

Yes
</font>


</td>
<td width="25%" align="center">No</td>
  </tr>
  <tr>
    <font FACE="Verdana" SIZE="2">

<td width="25%">Windows XP</td>
<td width="25%" align="center">
<font FACE="Verdana" SIZE="2">

Yes
</font>


</td>
<td width="25%" align="center">
<font FACE="Verdana" SIZE="2">

Yes
</font>


</td>
<td width="25%" align="center">No</td>
</font>
  </tr>
  <tr>
    <font FACE="Verdana" SIZE="2">

<td width="25%">Windows 2000</td>
<td width="25%" align="center">
<font FACE="Verdana" SIZE="2">

Yes
</font>


</td>
<td width="25%" align="center">
<font FACE="Verdana" SIZE="2">

Yes
</font>


</td>
<td width="25%" align="center">No</td>
</font>
  </tr>  
</table>


<p>The driver can be built in the Windows® 2000, Windows® XP, and Windows Server 2003
DDK build environment.The driver can be installed in the Windows 2000, XP, and Server 2003 operating
systems.
</p>


<p>
<H3> Using this sample as a Miniport </H3>
</p>
<pre>
                   ---------------------
                  |                     |
                  |        TCP/IP       |
                  |                     |
                   ---------------------
                            ^
                            | &lt;-------------- NDIS Interface (I/Os done using NDIS Packets)
                            V
                   ---------------------
                  |                     |
                  |   NDISWDM Miniport  |
                  |    (NDISEDGE.SYS)   | <-- Installed as an Upper Device Filter
                  |                     |
                   ---------------------
                            ^
                            | &lt;--------------- IRPs (I/Os done using IRPs)
                            V
                   ---------------------
                  |                     |
                  |     PCIDRV.SYS      | <-- Installed as a function driver
                  |                     |
                   ---------------------
   
                            ^
                            | &lt;-------------- Talk to the hardware using I/O resources			   
                            V			   
                      ---------------
                     |    H/w NIC    |
                      ---------------
                             |||||||
                             -------          
                            </pre>


You can install the driver as a Net class driver using NETDRV.INF, and use the device as a fully functional network device. The picture above shows the stack layout in this configuration. The driver stack consists of NDIS-WDM driver as an upper device filter and PCIDRV as the function driver for the device. The NDIS-WDM driver registers with NDIS as a miniport so that the stack can be bound to all the protocol drivers and receive NDIS requests. The PCIDRV maps all the hardware resources (received in IRP_MN_START_DEVICE) and performs the job of reading and writing to the hardware. All the NDIS requests received by the NDIS-WDM driver is converted into IRPs and forwarded to the PCIDRV driver. 
<p>
In this configuration, the NDIS acts as the power policy owner of the device and performs the job of converting S-IRPs to D-IRPs and sending Wait-Wake IRPs. The PCIDRV remains passive and mostly forwards the Power and WMI requests.


<H3> Using this sample as a standalone driver</H3>

<pre>
                   ---------------------
                  |                     |
                  |        MYPING       | <-- Usermode test application
                  |                     |
                   ---------------------
                            ^
                            |                                     UserMode
 -------------------------------------------------------------------------  
                            |                                     KernelMode
                            V
                   ---------------------
                  |                     |
                  |        PCIDRV       | <-- Installed as a function driver
                  |                     |
                   ---------------------
   
                            ^
                            | &lt;-------------- Talk to the hardware using I/O resources			   
                            V			   
                      ---------------
                     |    H/w NIC    |
                      ---------------
                             |||||||
                             -------          
                            </pre>

You can install the driver as a standalone driver of a custom setup class, called Sample Class using GENPCI.INF. The PCI device is not seen as a network controller and as a result no protocol driver is bound to the device. In order to test the read & write path of the driver, you can use the specially developed ping application, called MYPING. This test application crafts the entire Ethernet frame in usermode and sends it to the driver to be transferred on the wire. In this configuration, you can only ping another machine on the same subnet. The application does all the ARP and AARP resolution in the usermode to get the MAC address of the target machine and sends ICMP ECHO requests.
<p>
The PCIDRV sample acts as a power policy owner of the device and implements all the wait-wake and idle detection logic. 


<h3>BUILDING THE SAMPLE</h3>
<p>
<B>To build NDISEDGE.SYS (Upper device filter)</b>
<UL>
<LI>Click the <b> Free Build Environment</b> or <b> Checked Build Environment</b> icon under your
Development Kit's<b> </b> program group to set basic environment variables needed 
by the build utility. </LI>
<LI>
Change to the directory containing the device source code, such as CD
Src\network\ndis\NDISWDM.
<LI>Update the 'sources' file to change the TARGETNAME from NDISWDM to NDISEDGE, and comment or remove "-DINTERFACE_WITH_NDISPROT=1" from C_DEFINES statement.
<LI>Build the driver by typing <b>BLD</b>.
</UL>

<B>To build PCIDRV.SYS (Function driver)</b>
<UL>
<LI>Click the <b> Free Build Environment</b> or <b> Checked Build Environment</b> icon under your
Development Kit's<b> </b> program group to set basic environment variables needed 
by the build utility. </LI>
<LI>
Change to the directory containing the device source code, such as CD
Src\general\PCIDRV\SYS.
<LI>Build the driver by typing <b>BLD</b>.
</UL>

<p><b>Build -ceZ</b>, or the macro <b>BLD</b> invokes the Microsoft
make routines that produce log files called Buildxxx_yyy_zzz.log, and also Buildxx_yyy_zzz.wrn and Buildxx_yyy_zzz.err if
there are any warnings or errors. Where xxx stands for <b>fre</B> or <b>chk</b> depending
on the environment chosen, yyy stands for the OS version (W2K, WXP, or Wnet), and zzz stands for platform version (x86, IA64, or AMD64).<p>If the build succeeds, the driver will be placed in a platform specific subdirectory of your
<b>%TargetPath%</b> directory specified in the 'Sources' file.</p>

<h3>INSTALLATION </h3>
<p>
The driver can be installed as a Net class driver or as a standalone driver (user defined class). <p>
To install as a <b>Net Class</b> driver on Windows 2000 System:
<ol>
  <li>Build NDISEDGE.SYS as described above in a Win2K build environment to get the NDIS version 5.0 driver.</li>
  <li>Build PCIDRV.SYS in a Win2K build environment to restrict the driver to use only Win2K specific interfaces.</li>
  <li>Copy the drivers and the <I>NETDRV.INF</I> file to a floppy disk or to a directory on the target test
    machine. Driver should be copied under appropriate subdirectory (i386, ia64, amd64).</li>
  <li>Launch the Device Manager (by clicking on Windows Start, Run option and type Devmgmt.msc)</b>.</li>
  <li>Select the Intel network controller in the device manager and double click to get the properties dialog.</li>
  <li>Select <b>Driver</b> Tab.</li>
  <li>Click on <b>Update Driver...</b> button. This will take you to Upgrade Device Driver Wizard.</li>
  <li>Click <b>Next</b>. </li>
  <li>Select <b>Display a list of the known drivers for this device so that I can choose a specific driver</b>, and then click <b>Next</b>. </li>
  <li>Click <b> Have Disk</b>, and point to the directory that contains NETDRV.INF file.</li>
  <li>Select <b>Sample WDM PCI Driver For Ethernet Adapter With NDIS Upper Edge</b>, and then click <b>Next</b>. </li>
  <li>If you get a Warning dialog about installing driver that's not compatible with the hardware. Click No and exit the Wizard.</li>
  <li>Otherwise, you will get another warning dialog about installing unsigned driver. Click <b>Yes</b> and then Click <b>Next</b> to complete the driver upgrade.</li>
</ol>
<p>

As a <b>Net Class</b> driver on Windows XP or Server 2003 system: <p>

<ol>
  <li>Build NDISEDGE.SYS as described above in a XP or Server 2003 build environment to get the NDIS version 5.1 driver.</li>
  <li>Build PCIDRV.SYS in XP or Server 2003 build environment.</li>
  <li>Copy the drivers and the <I>NETDRV.INF</I> file to a floppy disk or to a directory on the target test
    machine. Driver should be copied under appropriate subdirectory (i386, ia64, amd64).</li>
  <li>Launch the Device Manager (by clicking on Windows Start, Run option and type Devmgmt.msc)</b>.</li>
  <li>Select the Intel network controller in the device manager, right click to get the Properties menu and select <b>Updater Driver...</b>.</li>
  <li>Select <b>Driver</b> Tab.</li>
  <li>Click on <b>Update Driver...</b> button. This will take you to <b>Hardware Update Wizard</b>.</li>
  <li>Select <b>Install from a list of specific location (Advanced)</b>, and then click <b>Next</b>. </li>
  <li>Select <b>Don't search. I will choose the driver to install</b>, and then click <b>Next</b>. </li>
  <li>Click <b> Have Disk</b>, and point to the directory that contains NETDRV.INF file.</li>
  <li>Select <b>Sample WDM PCI Driver For Ethernet Adapter With NDIS Upper Edge</b>, and then click <b>Next</b>. </li>
  <li>If you get a Warning dialog about installing driver that's not compatible with the hardware. Click No and exit the Wizard.</li>
  <li>Otherwise, you will get a warning dialog about installing unsigned driver. Click <b>Continue Anyway</b> and complete the driver upgrade.</li>
</ol>

To install as a <b>standalone</b> driver on Windows 2000 System:
<ol>
  <li>Build PCIDRV.SYS in a Win2K build environment to restrict the driver to use only Win2K specific interfaces.</li>
  <li>Copy the drivers, test application, and the <I>GENPCI.INF</I> file to a floppy disk or to a directory on the target test
    machine. Driver should be copied under appropriate subdirectory (i386, ia64, amd64).</li>
  <li>Launch the Device Manager (by clicking on Windows Start, Run option and type Devmgmt.msc)</b>.</li>
  <li>Select the Intel network controller in the device manager and double click to get the properties dialog.</li>
  <li>Select <b>Driver</b> Tab.</li>
  <li>Click on <b>Update Driver...</b> button. This will take you to Upgrade Device Driver Wizard.</li>
  <li>Click <b>Next</b>. </li>
  <li>Select <b>Display a list of the known drivers for this device so that I can choose a specific driver</b>, and then click <b>Next</b>. </li>
  <li>Click <b> Have Disk</b>, and point to the directory that contains GENPCI.INF file.</li>
  <li>Select <b>Sample WDM PCI For Intel 8255x Ethernet Controller</b>, and then click <b>Next</b>. </li>
  <li>If you get a Warning dialog about installing driver that's not compatible with the hardware. Click No and exit the Wizard.</li>
  <li>Otherwise, you will get a another warning dialog about installing unsigned driver. Click <b>Yes</b> and then Click <b>Next</b> to complete the driver upgrade.</li>
</ol>
<p>

To install as a <b>standalone</b> driver Windows XP or Server 2003 System: <p>

<ol>
  <li>Build PCIDRV.SYS in XP or Server 2003 build environment.</li>
  <li>Copy the driver, test application and the <I>GENPCI.INF</I> file to a floppy disk or to a directory on the target test
    machine. Driver should be copied under appropriate subdirectory (i386, ia64, amd64).</li>
  <li>Launch the Device Manager (by clicking on Windows Start, Run option and type Devmgmt.msc)</b>.</li>
  <li>Select the Intel network controller in the device manager, right click to get the Properties menu and select <b>Updater Driver...</b>.</li>
  <li>Select <b>Driver</b> Tab.</li>
  <li>Click on <b>Update Driver...</b> button. This will take you to <b>Hardware Update Wizard</b>.</li>
  <li>Select <b>Install from a list of specific location (Advanced)</b>, and then click <b>Next</b>. </li>
  <li>Select <b>Don't search. I will choose the driver to install</b>, and then click <b>Next</b>. </li>
  <li>Click <b> Have Disk</b>, and point to the directory that contains GENPCI.INF file.</li>
  <li>Select <b>Sample WDM PCI For Intel 8255x Ethernet Controller</b>, and then click <b>Next</b>. </li>
  <li>If you get a Warning dialog about installing driver that's not compatible with the hardware. Click No and exit the Wizard.</li>
  <li>Otherwise, you will get a warning dialog about installing unsigned driver. Click <b>Continue Anyway</b> and complete the driver upgrade.</li>
</ol>


<h3>TESTING</h3>

<p>To test the miniport configuration: Install NDIS Tester from the <a href="http://www.microsoft.com/hwdq/hwtest/devices/default.asp?area=Network">WHQL
Web site</a> and run all the client and server tests. 
<p> To test standalone driver configuration: You should use the specially developed ping application, called MYPING that comes with the sample. The Ping.exe provided in the system will not work because in this configuration, the test card is not bound to any network protocol - it's not seen as Net device by the system. Currently the test application doesn't have ability to get an IP address from a network DHCP server. As a result, it is better to connect the network device to a private hub and ping another machine connected to that hub. For example, let us say you have a test machine A and another machine B (development box).
<uL>
<LI>Connect machine A and Machine B to a local hub.</LI>
<LI>Assign a static IP address, say 128.0.0.1 to the NIC on machine B.</LI>
<LI>Clear the ARP table on machine B by running <b>Arp -d</b> on the command line</LI>
<LI>Now run <b>Myping.exe</b>. This application enumerates GUID_DEVINTERFACE_PCIDRV and displays the name of the devices with an index number. This number will be used in identifying the interface when you invoke ping dialog.
<LI> In the ping dialog specify the following and click okay:
<pre>
Device Index: 1 <- number displayed in the list window
Source Ip Address: 128.0.0.4 <- You can make up any valid IP address for test Machine A
Destination IP Address: 128.0.0.1 <- IP address of machine B
Packet Size: 1428 <- Default max size of ping payload. Minimum value is 32 bytes.
</pre>
<LI> You should see ping messages displayed as shown below:

</UL>
If the machine B has more than one adapter and if the second adapter is connected to the internet (Corporate Network), instead of assigning static IP address to the adapter that's connected to the test machine, you can install Internet Connection Sharing (ICS) on it and get an IP address for ICS. This would let you use the test machine to browse the internet when the sample is installed in the miniport configuration and also in the standalone mode without making up or stealing somebody's IP address. For example, let us say the machine B has two adapters NIC1 and NIC2. NIC1 is connected to the CorpNet and NIC2 is connected to the private hub. Install ICS on NIC2 as described below:
<uL>
<LI>Select the NIC2 in the Network Connections Applet.
<LI>Click on the <b>Properties</b> button.
<LI>Go to the Advanced Tab and Check the box "Allow Other network users to connect through this computers internet connection" in the Internet Connection Sharing choice.
<LI> This will assign 192.168.0.1 IP address to NIC2.
<LI> Now on machine B, you can assume 192.168.0.2 as the local IP address and run <b>Myping.exe </b>. Or, you can install the sample in the miniport configuration and browse the internet.
</UL>

<p> Other menu options of myping applications are:
<UL>
<LI> Reenumerate All Device: This command lets you terminate active ping threads and close handle to all the device and reenumerate the devices again and display their names with index numbers. This might cause the devices to have new index numbers.
<LI> Cleanup: This command terminates ping threads and closes handles to all the devices.
<LI> Clear Display: Clears the window.
<LI> Verbose: Let you get more debug messages.
<LI> Exit: Terminate the application.
</UL>
<P>
NOTE: You can use this application only on a device installed in the standalone configuration. If you run it on a device that's installed as a miniport, you will get an error message. For such devices, you can use the system provided ping.exe.

</p>


<h3>CODE TOUR</h3>
This section describes some of the implementation details of the driver:
<p>
<UL>
<LI><B>IsUpperEdgeNDIS:</B> When you install the driver in the miniport configuration, the INF file creates a registry entry under the hardware key, HKLM\SYSTEM\CurrentControlSet\Enum\PCI\PCI\VEN_8086&DEV_1229&SUBSYS_00031179&REV_08\4&3b1caf2b&0&50F0\Device Parameters\IsUpperEdgeNDIS. This registry value enables the PCIDRV to determine whether it's running in a miniport configuration or not (Another approach without creating a special registry entry would be to read the class name using IoGetDeviceProperty(DevicePropertyClassName), just like the myping app does). In the miniport configuration, the driver doesn't do any power management because the upper filter, NDISEDGE.SYS, in conjunction with NDIS acts as power policy owner for the device and performs S-D mappings and generates WAIT_WAKE Irps.
<LI> <B>Idle Detection:</B> The Power manager interfaces provided on Windows 2000 thru Server 2003 for registering Idle detection has synchronization issues. When the system is going into lower power state, it doesn't disable idle detection as a result you could get D-IRP to go to a lower power state while your driver is in the middle of generating another D-IRP to go to standby. Let us say,  a device has registered for idle detection, and wants to be sent a D1 irp when idle. Later on the systems going into standby at S3, which corresponds to D3 for this device. The S3 Irp goes down the stack, and right then we detect that this device is idle and send it the D1 irp.

The device could see (S3, D3, D1) or (S3, D1, D3). The first case can be particularly disastrous, especially if it thinks its now at D1, but its bus is at some lesser D state.

<LI><B>Fast Resume:</B> To enable system to resume from suspend really quick, a driver should complete S0 IRP immediately, then request a D0 IRP. This allows the system to complete resuming while the driver performs device-specific re-initialization in the background. Since there is no synchronization between PnP and Power manager while generating a D-IRP, drivers have to make sure that their device doesn't get stopped or removed while they are handling a D-IRP. One technique would be to keep the S-IRP hostage until the corresponding D-IRP is completed. But then this approach delays the system boot because the devices are powered up serially, waiting for the S0 IRP sent on a device to be completed before moving on to another device. Keeping the fast resume goal and the system limitation in mind, this sample completes the SO IRP before requesting a D0-IRP and at the same time uses a remlock scheme to hold the PNP IRPs while the driver is in the middle of receiving a previously requested DO-IRP.

</UL>
<p>

<h3>Starting a Trace from Boot Time</h3>
 

To use this feature requires the component to use the Global Logger, so there are three things you must do.
<OL>
<LI><B>Build your driver to be global logging aware:</B> To enable a particular driver to use the global logger the code must be built with the option <B>#define WPP_GLOBALLOGGER 1</B> 
set before the inclusion of the tmh file in the module which includes WPP_INIT_TRACING. Note there is no issue with always building your driver with this option set, as it is a small piece of code. As long as your drivers control GUID is not enabled on the global logger (step 3 below) it will have no effect. The default is for it to be off.
<P>
<LI><B>Start the Global Logger:</B>The global logger is a logger instance that gets started at boot time. The following are the registry settings required to start the global logger. Under <B>HKLM\System\CCC\Control\WMI</B>, you will need a key called <B>GlobalLogger</B>.

The supported values are:
<PRE>
Start                   REG_DWORD   0 = off, 1 = on
BufferSize              REG_DWORD   Overwrite default buffer size, in units of 1K (i.e. 64 = 64kb)
MinimumBuffers          REG_DWORD Minimum number of buffers to pre-allocate when starting
MaximumBuffers          REG_DWORD Maximum number of buffers that it can grow to
FlushTimer              REG_DWORD Sets a flush timer, in units of seconds
FileName                REG_SZ The fully qualified pathname of the logfile. Make sure the directory already exists!
</PRE>

Other than Start, all have their own default values. If you let it choose the default logfilename, please make sure that your directory %SystemRoot%\system32\LogFiles\WMI exists.  
<P>
<LI><B>Enable your drivers control GUID on the Global logger</B>: The Control Guid for this device must be set as a key under the GlobalLogger key and the Flags and Levels value must be set. For this sample, create HKLM\System\CCC\Control\WMI\GlobalLogger\BC6C9364-FC67-42c5-ACF7-ABED3B12ECC6 key and set:
<PRE>
Flags                   REG_DWORD   0xF ; set to the desired flags
Level                   REG_DWORD   0x5 ; set to the desired level
 
</PRE>
<B>Notes</B>
<OL>
<LI>If a normal logger is started while a driver is enabled to the global logger, tracing will switch to the normal logger. 
<LI>If a Global Logger is running at ANY time and you start your driver with the above conditions met it will immediately start tracing to the global logger. 
<LI>There is only one Global Logger in the system, so its shared. Be prepared for other information. 
<LI>The system has built in ACPI logging that is always on if the Global Logger is enabled  no way to turn it off at this time - either ignore the unknown formats messages or use the latest system.tmf from the DDK with the tmf switch to tracefmt (-tmf system.tmf) which will decode the ACPI messages sensibly. 
</OL>
</OL>
<P>

<h3>RESOURCES</h3>

<p>For the latest release of the Windows device Driver Development Kit, see <a
HREF="http://www.microsoft.com/whdc/">http://www.microsoft.com/whdc/</a>.</p>
<p>If you have questions on using or adapting this sample for your project, you can either contact  <a HREF="http://support.microsoft.com/">Microsoft Technical Support</a> or post your questions in
the <a href="http://msdn.microsoft.com/newsgroups/default.asp?url=/newsgroups/loadframes.asp?icp=msdn&amp;slcid=us&amp;newsgroup=microsoft.public.development.device.drivers">Microsoft driver development newsgroup</a>.

</p>

<h3>FILE MANIFEST </h3>
<u>

<pre>File		Description
</u>
NETDRV.INF      INF file for installing the driver as a miniport.
GENPCI.INF      INF file for installing the driver as a custom class device.
SYS             Contains WDM interface specific code.
SYS\HW          Contains hardware specific code.
TEST            Contains source of test application (MYPING).
</pre>

<p ALIGN="CENTER"><font FACE="Verdana" SIZE="2"><a HREF="#top">Top of page</a> </p>
</font>

<table CELLSPACING="0" BORDER="0" WIDTH="624">
  <tr>
    <td VALIGN="MIDDLE" BGCOLOR="#00ffff" HEIGHT="2"></td>
  </tr>
</table>
<font FACE="MS Sans Serif" SIZE="1">

<p>&copy; 2003 Microsoft Corporation. All rights reserved.</font>
</font>
</body>
</html>
