/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

   filter.mof

Abstract:

    Managed Object Format file that contains descriptions of the data blocks
    events and methods implemented by the driver


    Note that the classes have extra qualifiers so that they can be 
    displayed within device manager property pages using wmiprop.dll. 
    Wmiprop.dll is the generic property page provider. Note that changes 
    to your device's inf are required to enable wmiprop.dll to display 
    property pages; WmiProp.Dll must be made a class coinstaller and a 
    WmiConfigClasses registry value must be setup that includes the
    list of classes to display as property pages.

    The following qualifiers affect the display of classes within
    a device manager property page. 

	DisplayName - The text that is displayed as the property page title or
		  the text for a property element within a page.

	Description - Description of the property element that is displayed on 
		  the page

	Range       - Specifies the valid range for value of the property. This
		  range is enforced by the property page provider. Multiple
		  ranges can be given, ie  "1-7,9,11,13-54"

	ValueMap/Values  - Specifies an enumeration that contains the list of 
		       valid values and the name to display for them. 

	Write       - Specifies that the property is writable. If the qualifier
		  is not specified then the property page does not allow
		  the value to be changed.

	WmiDisplayInHex  - Specifies that the value of the property be displayed
		       as a hexadecimal number.



    Note that the class Vendor_IrpCount will be displayed in Sysmon (Perfmon).

    Don't Forget:
        - Replace Vendor with the name of the driver
        - Run guidgen.exe to generate your own guids. Do not use the guids
          in this sample
--*/

class WMIEvent : __ExtrinsicEvent
{
};



//
// Define EC1 and EC2 as embedded classes. Embedded classes are structures
// that are used within other classes.
//
[WMI,
 Locale("MS\\0x409"),
 HeaderName("EC1"),
 DisplayName("Embedded Class 1") : amended,
 Description("Description of embedeed class 1") : amended,
 guid("{A1C15015-B069-11d1-9290-00A0C9062910}")]
class Vendor_EC1
{
    [WmiDataId(1),
     read, write, 
     DisplayName("BOOLEAN") : amended,
     Description("boolean data") : amended
    ] boolean Xboolean;

    [WmiDataId(2),
     read, write,
     DisplayName("UCHAR") : amended,
     Description("unsigned character data") : amended
    ] uint8 Xuint8;

    [WmiDataId(3),
     read, write,
     DisplayName("USHORT") : amended,
     Description("unsigned short data") : amended
    ] uint16 Xuint16;

    [WmiDataId(4),
     read, write,
     DisplayName("ULONG") : amended,
     Description("unsigned long data") : amended
    ] uint32 Xuint32;

    [WmiDataId(5),
     read, write,
     WmiDisplayInHex,
     DisplayName("ULONGLONG") : amended,
     Description("unsigned long long data") : amended
    ] uint64 Xuint64;

    [WmiDataId(6),
     read, write,
     DisplayName("CHAR") : amended,
     Description("signed byte data") : amended
    ] sint8 Xint8;

    [WmiDataId(7),
     read, write,
     DisplayName("SHORT") : amended,
     Description("singed short data") : amended
    ] sint16 Xint16;

    [WmiDataId(8),
     read, write,
     DisplayName("LONG") : amended,
     Description("singed long data") : amended
    ] sint32 Xint32;

    [WmiDataId(9),
     read, write,
     WmiDisplayInHex,
     DisplayName("LONGLONG") : amended,
     Description("signed long long data") : amended
    ] sint64 Xint64;

    [WmiDataId(10),
     read, write,
     DisplayName("DateTime") : amended,
     Description("absolute or relative date and time") : amended
    ] datetime Xdatetime;

};

[WMI,
 Locale("MS\\0x409"),
 HeaderName("EC2"),
 DisplayName("Embedded Class 2"),
 Description("Description of embedeed class 2") : amended,
 guid("{A1C15016-B069-11d1-9290-00A0C9062910}")]
class Vendor_EC2
{
    [WmiDataId(1),
     read, write,
     DisplayName("Boolean Array") : amended,
     Description("Fixed length array of 8 booleans") : amended
    ] boolean Xboolean[8];

    [WmiDataId(2),
     read, write,
     DisplayName("UCHAR Array") : amended,
     Description("Fixed length array of 8 unsigned characters") : amended
    ] uint8 Xuint8[8];

    [WmiDataId(3),
     read, write,
     DisplayName("USHORT Array") : amended,
     Description("Fixed length array of 4 unsigned shorts") : amended
    ] uint16 Xuint16[4];

    [WmiDataId(4),
     read, write,
     DisplayName("ULONG Array") : amended,
     Description("Fixed length array of 2 usingned long") : amended
    ] uint32 Xuint32[2];

    [WmiDataId(5),
     read, write,
     WmiDisplayInHex,
     DisplayName("ULONGLONG Array") : amended,
     Description("Unsigned long long") : amended
    ] uint64 Xuint64;

    [WmiDataId(6),
     read, write,
     DisplayName("CHAR Array") : amended,
     Description("Fixed length array of 8 signed characters") : amended
    ] sint8 Xint8[8];

    [WmiDataId(7),
     read, write,
     DisplayName("SHORT Array") : amended,
     Description("Fixed length array of 4 signed short") : amended
    ] sint16 Xint16[4];

    [WmiDataId(8),
     read, write,
     DisplayName("LONG Array") : amended,
     Description("Fixed length array of 2 signed long") : amended
    ] sint32 Xint32[2];

    [WmiDataId(9),
     read, write,
     WmiDisplayInHex,
     DisplayName("LONGLONG Array") : amended,
     Description("Signed long long") : amended
    ] sint64 Xint64;

    [WmiDataId(10),
     read, write,
     DisplayName("DateTime") : amended,
     Description("absolute or relative date and time") : amended
    ] datetime Xdatetime;
};



[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Description("Description of sample class 1") : amended,
 DisplayName("Sample Class 1") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F1-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass1
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write, 
     DisplayName("BOOLEAN") : amended,
     Description("boolean data") : amended
    ] boolean Xboolean;

    [WmiDataId(2),
     read, write,
     DisplayName("UCHAR") : amended,
     Description("unsigned character data") : amended
    ] uint8 Xuint8;

    [WmiDataId(3),
     read, write,
     DisplayName("USHORT") : amended,
     Description("unsigned short data") : amended
    ] uint16 Xuint16;

    [WmiDataId(4),
     read, write,
     DisplayName("ULONG") : amended,
     Description("unsigned long data") : amended
    ] uint32 Xuint32;

    [WmiDataId(5),
     read, write,
     WmiDisplayInHex,
     DisplayName("ULONGLONG") : amended,
     Description("unsigned long long data") : amended
    ] uint64 Xuint64;

    [WmiDataId(6),
     read, write,
     DisplayName("CHAR") : amended,
     Description("signed byte data") : amended
    ] sint8 Xint8;

    [WmiDataId(7),
     read, write,
     DisplayName("SHORT") : amended,
     Description("singed short data") : amended
    ] sint16 Xint16;

    [WmiDataId(8),
     read, write,
     DisplayName("LONG") : amended,
     Description("singed long data") : amended
    ] sint32 Xint32;

    [WmiDataId(9),
     read, write,
     WmiDisplayInHex,
     DisplayName("LONGLONG") : amended,
     Description("signed long long data") : amended
    ] sint64 Xint64;

    [WmiDataId(10),
     read, write,
     DisplayName("DateTime") : amended,
     Description("absolute or relative date and time") : amended
    ] datetime Xdatetime;
};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Description("Description of Sample Class 2") : amended,
 DisplayName("Sample Class 2") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F2-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass2
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write,
     DisplayName("Data") : amended,
     Description("Embedded class data") : amended
    ] Vendor_EC1 EmbeddedClass1;
    
};


[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Description("Description of Sample Class 3") : amended,
 DisplayName("Sample Class 3") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F3-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass3
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write,
     DisplayName("Data") : amended,
     Description("Fixed length array of 4 embedded classes") : amended
    ] Vendor_EC1 EmbeddedClass1[4];
    
};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Description("Description of Sample Class 4") : amended,
 DisplayName("Sample Class 4") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F4-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass4
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read,
     DisplayName("Count of Elements") : amended,
     Description("Number of elements in array") : amended
    ] uint32 Count;

    [WmiDataId(2),
     read, write,
     DisplayName("Data") : amended,
     Description("Variable length array of embedded classes. Count specifies the number of elements in the array") : amended,
     WmiSizeIs("Count")] Vendor_EC1 EmbeddedClass1[];
    
};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 DisplayName("Sample Class 5") : amended,
 Description("Description of Sample Class 5") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F5-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass5
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write,
     DisplayName("Data") : amended,
     Description("Embedded class data") : amended
    ] Vendor_EC2 EmbeddedClass2;
    
};


[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Description("Description of Sample Class 6") : amended,
 DisplayName("Sample Class 6") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F6-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass6
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write,
     DisplayName("Data") : amended,
     Description("Fixed length array of 4 embedded classes")
    ] Vendor_EC2 EmbeddedClass2[4];
    
};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Description("Description of Sample Class 7") : amended,
 DisplayName("Sample Class 7") : amended,
 Locale("MS\\0x409"),
 guid("{15D851F7-6539-11d1-A529-00A0C9062910}")]
class Vendor_SampleClass7
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, 
     DisplayName("Count of Elements") : amended,
     Description("Number of elements in array") : amended
    ] uint32 Count;
    [WmiDataId(2),
     read, write,
     DisplayName("Data") : amended,
     Description("Variable length array of embedded classes. Count specifies the number of elements in the array") : amended,
     WmiSizeIs("Count")] Vendor_EC2 EmbeddedClass2[];
    
};


[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 DisplayName("Get Set Data") : amended,
 Description("Methods that can get and set data") : amended,
 guid("{15D851F8-6539-11d1-A529-00A0C9062910}")]
class Vendor_GetSetData
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [Implemented,
     Description("Change the contents of EC1") : amended,
     WmiMethodId(1)] void SetEC1([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"} : amended
                                 ] uint32 BlockIndex,
                                 [in] uint32 pad,
                                 [in] boolean Xboolean,
                                 [in] uint8 Xuint8,
                                 [in] uint16 Xuint16,
                                 [in] uint32 Xuint32,
                                 [in] uint64 Xuint64,
                                 [in] sint8 Xint8,
                                 [in] sint16 Xint16,
                                 [in] sint32 Xint32,
                                 [in] sint64 Xint64,
                                 [in] datetime Xdatetime);
                           
    [Implemented,
     Description("Change the contents of EC2") : amended,
     WmiMethodId(2)] void SetEC2([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"} : amended
                                 ] uint32 BlockIndex,
                                 [in] uint32 pad,
                                 [in] boolean Xboolean[8],
                                 [in] uint8 Xuint8[8],
                                 [in] uint16 Xuint16[4],
                                 [in] uint32 Xuint32[2],
                                 [in] uint64 Xuint64,
                                 [in] sint8 Xint8[8],
                                 [in] sint16 Xint16[4],
                                 [in] sint32 Xint32[2],
                                 [in] sint64 Xint64,
                                 [in] datetime Xdatetime);
                           
    [Implemented,
     Description("Get the contents of EC1") : amended,
     WmiMethodId(3)] void GetEC1([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"} : amended
                                 ] uint32 BlockIndex,
                                 [out] boolean Xboolean,
                                 [out] uint8 Xuint8,
                                 [out] uint16 Xuint16,
                                 [out] uint32 Xuint32,
                                 [out] uint64 Xuint64,
                                 [out] sint8 Xint8,
                                 [out] sint16 Xint16,
                                 [out] sint32 Xint32,
                                 [out] sint64 Xint64,
                                 [out] datetime Xdatetime);
                           
    [Implemented,
     Description("Get the contents of EC2") : amended,
     WmiMethodId(4)] void GetEC2([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"}  : amended
                                 ] uint32 BlockIndex,
                                 [out] boolean Xboolean[8],
                                 [out] uint8 Xuint8[8],
                                 [out] uint16 Xuint16[4],
                                 [out] uint32 Xuint32[2],
                                 [out] uint64 Xuint64,
                                 [out] sint8 Xint8[8],
                                 [out] sint16 Xint16[4],
                                 [out] sint32 Xint32[2],
                                 [out] sint64 Xint64,
                                 [out] datetime Xdatetime);
                           
    [Implemented,
     Description("Cause driver to update its registration to remove Vendor_SampleClass7")  : amended,
     WmiMethodId(5)] void DisableSampleClass7();

    [Implemented,
     Description("Cause driver to update its registration to include Vendor_SampleClass7")  : amended,
     WmiMethodId(6)] void EnableSampleClass7();

    [Implemented, 
     Description("Change the contents of Ec1")  : amended,
     WmiMethodId(7)] void SetEC1AsEc([in,
                                  Description("Index of block of data to fire")  : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"} : amended
                                     ] uint32 BlockIndex,
                                     [in] Vendor_EC1 Ec1
                                    );
                           
    [Implemented,
     Description("Change the contents of Ec2")  : amended,
     WmiMethodId(8)] void SetEC2AsEc([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"}  : amended
                                     ] uint32 BlockIndex,
                                     [in] Vendor_EC2 Ec2);
                           
    [Implemented,
     Description("Get the contents of Ec1")  : amended,
     WmiMethodId(9)] void GetEC1AsEc([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"}  : amended
                                     ] uint32 BlockIndex,
                                     [out] Vendor_EC1 Ec1);
                           
    [Implemented,
     Description("Get the contents of Ec2") : amended,
     WmiMethodId(10)] void GetEC2AsEc([in, 
                                  Description("Index of block of data to fire") : amended,
                                 Values{"0", "1", "2", "3"},
                                 ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"} : amended
                                     ] uint32 BlockIndex,
                                      [out] Vendor_EC2 Ec2);

    [Implemented,
     Description("Cause driver to unregister device with WMI") : amended,
     WmiMethodId(11)] void UnregisterFromWmi();

};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing data") : amended,
 guid("{15D851E1-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass1 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write, 
     DisplayName("BOOLEAN") : amended,
     Description("boolean data") : amended
    ] boolean Xboolean;

    [WmiDataId(2),
     read, write,
     DisplayName("UCHAR") : amended,
     Description("unsigned character data") : amended
    ] uint8 Xuint8;

    [WmiDataId(3),
     read, write,
     DisplayName("USHORT") : amended,
     Description("unsigned short data") : amended
    ] uint16 Xuint16;

    [WmiDataId(4),
     read, write,
     DisplayName("ULONG") : amended,
     Description("unsigned long data") : amended
    ] uint32 Xuint32;

    [WmiDataId(5),
     read, write,
     DisplayName("ULONGLONG") : amended,
     Description("unsigned long long data") : amended
    ] uint64 Xuint64;

    [WmiDataId(6),
     read, write,
     DisplayName("CHAR") : amended,
     Description("signed byte data") : amended
    ] sint8 Xint8;

    [WmiDataId(7),
     read, write,
     DisplayName("SHORT") : amended,
     Description("singed short data") : amended
    ] sint16 Xint16;

    [WmiDataId(8),
     read, write,
     DisplayName("LONG") : amended,
     Description("singed long data") : amended
    ] sint32 Xint32;

    [WmiDataId(9),
     read, write,
     DisplayName("LONGLONG") : amended,
     Description("signed long long data") : amended
    ] sint64 Xint64;

    [WmiDataId(10),
     read, write,
     DisplayName("DateTime") : amended,
     Description("absolute or relative date and time") : amended
    ] datetime Xdatetime;

};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing embedded class 1") : amended,
 guid("{15D851E2-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass2 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     Description("Embedded class data") : amended
    ] Vendor_EC1 EmbeddedClass1;
    
};


[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing a fixed length array embedded class 1") : amended,
 guid("{15D851E3-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass3 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     Description("Fixed length array of 4 embedded classes") : amended
    ] Vendor_EC1 EmbeddedClass1[4];
    
};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing a variable length array embedded class 1") : amended,
 guid("{15D851E4-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass4 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     Description("Number of elements in array")  : amended
    ] uint32 Count;
    [WmiDataId(2),
     Description("Variable length array of embedded classes. Count specifies the number of elements in the array") : amended,
     WmiSizeIs("Count")] Vendor_EC1 EmbeddedClass1[];
    
};
[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing embedded class 2") : amended,
 guid("{15D851E5-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass5 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1)] Vendor_EC2 EmbeddedClass2;
    
};


[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing a fixed length array of embedded class 2") : amended,
 guid("{15D851E6-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass6 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1)] Vendor_EC2 EmbeddedClass2[4];
    
};

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event containing a variable length array of embedded class 2") : amended,
 guid("{15D851E7-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventClass7 : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     Description("Number of elements in array") : amended
    ] uint32 Count;
    [WmiDataId(2),
     Description("Variable length array of embedded classes. Count specifies the number of elements in the array") : amended,
     WmiSizeIs("Count")] Vendor_EC2 EmbeddedClass2[];
    
};


[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Event used to illustrate an event reference") : amended,
 guid("{15D851E8-6539-11d1-A529-00A0C9062910}")]
class Vendor_EventReferenceClass : WmiEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read, write, 
     DisplayName("BOOLEAN") : amended,
     Description("boolean data") : amended
    ] boolean Xboolean;

    [WmiDataId(2),
     read, write,
     DisplayName("UCHAR") : amended,
     Description("unsigned character data") : amended
    ] uint8 Xuint8;

    [WmiDataId(3),
     read, write,
     DisplayName("USHORT") : amended,
     Description("unsigned short data") : amended
    ] uint16 Xuint16;

    [WmiDataId(4),
     read, write,
     DisplayName("ULONG") : amended,
     Description("unsigned long data") : amended
    ] uint32 Xuint32;

    [WmiDataId(5),
     read, write,
     DisplayName("ULONGLONG") : amended,
     Description("unsigned long long data") : amended
    ] uint64 Xuint64;

    [WmiDataId(6),
     read, write,
     DisplayName("CHAR") : amended,
     Description("signed byte data") : amended
    ] sint8 Xint8;

    [WmiDataId(7),
     read, write,
     DisplayName("SHORT") : amended,
     Description("singed short data") : amended
    ] sint16 Xint16;

    [WmiDataId(8),
     read, write,
     DisplayName("LONG") : amended,
     Description("singed long data") : amended
    ] sint32 Xint32;

    [WmiDataId(9),
     read, write,
     DisplayName("LONGLONG") : amended,
     Description("signed long long data") : amended
    ] sint64 Xint64;

    [WmiDataId(10),
     read, write,
     DisplayName("DateTime") : amended,
     Description("absolute or relative date and time") : amended
    ] datetime Xdatetime;

};



[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Method that fire events") : amended,
 guid("{15D851F9-6539-11d1-A529-00A0C9062910}")]
class Vendor_FireEvent
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [Implemented,
     Description("Method to fire an event") : amended,
     WmiMethodId(1)] void FireEvent([in,
                                     Description("Type of WNODE to fire") : amended,
                                     Values{"0", "1"},
                                     ValueMap{"WNODE all data",
                                              "WNODE single instance"} : amended
                                    ] uint32 WnodeType,
                                    [in,
                                     description("Which type of event to fire"),
                                     Values{"1", "2", "5", "8"},
                                     ValueMap{"Class 1 data",
                                              "Embedded class 1 data",
                                              "Embedded class 2 data",
                                              "Event Reference"}
                                    ] uint32 DataType,
                                    [in,
                                     Description("Index of block of data to fire") : amended,
                                     Values{"0", "1", "2", "3"},
                                     ValueMap{"Block 1",
                                              "Block 2",
                                              "Block 3",
                                              "Block 4"} : amended
                                    ] uint32 BlockIndex);

};

//
// Define schema for performance counters to be displayed by sysmon/perfmon
//
// All perf counter classes must derived from Win32_PerfRawData and
// have the hiperf qualifier.
// 
// Each property within the class must have the following qualifiers:
//
//        CounterType - This defines the type of counter. See winperf.h
//                      for more information on what values to place in this
//                      qualifier.
//
//        PerfDetail  - The amount of detail supplied by the counter. 
//            PERF_DETAIL_NOVICE          100 // The uninformed can understand it
//            PERF_DETAIL_ADVANCED        200 // For the advanced user
//            PERF_DETAIL_EXPERT          300 // For the expert user
//            PERF_DETAIL_WIZARD          400 // For the system designer
//
//        DefaultScale - Power if 10 by which to scale chart line if 
//                       vertical axis is 100. 0 ==> 1, 1 ==> 10,
//                       -1 ==> 1/10. Used for purposes display only.
//
// Also property may have the following optional qualifiers
//
//        PerfDefault  - Denotes the property that is the default counter
//                       as displayed by the Sysmon list box. Only one
//                       property may have this qualifier.
//
//        Costly       - Indicates that the value for the property may 
//                       be costly to obtain
//        
//
// Only int32, uint32, int64 and uint64 properties will be displayed in sysmon
//
// All performance counter classes should be localizable, which means that 
// they should include ammended DisplayName and Description class and property
// qualifiers.
//

[WMI, 
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 Description("Performance counter class that keeps track of the count of irps handled by the driver") : amended,
 DisplayName("Vendor Irp Counts") : amended,
 guid("{C0D6F033-FD94-4dc5-9DEC-076D42124147}"),
 PerfDetail(100),
 HiPerf
]
class Vendor_IrpCounter : Win32_PerfRawData
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     DisplayName("Total Irp Count") : amended,

     PerfDefault,
     CounterType(0x00000000),    //    PERF_COUNTER_RAWCOUNT
     DefaultScale(0),
     PerfDetail(100),

     read,
     Description("Count of irps received") : amended
    ] uint32 TotalIrpCount;

    [WmiDataId(2),
     DisplayName("Total Irp Rate") : amended,

     CounterType(0x10410400),    //   PERF_COUNTER_COUNTER
     DefaultScale(0),
     PerfDetail(100),

     read,
     Description("Rate of irps received") : amended
    ] uint32 TotalIrpRate;

    [WmiDataId(3),
     DisplayName("WMI Irp Count") : amended,

     CounterType(0x00000000),    //  PERF_COUNTER_RAWCOUNT
     DefaultScale(0),
     PerfDetail(100),

     read,
     Description("Count of WMI irps received") : amended
    ] uint32 WmiIrpCount;

};

