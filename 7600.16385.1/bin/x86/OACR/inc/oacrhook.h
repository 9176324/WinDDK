#pragma once
/*****************************************************************************

   Module  : OACRHook
   Owner   : MarcK

******************************************************************************

  Part of the Office Auto Code Review (OACR) system.
  
  OACR supports hooking into the calls to build tools (cl.exe, link.exe, etc.),
  in order to perform custom operations as part of the build. The user can 
  provide a DLL, which is then loaded and called by OACR at the appropriate
  time. This header file declares the callback function that needs to be
  implemented by the DLL.

*****************************************************************************/

#ifdef __cplusplus

// Callback to process build tool output (stdout,stderr) line by line.
// 'pClientData' is the client data passed to FReadStdOutFile() or FReadStdErrFile().
// Must return true to get next line, or false to abort reading.
typedef bool ( __stdcall *PFNFPROCESSLINE )( const WCHAR* wzLine, void* pClientData );


// The interface passed with each notification.
interface IBuildToolRunInfo
{
   // NOTE: All APIs returning a string, return the number of characters
   //       copied to the output string (not including the NULL termination). 
   //       If the string to be returned is too long, it is truncated, and
   //       the buffer size is returned.
   //       If 0 is passed for the buffer size, the minimum required buffer
   //       size (including the NULL termination) is returned.
   //       In the error case, 0 is returned.

   // Build tools that can be hooked into
   enum Tool
   {
      NONE = 0,

      CL,   // C/C++ compiler (cl.exe)
      CSC,  // C# compiler (csc.exe)
      LINK, // Linker (link.exe)
      LIB,  // Library manager (lib.exe)
      MIDL, // MIDL compiler (midl.exe)
   };

   // Notifications sent
   enum Notification
   {
      BEFORE_RUN,   // Sent before the build tool is called
      AFTER_RUN,    // Sent after the build tools has been run
      AFTER_RETRY,  // Sent after a retry of a build tool run
   };

   //-------------------------------------------------------------------------
   // Client data
   //
   // Can be used to maintain state between notifications for the same build
   // tool run.
   //-------------------------------------------------------------------------

   virtual void  SetClientData( void* pData ) = 0;
   virtual void* GetClientData() const = 0;

   //-------------------------------------------------------------------------
   // Retrieve information - Any notification
   //-------------------------------------------------------------------------

   // Return the current notification.
   virtual Notification GetNotification() const = 0;

   // Return the build tool that triggered the notification.
   virtual Tool GetTool() const = 0;

   // Return the name of the OACR project under which the build tool has been called.
   virtual DWORD GetOACRProjectName( WCHAR* wzProjectName, DWORD cchProjectName ) const = 0;

   // Return the command line, as passed to the build tool.
   virtual DWORD GetCommandLine( WCHAR* wzCommandLine, DWORD cchCommandLine ) const = 0;

   // Return the fully expanded command line. Reponse files (e.g. '@c:\temp\foo.tmp'),
   // and environment variables (e.g. %CL%) are folded into the command line.
   virtual DWORD GetExpandedCommandLine( WCHAR* wzCommandLine, DWORD cchCommandLine ) const = 0;

   // Return the full path name of the build tool executable.
   virtual DWORD GetToolFileName( WCHAR* wzFileName, DWORD cchFileName ) const = 0;

   // Return the full path name of the primary output file generated by the build tool run.
   //    CL  : .obj file
   //    CSC : .exe or .dll (specified in the first /out switch)
   //    LINK: .exe or .dll
   //    LIB : .lib
   //    MIDL: .h file
   // The call fails for CL with multiple source files (batch runs). Use the batch run
   // APIs to get information about batch runs.
   virtual DWORD GetOutputFileName( WCHAR* wzFileName, DWORD cchFileName ) const = 0;

   //
   // Batch run info (CL only)
   //

   // Return true for a batch CL run (i.e. multiple source files)
   virtual bool FBatchRun() const = 0;

   // Return the number of source files in the batch run. Returns 0, for non batch runs.
   virtual DWORD CBatchItems() const = 0;

   // Return the full path name of the output file (.obj) for the source file with the
   // specified index. Returns 0 for non batch runs.
   virtual DWORD GetBatchItemOutputFileName( DWORD whichItem, WCHAR* wzFileName, DWORD cchFileName ) const = 0;

   //-------------------------------------------------------------------------
   // Retrieve information - Notifications 'AFTER_RUN' or 'AFTER_RETRY'
   //-------------------------------------------------------------------------

   // Return the result code for the build tool run.
   virtual int GetResult() const = 0;

   // Return the full path name of the file to which stdout output of the build tool run
   // has been redirected. Returns 0, if stdout redirection is turned off.
   virtual DWORD GetStdOutFileName( WCHAR* wzFileName, DWORD cchFileName ) const = 0;

   // Return the full path name of the file to which stderr output of the build tool run
   // has been redirected. Returns 0, if stderr redirection is turned off.
   virtual DWORD GetStdErrFileName( WCHAR* wzFileName, DWORD cchFileName ) const = 0;

   // Read the redirected stdout output of the build tool run, and send it to the specified
   // callback line by line. Noop, if stdout redirection is turned off.
   virtual bool FReadStdOutFile( PFNFPROCESSLINE pfnFProcessLine, void* pClientData = NULL ) const = 0;

   // Read the redirected stderr output of the build tool run, and send it to the specified
   // callback line by line. Noop, if stderr redirection is turned off.
   virtual bool FReadStdErrFile( PFNFPROCESSLINE pfnFProcessLine, void* pClientData = NULL ) const = 0;

   //
   // Batch run info (CL only)
   //

   // Return true, if the source file with the specified index was compiled successfully.
   // Returns fals for non batch runs.
   virtual bool FBatchItemSuccess( DWORD whichItem ) const = 0;

   //-------------------------------------------------------------------------
   // Generate stdout & stderr output - Any notification
   //-------------------------------------------------------------------------

   // Write to stdout.
   virtual void WriteStdOut( const WCHAR* wzMessage ) const = 0;

   // Write to stderr.
   virtual void WriteStdErr( const WCHAR* wzMessage ) const = 0;

   // Write the content of the specified text file to stdout.
   virtual bool FWriteStdOutFromFile( const WCHAR* wzFileName ) const = 0;

   // Write the content of the specified text file to stderr.
   virtual bool FWriteStdErrFromFile( const WCHAR* wzFileName ) const = 0;

   //-------------------------------------------------------------------------
   // Modify tool run - Any notification
   //-------------------------------------------------------------------------

   // Enable or disable further notifications for this build tool run. 
   // Notifications are enabled by default.
   virtual void SetNotify( bool fNotify ) = 0;

   // Override the result code for the build tool run.
   virtual void SetResult( int result ) = 0;

   // Set the command line to be passed to the build tool.
   virtual void SetCommandLine( const WCHAR* wzCommandLine ) = 0;

   // Set the file name of the build tool executable to be called.
   virtual void SetToolFileName( const WCHAR* wzFileName ) = 0;

   // Enable or disable redirection of stdout output of the build tool run.
   // Redirection is disabled by default.
   virtual void SetCaptureStdOut( bool fCapture ) = 0;

   // Enable or disable redirection of stderr output of the build tool run.
   // Redirection is disabled by default.
   virtual void SetCaptureStdErr( bool fCapture ) = 0;

   //-------------------------------------------------------------------------
   // Modify tool run - Notification 'BEFORE_RUN'
   //-------------------------------------------------------------------------

   // Cancel the build tool run. Use the SetResult() API to set the result code.
   // This is a noop, if called during the AFTER_RUN or AFTER_RETRY notification.
   virtual void CancelRun() = 0;

   //-------------------------------------------------------------------------
   // Modify tool run - Notifications 'AFTER_RUN' or 'AFTER_RETRY'
   //-------------------------------------------------------------------------

   // Force a retry of the build tool run.
   // This is a noop, if called during the BEFORE_RUN notification.
   virtual void RetryRun() = 0;

}; // IBuildToolRunInfo


// The callback that is called by OACR.
// This method needs to be implemented in the user provided DLL, so that OACR 
// can call it through LoadLibrary()/GetProcAddress()
extern "C" __callback void __stdcall OnBuildToolRun( __in IBuildToolRunInfo& toolRunInfo );

#endif // __cplusplus
