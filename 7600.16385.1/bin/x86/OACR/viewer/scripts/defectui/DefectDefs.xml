<?xml version="1.0"?>
<DefectDefs>
	<DefectDefGroup id="20001" name="OACR" tool="OACR" version="3.0.30122.101">
		<display>OACR Core Defects (not scanner specific)</display>
		<doc></doc>
		<ownerURL>http://oacr</ownerURL>
		<ownerContact>oacrhelp</ownerContact>
		<DefectDef id="20001" name="DEPRECATED_SCAN_SUCCESS">
			<description>
				<format>File processed successfully</format>
			</description>
			<doc>
				<P>
            NOTE: This warning is being phased out. It has been replaced by scanner specific warnings in the range 20040-20049.
            </P>
				<P>
            This warning indicates that a code scanner has successfully processed the indicated file.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20002" name="SCAN_FAILURE">
			<description>
				<format>Error processing file : Scanner failed</format>
			</description>
			<doc>
				<P>
            This warning indicates that a code scanner has not successfully checked the indicated file.
            The OACR warning contains additional information about the failure.
            </P>
				<P>
            This warning should always be enabled and treated as a severe defect. 
            Ignoring it can result in missed defects, since a code scanner may not report any defects, 
            if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20003" name="SCAN_FAILURE_CANNOT_FIND_FILE">
			<description>
				<format>Error processing file : Cannot find source file</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked, because the source file could not be found.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20004" name="SCAN_FAILURE_CANNOT_CREATE_DIR">
			<description>
				<format>Error processing file : Cannot create directory</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked, because a directory could not be created.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20005" name="SCAN_FAILURE_MANAGED_CODE">
			<description>
				<format>Error processing file : Managed code not supported</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked, because the code scanner does not support managed code.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20006" name="SCAN_IGNORE_FILE_MODIFIED">
			<description>
				<format>Not processing file : Source file modified after build</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked, because the source file has been modified after the build.
            This typically happens if OACR is running in asynchronous (i.e. batch or daemon) mode, and the user has edited the file after
            building, but before OACR tried to check the file. The file will be scheduled to be checked when it is built the next time.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20007" name="DEPRECATED_SCAN_FAILURE_CANNOT_CREATE_PCH">
			<description>
				<format>Error processing file : Cannot create precompiled header</format>
			</description>
			<doc>
				<P>
            NOTE: This warning is being phased out. It has been replaced by scanner specific warnings in the range 20050-20059.
            </P>
				<P>
            This warning indicates that the indicated file has not been checked, because the precompiled header was missing, and could not be generated.
            This is for example caused by:
            <ul>
						<li>Build errors in precompiled headers. This should be indicated by a respective OACR warning.</li>
						<li>Build environments that use temporary source files for precompiled headers. If OACR is configured to
               run asynchronously in such an environment, then the source file is no longer available when OACR needs it.
               The fix is to change the build environment to not delete the source file (recomended), or configure OACR with
               the 'CheckPCHAtCompileTime=1' setting (last resort, not recommended due to increased build time overhead).</li>
						<li>Enabling OACR without doing an initial full build. In that case, OACR doesn't know how to generate the precompiled header.</li>
						<li>Tampering with the OACR build root directory, deleting build history information that allows OACR to regenerate precompiled headers.</li>
					</ul>
				</P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20008" name="DEPRECATED_SCAN_EXCLUDED">
			<description>
				<format>Not processing file : File excluded from checking</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
            This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
            This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20009" name="SCAN_FAILURE_TIMEOUT">
			<description>
				<format>Error processing file : Scanner has timed out</format>
			</description>
			<doc>
				<P>
					This warning indicates that the indicated file has not been checked, because the code scanner has not completed in the maximum allowed time.
				</P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20021" name="DEPRECATED_SCAN_SUCCESS_PCH">
			<description>
				<format>Precompiled header processed successfully</format>
			</description>
			<doc>
				<P>
            NOTE: This warning is being phased out. It has been replaced by scanner specific warnings in the range 20040-20049.
            </P>
				<P>
            This warning indicates that a code scanner has successfully processed the indicated file and has created a precompiled header.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20022" name="SCAN_FAILURE_PCH">
			<description>
				<format>Error processing precompiled header : Scanner failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that a code scanner has not successfully processed the indicated file, and no precompiled header has been created.
               The OACR warning contains additional information about the failure.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since a code scanner may not report any defects,
               if the file can not be checked sucessfully. Failures in precompiled headers are
               even more severe than failures in regular source files, since they prevent
               checking of source files that depend on the precompiled header.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20023" name="SCAN_FAILURE_PCH_CANNOT_FIND_FILE">
			<description>
				<format>Error processing precompiled header : Cannot find source file</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked and no precompiled header has been created, because the source file could not be found.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20024" name="SCAN_FAILURE_PCH_CANNOT_CREATE_DIR">
			<description>
				<format>Error processing precompiled header : Cannot create directory</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked and no precompiled header has been created, because a directory could not be created.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20025" name="SCAN_FAILURE_PCH_MANAGED_CODE">
			<description>
				<format>Error processing precompiled header : Managed code not supported</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked and no precompiled header has been created, because the code scanner does not support managed code.
            </P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20026" name="SCAN_FAILURE_PCH_TIMEOUT">
			<description>
				<format>Error processing precompiled heade : Scanner has timed out</format>
			</description>
			<doc>
				<P>
					This warning indicates that the indicated file has not been checked and no precompiled header has been created, because the code scanner has not completed in the maximum allowed time.
				</P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20031" name="PLUGIN_DEPENDENCY">
			<description>
				<format>Error processing file : Scanner plugin dependency</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated file has not been checked successfully, because at least one required scanner plugin was not enabled.
            </P>
				<P>
            A code scanner plugin may have a dependency on another plugin, and can only function properly if both plugins are enabled.
            </P>
				<P>
            This warning should always be enabled and treated as a severe defect. 
            Ignoring it can result in missed defects, since the affected plugin may not report all defects.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20040" name="SCAN_SUCCESS_EXTERNAL">
			<description>
				<format>Source file processed successfully by external scanner</format>
			</description>
			<doc>
				<P>
            This warning indicates that a external code scanner has successfully processed the indicated source file.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20041" name="SCAN_SUCCESS_PREFAST">
			<description>
				<format>Source file processed successfully by PREfast</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfast has successfully processed the indicated source file.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20042" name="SCAN_SUCCESS_PREFAST_PCH">
			<description>
				<format>Precompiled header processed successfully by PREfast</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfast has successfully processed the indicated file and has created a precompiled header.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20043" name="SCAN_SUCCESS_PREFIX">
			<description>
				<format>Source file processed successfully by PREfix</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfix has successfully processed the indicated source file.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20044" name="SCAN_SUCCESS_PREFIX_PCH">
			<description>
				<format>Precompiled header processed successfully by PREfix</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfix has successfully processed the indicated file and has created a precompiled header.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20045" name="SCAN_SUCCESS_PRESHARP">
			<description>
				<format>Source file processed successfully by PREsharp</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREsharp has successfully processed the indicated source file.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20046" name="SCAN_SUCCESS_MIDLDD">
			<description>
				<format>Source file processed successfully by MidlDD</format>
			</description>
			<doc>
				<P>
            This warning indicates that MidlDD has successfully processed the indicated source file.
            </P>
				<P>
            This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20047" name="SCAN_SUCCESS_SSS">
			<description>
				<format>Source file processed successfully by SSS</format>
			</description>
			<doc>
				<P>
               This warning indicates that SSS has successfully processed the indicated source file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20048" name="SCAN_SUCCESS_ESP">
			<description>
				<format>Source file processed successfully by Esp</format>
			</description>
			<doc>
				<P>
               This warning indicates that Esp has successfully processed the indicated source file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20049" name="SCAN_SUCCESS_GOLDANALYZER">
			<description>
				<format>Source file processed successfully by GoldAnalyzer</format>
			</description>
			<doc>
				<P>
               This warning indicates that GoldAnalyzer has successfully processed the indicated source file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20050" name="SCAN_FAILURE_EXTERNAL">
			<description>
				<format>Error processing source file : External scanner run failed</format>
			</description>
			<doc>
				<P>
            This warning indicates that a external code scanner has not successfully checked the indicated source file.
            The OACR check log may contain additional information.
            Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
            to see the log. Note, that the log is only available until the next full
            build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
            This warning should always be enabled and treated as a severe defect. 
            Ignoring it can result in missed defects, since a code scanner may not report any defects, 
            if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20051" name="SCAN_FAILURE_PREFAST">
			<description>
				<format>Error processing source file : PREfast run failed</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfast has not successfully checked the indicated source file.
            This is for example caused by:
            <ul>
						<li>Differences between the parser versions used by the build and by PREfast,
               e.g. VC7.1 based version of PREfast and VC8.0 based build environment.</li>
						<li>Wrong usage of OACR/PREfast specific macros, e.g. '__fallthrough' without
               trailing semicolon.</li>
					</ul>
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect. 
               Ignoring it can result in missed defects, since PREfast does not report any defects, 
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20052" name="SCAN_FAILURE_PREFAST_PCH_MISSING">
			<description>
				<format>Error processing source file : Cannot run PREfast on file due to a missing precompiled header</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked by PREfast, because the precompiled header was missing, and could not be generated.
               This is for example caused by:
               <ul>
						<li>Build errors in precompiled headers. This should be indicated by a respective OACR warning.</li>
						<li>Build environments that use temporary source files for precompiled headers. If OACR is configured to
                  run asynchronously in such an environment, then the source file is no longer available when OACR needs it.
                  The fix is to change the build environment to not delete the source file (recomended), or configure OACR with
                  the 'CheckPCHAtCompileTime=1' setting (last resort, not recommended due to increased build time overhead).</li>
						<li>Enabling OACR without doing an initial full build. In that case, OACR doesn't know how to generate the precompiled header.</li>
						<li>Tampering with the OACR build root directory, deleting build history information that allows OACR to regenerate precompiled headers.</li>
					</ul>
				</P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20053" name="SCAN_FAILURE_PREFAST_PCH">
			<description>
				<format>Error processing precompiled header : PREfast run to create precompiled header failed</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfast has not successfully processed the indicated file, and no precompiled header has been created.
            See warning 20051 for more information on possible causes.
            </P>
				<P>
            This warning should always be enabled and treated as a severe defect. 
            Ignoring it can result in missed defects, since PREfast does not report any defects, 
            if the file can not be checked sucessfully. Failures in precompiled headers are
            even more severe than failures in regular source files, since they prevent
            checking of source files that depend on the precompiled header.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20054" name="SCAN_FAILURE_PREFIX">
			<description>
				<format>Error processing source file : PREfix parse phase run failed</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfix has not successfully parsed the indicated source file.
            This is for example caused by:
            <ul>
						<li>Differences between the parser versions used by the build and by PREfix,
               e.g. VC7.1 based version of PREfix and VC8.0 based build environment.</li>
						<li>Wrong usage of OACR/PREfix specific macros.</li>
					</ul>
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect. 
               Ignoring it can reduce the quality of PREfix results, due to incomplete simulation.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20055" name="SCAN_FAILURE_PREFIX_PCH_MISSING">
			<description>
				<format>Error processing source file : Cannot run PREfix on file due to a missing precompiled header</format>
			</description>
			<doc>
				<P>
            This warning indicates that the indicated source file has not been parsed by PREfix, because the precompiled header was missing, and could not be generated.
            This is for example caused by:
            <ul>
						<li>Build errors in precompiled headers. This should be indicated by a respective OACR warning.</li>
						<li>Build environments that use temporary source files for precompiled headers. If OACR is configured to
               run asynchronously in such an environment, then the source file is no longer available when OACR needs it.
               The fix is to change the build environment to not delete the source file (recomended), or configure OACR with
               the 'CheckPCHAtCompileTime=1' setting (last resort, not recommended due to increased build time overhead).</li>
						<li>Enabling OACR without doing an initial full build. In that case, OACR doesn't know how to generate the precompiled header.</li>
						<li>Tampering with the OACR build root directory, deleting build history information that allows OACR to regenerate precompiled headers.</li>
					</ul>
				</P>
				<P>
            This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20056" name="SCAN_FAILURE_PREFIX_PCH">
			<description>
				<format>Error processing precompiled header : PREfast parse phase run to create precompiled header failed</format>
			</description>
			<doc>
				<P>
            This warning indicates that PREfix has not successfully processed the indicated file, and no precompiled header has been created.
            See warning 20054 for more information on possible causes.
            </P>
				<P>
            This warning should always be enabled and treated as a severe defect. 
            Ignoring it can reduce the quality of PREfix results, due to incomplete simulation.
            Failures in precompiled headers are
            even more severe than failures in regular source files, since they prevent
            checking of source files that depend on the precompiled header.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20057" name="SCAN_FAILURE_PRESHARP">
			<description>
				<format>Error processing source file : PREsharp run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that PREsharp has not successfully checked the indicated source file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect. 
               Ignoring it can result in missed defects, since PREsharp may not report any defects, 
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20058" name="SCAN_FAILURE_MIDLDD">
			<description>
				<format>Error processing source file : MidlDD run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that MidlDD has not successfully checked the indicated source file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect. 
               Ignoring it can result in missed defects, since MidlDD may not report any defects, 
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20059" name="SCAN_FAILURE_SSS">
			<description>
				<format>Error processing source file : SSS run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that SSS has not successfully checked the indicated source file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since SSS may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20060" name="SCAN_SUCCESS_FXCOP">
			<description>
				<format>Source file processed successfully by FxCop</format>
			</description>
			<doc>
				<P>
               This warning indicates that FxCop has successfully processed the indicated source file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20070" name="SCAN_FAILURE_FXCOP">
			<description>
				<format>Error processing source file : FxCop run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that FxCop has not successfully checked the indicated source file.
               See the FxCop log for information on the failure. Run 'oacr log &lt;project&gt; /fxcop'
               for the respective project (e.g. 'oacr log mso /fxcop') to see the FxCop log.
               Note, that the log is only available until the next full build is started, 
               i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since FxCop may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20071" name="SCAN_FAILURE_FXCOP_NON_FATAL">
			<description>
				<format>Error processing source file : FxCop run failed with non-fatal error</format>
			</description>
			<doc>
				<P>
               This warning indicates that there have been non-fatal errors during the FxCop check.
               See the FxCop log for information on the failure. Run 'oacr log &lt;project&gt; /fxcop'
               for the respective project (e.g. 'oacr log mso /fxcop') to see the FxCop log.
               Note, that the log is only available until the next full build is started,
               i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20072" name="SCAN_FAILURE_ESP">
			<description>
				<format>Error processing source file : Esp run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that Esp has not successfully checked the indicated source file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since Esp may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20073" name="SCAN_FAILURE_GOLDANALYZER">
			<description>
				<format>Error processing source file : GoldAnalyzer run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that GoldAnalyzer has not successfully checked the indicated source file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since GoldAnalyzer may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20100" name="SCAN_EXCLUDED_EXTERNAL">
			<description>
				<format>Not processing file : Source file excluded from checking by external scanner</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20101" name="SCAN_EXCLUDED_PREFAST">
			<description>
				<format>Not processing file : Source file excluded from checking by PREfast</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20102" name="SCAN_EXCLUDED_PREFIX">
			<description>
				<format>Not processing file : Source file excluded from checking by PREfix</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20103" name="SCAN_EXCLUDED_PREsharp">
			<description>
				<format>Not processing file : Source file excluded from checking by PREsharp</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20104" name="SCAN_EXCLUDED_MIDLDD">
			<description>
				<format>Not processing file : Source file excluded from checking by MidlDD</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20105" name="SCAN_EXCLUDED_SSS">
			<description>
				<format>Not processing file : Source file excluded from checking by SSS</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20106" name="SCAN_EXCLUDED_FXCOP">
			<description>
				<format>Not processing file : Source file excluded from checking by FxCop</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20107" name="SCAN_EXCLUDED_FXCOP_NOPROJECT">
			<description>
				<format>Not processing file : Source file excluded from checking by FxCop due to missing configuration data</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because not all required scanner configuration information was available.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20108" name="SCAN_EXCLUDED_ESP">
			<description>
				<format>Not processing file : Source file excluded from checking by Esp</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20109" name="SCAN_EXCLUDED_GOLDANALYZER">
			<description>
				<format>Not processing file : Source file excluded from checking by GoldAnalyzer</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated source file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20120" name="SCAN_SUCCESS_BINARY_EXTERNAL">
			<description>
				<format>Binary file processed successfully by external scanner</format>
			</description>
			<doc>
				<P>
               This warning indicates that a external code scanner has successfully processed the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20121" name="SCAN_SUCCESS_BINARY_PREFIX">
			<description>
				<format>Binary file processed successfully by PREfix</format>
			</description>
			<doc>
				<P>
               This warning indicates that PREfix has successfully processed the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20122" name="SCAN_SUCCESS_BINARY_PRESHARP">
			<description>
				<format>Binary file processed successfully by PREsharp</format>
			</description>
			<doc>
				<P>
               This warning indicates that PREsharp has successfully processed the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20123" name="SCAN_SUCCESS_BINARY_FXCOP">
			<description>
				<format>Binary file processed successfully by FxCop</format>
			</description>
			<doc>
				<P>
               This warning indicates that FxCop has successfully processed the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20124" name="SCAN_SUCCESS_BINARY_ESP">
			<description>
				<format>Binary file processed successfully by Esp</format>
			</description>
			<doc>
				<P>
               This warning indicates that Esp has successfully processed the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20125" name="SCAN_SUCCESS_BINARY_GOLDANALYZER">
			<description>
				<format>Binary file processed successfully by GoldAnalyzer</format>
			</description>
			<doc>
				<P>
               This warning indicates that GoldAnalyzer has successfully processed the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20126" name="SCAN_SUCCESS_BINARY_SSS">
			<description>
				<format>Source files related to binary file processed successfully by SSS</format>
			</description>
			<doc>
				<P>
               This warning indicates that SSS has successfully processed the source files related to the indicated binary file.
            </P>
				<P>
               This warning should not be enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20140" name="SCAN_FAILURE_BINARY_EXTERNAL">
			<description>
				<format>Error processing binary file : External scanner run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that a external code scanner has not successfully checked the indicated binary file.
               The OACR check log may contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since a code scanner may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20141" name="SCAN_FAILURE_BINARY_PREFIX">
			<description>
				<format>Error processing binary file : PREfix parse phase run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that PREfix has not successfully parsed the indicated binary file.
               This is for example caused by:
               <ul>
						<li>
                     Differences between the parser versions used by the build and by PREfix,
                     e.g. VC7.1 based version of PREfix and VC8.0 based build environment.
                  </li>
						<li>Wrong usage of OACR/PREfix specific macros.</li>
					</ul>
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can reduce the quality of PREfix results, due to incomplete simulation.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20142" name="SCAN_FAILURE_BINARY_PRESHARP">
			<description>
				<format>Error processing binary file : PREsharp run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that PREsharp has not successfully checked the indicated binary file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since PREsharp may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20143" name="SCAN_FAILURE_BINARY_FXCOP">
			<description>
				<format>Error processing binary file : FxCop run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that FxCop has not successfully checked the indicated binary file.
               See the FxCop log for information on the failure. Run 'oacr log &lt;project&gt; /fxcop'
               for the respective project (e.g. 'oacr log mso /fxcop') to see the FxCop log.
               Note, that the log is only available until the next full build is started,
               i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since FxCop may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20144" name="SCAN_FAILURE_BINARY_FXCOP_NON_FATAL">
			<description>
				<format>Error processing binary file : FxCop run failed with non-fatal error</format>
			</description>
			<doc>
				<P>
               This warning indicates that there have been non-fatal errors during the FxCop check.
               See the FxCop log for information on the failure. Run 'oacr log &lt;project&gt; /fxcop'
               for the respective project (e.g. 'oacr log mso /fxcop') to see the FxCop log.
               Note, that the log is only available until the next full build is started,
               i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20145" name="SCAN_FAILURE_BINARY_ESP">
			<description>
				<format>Error processing binary file : Esp run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that Esp has not successfully checked the indicated binary file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since Esp may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20146" name="SCAN_FAILURE_BINARY_GOLDANALYZER">
			<description>
				<format>Error processing binary file : GoldAnalyzer run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that GoldAnalyzer has not successfully checked the indicated binary file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since GoldAnalyzer may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20147" name="SCAN_FAILURE_BINARY_SSS">
			<description>
				<format>Error processing binary file : SSS run failed</format>
			</description>
			<doc>
				<P>
               This warning indicates that SSS has not successfully checked the source files related to the indicated binary file.
               The scanner generated error message may be included in the OACR warning.
               The OACR check log may also contain additional information.
               Run 'oacr log &lt;project&gt;' for the respective project (e.g. 'oacr log mso')
               to see the log. Note, that the log is only available until the next full
               build is started, i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
				<P>
               This warning should always be enabled and treated as a severe defect.
               Ignoring it can result in missed defects, since SSS may not report any defects,
               if the file can not be checked sucessfully.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20160" name="SCAN_EXCLUDED_BINARY_EXTERNAL">
			<description>
				<format>Not processing file : Binary file excluded from checking by external scanner</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20161" name="SCAN_EXCLUDED_BINARY_PREFAST">
			<description>
				<format>Not processing file : Binary file excluded from checking by PREfast</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20162" name="SCAN_EXCLUDED_BINARY_PREFIX">
			<description>
				<format>Not processing file : Binary file excluded from checking by PREfix</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20163" name="SCAN_EXCLUDED_BINARY_PREsharp">
			<description>
				<format>Not processing file : Binary file excluded from checking by PREsharp</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20164" name="SCAN_EXCLUDED_BINARY_MIDLDD">
			<description>
				<format>Not processing file : Binary file excluded from checking by MidlDD</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20165" name="SCAN_EXCLUDED_BINARY_SSS">
			<description>
				<format>Not processing file : Binary file excluded from checking by SSS</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20166" name="SCAN_EXCLUDED_BINARY_FXCOP">
			<description>
				<format>Not processing file : Binary file excluded from checking by FxCop</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20167" name="SCAN_EXCLUDED_BINARY_FXCOP_NOPROJECT">
			<description>
				<format>Not processing file : Binary file excluded from checking by FxCop due to missing configuration data</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because not all required scanner configuration information was available.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20168" name="SCAN_EXCLUDED_BINARY_ESP">
			<description>
				<format>Not processing file : Binary file excluded from checking by Esp</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20169" name="SCAN_EXCLUDED_BINARY_GOLDANALYZER">
			<description>
				<format>Not processing file : Binary file excluded from checking by GoldAnalyzer</format>
			</description>
			<doc>
				<P>
               This warning indicates that the indicated binary file has not been checked, because it has been excluded through a filter in oacr.ini or oacruser.ini.
            </P>
				<P>
               This warning is always generated at compile time, even if OACR is configured to check files asynchronously in batch or daemon mode.
               This also means that the warning is not generated by a check run from a backup copy of a project queue, e.g. through the 'oacr recheck' command.
            </P>
				<P>
               This warning is typically not enabled for normal OACR use. It is a diagnostic message used to track OACR check activity.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef id="20400" name="SCAN_FAILURE_FXCOP_INDIRECT_REFERENCE">
			<description>
				<format>Error processing binary file : FxCop run failed with non-fatal assembly reference error</format>
			</description>
			<doc>
				<P>
               This warning indicates that there have been non-fatal assembly reference errors during the FxCop check.
               This means that assemblies referenced indirectly by the target assembly could not be found.
               See the FxCop log for information on the failure. Run 'oacr log &lt;project&gt; /fxcop'
               for the respective project (e.g. 'oacr log mso /fxcop') to see the FxCop log.
               Note, that the log is only available until the next full build is started,
               i.e. until the next 'oacr clean &lt;project&gt;' call.
            </P>
			</doc>
			<helpURL>http://oacr/warnings/warning_%id%.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup id="99300" name="mspft" tool="PREfast" version="9.0.21022.51">
		<DefectDef id="6001" name="USING_UNINIT_VAR">
			<description>
				<format>
		    Using uninitialized memory '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6001.htm</helpURL>
		</DefectDef>
		<DefectDef id="6011" name="DEREF_NULL_PTR">
			<description>
				<format>
		    Dereferencing NULL pointer '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6011.htm</helpURL>
		</DefectDef>
		<DefectDef id="6014" name="MEMORY_LEAK">
			<description>
				<format>
		    Leaking memory '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6014.htm</helpURL>
		</DefectDef>
		<DefectDef id="6029" name="USING_TAINTED_DATA">
			<description>
				<format>
		    Possible buffer overrun in call to '%ls': use of unchecked value '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6029.htm</helpURL>
		</DefectDef>
		<DefectDef id="6031" name="RETVAL_IGNORED_FUNC_COULD_FAIL">
			<description>
				<format>
		    Return value ignored: '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6031.htm</helpURL>
		</DefectDef>
		<DefectDef id="6053" name="MISSING_ZERO_TERMINATION1">
			<description>
				<format>
		    Call to '%ls' might not zero-terminate string '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6053.htm</helpURL>
		</DefectDef>
		<DefectDef id="6054" name="MISSING_ZERO_TERMINATION2">
			<description>
				<format>
		    String '%ls' might not be zero-terminated

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6054.htm</helpURL>
		</DefectDef>
		<DefectDef id="6057" name="CHAR_BYTE_SIZE_MISMATCH">
			<description>
				<format>
		    Buffer overrun due to number of characters/number of bytes mismatch in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6057.htm</helpURL>
		</DefectDef>
		<DefectDef id="6059" name="BAD_CONCATENATION">
			<description>
				<format>
		    Incorrect length parameter in call to '%ls'. Pass the number of remaining characters, not the buffer size of '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6059.htm</helpURL>
		</DefectDef>
		<DefectDef id="6063" name="MISSING_STRING_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Missing string argument to '%ls' that corresponds to conversion specifier '%d'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6063.htm</helpURL>
		</DefectDef>
		<DefectDef id="6064" name="MISSING_INTEGER_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Missing integer argument to '%ls' that corresponds to conversion specifier '%d'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6064.htm</helpURL>
		</DefectDef>
		<DefectDef id="6066" name="NON_POINTER_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Non-pointer passed as parameter '%d' when pointer is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6066.htm</helpURL>
		</DefectDef>
		<DefectDef id="6067" name="NON_STRING_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Parameter '%d' in call to '%ls' must be the address of the string

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6067.htm</helpURL>
		</DefectDef>
		<DefectDef id="6200" name="INDEX_EXCEEDS_MAX_NONSTACK">
			<description>
				<format>
		    Index '%ls' is out of valid index range '%I64u' to '%I64d' for non-stack buffer '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6200.htm</helpURL>
		</DefectDef>
		<DefectDef id="6201" name="INDEX_EXCEEDS_MAX">
			<description>
				<format>
		    Index '%1$ls' is out of valid index range '%2$I64u' to '%3$I64d' for possibly stack allocated buffer '%4$ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6201.htm</helpURL>
		</DefectDef>
		<DefectDef id="6202" name="BUFFER_OVERRUN">
			<description>
				<format>
		    Buffer overrun for '%ls', which is possibly stack allocated, in call to '%ls': length '%I64d' exceeds buffer size '%I64d'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6202.htm</helpURL>
		</DefectDef>
		<DefectDef id="6203" name="BUFFER_OVERRUN_NONSTACK">
			<description>
				<format>
		    Buffer overrun for non-stack buffer '%ls' in call to '%ls': length '%I64d' exceeds buffer size '%I64d'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6203.htm</helpURL>
		</DefectDef>
		<DefectDef id="6204" name="UNVALIDATED_PARAM">
			<description>
				<format>
		    Possible buffer overrun in call to '%ls': use of unchecked parameter '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6204.htm</helpURL>
		</DefectDef>
		<DefectDef id="6209" name="SIZEOF_CHAR_BYTE_SIZE_MISMATCH">
			<description>
				<format>
		    Using 'sizeof %ls' as parameter '%d' in call to '%ls' where '%ls' might be an array of wide characters, did you intend to use character count rather than byte count ?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6209.htm</helpURL>
		</DefectDef>
		<DefectDef id="6211" name="MEMORY_LEAK_EXCEPTION">
			<description>
				<format>
		    Leaking memory '%ls' due to an exception. Consider using a local catch block to clean up memory

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6211.htm</helpURL>
		</DefectDef>
		<DefectDef id="6214" name="CAST_HRESULT_TO_BOOL">
			<description>
				<format>
		    Cast between semantically different integer types: HRESULT to a Boolean type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6214.htm</helpURL>
		</DefectDef>
		<DefectDef id="6215" name="CAST_BOOL_TO_HRESULT">
			<description>
				<format>
		    Cast between semantically different integer types: a Boolean type to HRESULT

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6215.htm</helpURL>
		</DefectDef>
		<DefectDef id="6216" name="COMPILER_INSERTED_CAST_BOOL_TO_HRESULT">
			<description>
				<format>
		    Compiler-inserted cast between semantically different integral types: a Boolean type to HRESULT

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6216.htm</helpURL>
		</DefectDef>
		<DefectDef id="6217" name="TESTING_HRESULT_WITH_NOT">
			<description>
				<format>
		    Implicit cast between semantically different integer types: testing HRESULT with 'not'. Consider using SUCCEEDED or FAILED macro instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6217.htm</helpURL>
		</DefectDef>
		<DefectDef id="6219" name="COMPARING_HRESULT_TO_ONE">
			<description>
				<format>
		    Implicit cast between semantically different integer types: comparing HRESULT to 1 or TRUE. Consider using SUCCEEDED or FAILED macro instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6219.htm</helpURL>
		</DefectDef>
		<DefectDef id="6220" name="COMPARING_HRESULT_TO_MINUS_ONE">
			<description>
				<format>
		    Implicit cast between semantically different integer types: comparing HRESULT to -1. Consider using SUCCEEDED or FAILED macro instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6220.htm</helpURL>
		</DefectDef>
		<DefectDef id="6221" name="COMPARING_HRESULT_TO_INT">
			<description>
				<format>
		    Implicit cast between semantically different integer types: comparing HRESULT to an integer. Consider using SUCCEEDED or FAILED macros instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6221.htm</helpURL>
		</DefectDef>
		<DefectDef id="6225" name="ASSIGNING_ONE_TO_HRESULT">
			<description>
				<format>
		    Implicit cast between semantically different integer types: assigning 1 or TRUE to HRESULT. Consider using S_FALSE instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6225.htm</helpURL>
		</DefectDef>
		<DefectDef id="6226" name="ASSIGNING_MINUS_ONE_TO_HRESULT">
			<description>
				<format>
		    Implicit cast between semantically different integer types: assigning -1 to HRESULT. Consider using E_FAIL instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6226.htm</helpURL>
		</DefectDef>
		<DefectDef id="6230" name="USING_HRESULT_IN_BOOLEAN_CONTEXT">
			<description>
				<format>
		    Implicit cast between semantically different integer types: using HRESULT in a Boolean context

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6230.htm</helpURL>
		</DefectDef>
		<DefectDef id="6235" name="NONZEROLOGICALOR">
			<description>
				<format>
		    (&amp;lt;non-zero constant&amp;gt; || &amp;lt;expression&amp;gt;) is always a non-zero constant

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6235.htm</helpURL>
		</DefectDef>
		<DefectDef id="6236" name="LOGICALORNONZERO">
			<description>
				<format>
		    (&amp;lt;expression&amp;gt; || &amp;lt;non-zero constant&amp;gt;) is always a non-zero constant

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6236.htm</helpURL>
		</DefectDef>
		<DefectDef id="6237" name="ZEROLOGICALANDLOSINGSIDEEFFECTS">
			<description>
				<format>
		    (&amp;lt;zero&amp;gt; &amp;&amp; &amp;lt;expression&amp;gt;) is always zero. &amp;lt;expression&amp;gt; is never evaluated and might have side effects

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6237.htm</helpURL>
		</DefectDef>
		<DefectDef id="6239" name="NONZEROLOGICALAND">
			<description>
				<format>
		    (&amp;lt;non-zero constant&amp;gt; &amp;&amp; &amp;lt;expression&amp;gt;) always evaluates to the result of &amp;lt;expression&amp;gt;. Did you intend to use the bitwise-and operator?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6239.htm</helpURL>
		</DefectDef>
		<DefectDef id="6240" name="LOGICALANDNONZERO">
			<description>
				<format>
		    (&amp;lt;expression&amp;gt; &amp;&amp; &amp;lt;non-zero constant&amp;gt;) always evaluates to the result of &amp;lt;expression&amp;gt;. Did you intend to use the bitwise-and operator?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6240.htm</helpURL>
		</DefectDef>
		<DefectDef id="6242" name="LOCALUNWINDFORCED">
			<description>
				<format>
		    A jump out of this try block forces local unwind. This incurs a severe performance penalty

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6242.htm</helpURL>
		</DefectDef>
		<DefectDef id="6244" name="LOCALDECLHIDESGLOBAL">
			<description>
				<format>
		    Local declaration of '%ls' hides previous declaration at line '%d' of '%s'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6244.htm</helpURL>
		</DefectDef>
		<DefectDef id="6246" name="LOCALDECLHIDESLOCAL">
			<description>
				<format>
		    Local declaration of '%ls' hides declaration of the same name in outer scope. For additional information, see previous declaration at line '%d' of '%s'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6246.htm</helpURL>
		</DefectDef>
		<DefectDef id="6248" name="CREATINGNULLDACL">
			<description>
				<format>
		    Setting a SECURITY_DESCRIPTOR's DACL to NULL will result in an unprotected object

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6248.htm</helpURL>
		</DefectDef>
		<DefectDef id="6250" name="WIN32UNRELEASEDVADS">
			<description>
				<format>
		    Calling '%ls' without the MEM_RELEASE flag might free memory but not address descriptors (VADs). This causes address space leaks

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6250.htm</helpURL>
		</DefectDef>
		<DefectDef id="6255" name="UNPROTECTEDUSEOFALLOCA">
			<description>
				<format>
		    _alloca indicates failure by raising a stack overflow exception. Consider using _malloca instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6255.htm</helpURL>
		</DefectDef>
		<DefectDef id="6258" name="USINGTERMINATETHREAD">
			<description>
				<format>
		    Using TerminateThread does not allow proper thread clean up

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6258.htm</helpURL>
		</DefectDef>
		<DefectDef id="6259" name="DEADCODEINBITORLIMITEDSWITCH">
			<description>
				<format>
		    Labeled code is unreachable: '(&amp;lt;expression&amp;gt; &amp; 0x%I64x)' in a switch-expr cannot evaluate to '0x%I64x'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6259.htm</helpURL>
		</DefectDef>
		<DefectDef id="6260" name="USEOFBYTEAREA">
			<description>
				<format>
		    sizeof * sizeof is usually wrong. Did you intend to use a character count or a byte count?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6260.htm</helpURL>
		</DefectDef>
		<DefectDef id="6262" name="EXCESSIVESTACKUSAGE">
			<description>
				<format>
		    Function uses '%I64u' bytes of stack: exceeds /analyze:stacksize'%I64u'. Consider moving some data to heap

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6262.htm</helpURL>
		</DefectDef>
		<DefectDef id="6263" name="USINGALLOCAINLOOP">
			<description>
				<format>
		    Using _alloca in a loop: this can quickly overflow stack

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6263.htm</helpURL>
		</DefectDef>
		<DefectDef id="6267" name="STRING_LITERAL_TO_NONCONST_CAST">
			<description>
				<format>
		    Cast from string literal to non-const pointer. Attempts to write into static read-only memory can cause random crashes

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6267.htm</helpURL>
		</DefectDef>
		<DefectDef id="6268" name="MISPARENTHESIZED_CASTS">
			<description>
				<format>
		    Incorrect order of operations: (&amp;lt;TYPE1&amp;gt;)(&amp;lt;TYPE2&amp;gt;)x + y. Parentheses in (&amp;lt;TYPE1&amp;gt;)((&amp;lt;TYPE2&amp;gt;)x + y) might be missing

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6268.htm</helpURL>
		</DefectDef>
		<DefectDef id="6269" name="POINTER_DEREF_DISCARDED">
			<description>
				<format>
		    Possibly incorrect order of operations: dereference ignored

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6269.htm</helpURL>
		</DefectDef>
		<DefectDef id="6270" name="MISSING_FLOAT_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Missing float argument to '%ls': add a float argument corresponding to conversion specifier '%d'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6270.htm</helpURL>
		</DefectDef>
		<DefectDef id="6271" name="EXTRA_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Extra argument passed to '%ls': parameter '%d' is not used by the format string

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6271.htm</helpURL>
		</DefectDef>
		<DefectDef id="6272" name="NON_FLOAT_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Non-float passed as argument '%d' when float is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6272.htm</helpURL>
		</DefectDef>
		<DefectDef id="6273" name="NON_INTEGER_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Non-integer passed as parameter '%d' when integer is required in call to '%ls': if a pointer value is being passed, %%p should be used

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6273.htm</helpURL>
		</DefectDef>
		<DefectDef id="6274" name="NON_CHAR_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Non-character passed as parameter '%d' when character is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6274.htm</helpURL>
		</DefectDef>
		<DefectDef id="6276" name="CHAR_TO_WCHAR_CAST">
			<description>
				<format>
		    Cast between semantically different string types: char * to wchar_t *. Use of invalid string can lead to undefined behavior

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6276.htm</helpURL>
		</DefectDef>
		<DefectDef id="6277" name="CREATEPROCESS_ESCAPE">
			<description>
				<format>
		    NULL application name with an unquoted path in call to '%ls': results in a security vulnerability if the path contains spaces

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6277.htm</helpURL>
		</DefectDef>
		<DefectDef id="6278" name="ARRAY_NEW_DELETE_MISMATCH">
			<description>
				<format>
		    '%ls' is allocated with array new [], but deleted with scalar delete. Destructors will not be called

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6278.htm</helpURL>
		</DefectDef>
		<DefectDef id="6279" name="NEW_ARRAY_DELETE_MISMATCH">
			<description>
				<format>
		    '%ls' is allocated with scalar new, but deleted with array delete []

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6279.htm</helpURL>
		</DefectDef>
		<DefectDef id="6280" name="MEMORY_ALLOCATION_MISMATCH">
			<description>
				<format>
		    '%ls' is allocated with '%ls', but deleted with '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6280.htm</helpURL>
		</DefectDef>
		<DefectDef id="6281" name="BITWISERELATIONPRECEDENCEERROR">
			<description>
				<format>
		    Incorrect order of operations: relational operators have higher precedence than bitwise operators

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6281.htm</helpURL>
		</DefectDef>
		<DefectDef id="6282" name="ASSIGNMENTREPLACESTEST">
			<description>
				<format>
		    Incorrect operator: assignment of constant in Boolean context. Consider using '==' instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6282.htm</helpURL>
		</DefectDef>
		<DefectDef id="6283" name="PRIMITIVE_ARRAY_NEW_DELETE_MISMATCH">
			<description>
				<format>
		    '%ls' is allocated with array new [], but deleted with scalar delete

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6283.htm</helpURL>
		</DefectDef>
		<DefectDef id="6284" name="OBJECT_AS_STRING_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Object passed as parameter '%d' when string is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6284.htm</helpURL>
		</DefectDef>
		<DefectDef id="6285" name="LOGICALOROFCONSTANTS">
			<description>
				<format>
		    (&amp;lt;non-zero constant&amp;gt; || &amp;lt;non-zero constant&amp;gt;) is always a non-zero constant. Did you intend to use the bitwise-and operator?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6285.htm</helpURL>
		</DefectDef>
		<DefectDef id="6286" name="NONZEROLOGICALORLOSINGSIDEEFFECTS">
			<description>
				<format>
		    (&amp;lt;non-zero constant&amp;gt; || &amp;lt;expression&amp;gt;) is always a non-zero constant. &amp;lt;expression&amp;gt; is never evaluated and might have side effects

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6286.htm</helpURL>
		</DefectDef>
		<DefectDef id="6287" name="REDUNDANTTEST">
			<description>
				<format>
		    Redundant code: the left and right sub-expressions are identical

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6287.htm</helpURL>
		</DefectDef>
		<DefectDef id="6288" name="MUTUALINCLUSIONOVERANDISFALSE">
			<description>
				<format>
		    Incorrect operator: mutual inclusion over &amp;&amp; is always zero. Did you intend to use || instead?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6288.htm</helpURL>
		</DefectDef>
		<DefectDef id="6289" name="MUTUALEXCLUSIONOVERORISTRUE">
			<description>
				<format>
		    Incorrect operator: mutual exclusion over || is always a non-zero constant. Did you intend to use &amp;&amp; instead?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6289.htm</helpURL>
		</DefectDef>
		<DefectDef id="6290" name="LOGICALNOTBITWISEAND">
			<description>
				<format>
		    Bitwise operation on logical result: ! has higher precedence than &amp;. Use &amp;&amp; or (!(x &amp; y)) instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6290.htm</helpURL>
		</DefectDef>
		<DefectDef id="6291" name="LOGICALNOTBITWISEOR">
			<description>
				<format>
		    Bitwise operation on logical result: ! has higher precedence than |. Use || or (!(x | y)) instead

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6291.htm</helpURL>
		</DefectDef>
		<DefectDef id="6292" name="LOOP_COUNTS_UP_FROM_MAX">
			<description>
				<format>
		    Ill-defined for-loop: counts up from maximum

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6292.htm</helpURL>
		</DefectDef>
		<DefectDef id="6293" name="LOOP_INDEX_GOES_NEGATIVE">
			<description>
				<format>
		    Ill-defined for-loop: counts down from minimum

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6293.htm</helpURL>
		</DefectDef>
		<DefectDef id="6294" name="LOOP_BODY_NEVER_EXECUTED">
			<description>
				<format>
		    Ill-defined for-loop: initial condition does not satisfy test. Loop body not executed

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6294.htm</helpURL>
		</DefectDef>
		<DefectDef id="6295" name="INFINITE_LOOP">
			<description>
				<format>
		    Ill-defined for-loop: '%ls' values are always of range '%ls' to '%ls'. Loop executes infinitely

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6295.htm</helpURL>
		</DefectDef>
		<DefectDef id="6296" name="LOOP_ONLY_EXECUTED_ONCE">
			<description>
				<format>
		    Ill-defined for-loop. Loop body only executed once

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6296.htm</helpURL>
		</DefectDef>
		<DefectDef id="6297" name="RESULTOFSHIFTCASTTOLARGERSIZE">
			<description>
				<format>
		    Arithmetic overflow: 32-bit value is shifted, then cast to 64-bit value. Results might not be an expected value

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6297.htm</helpURL>
		</DefectDef>
		<DefectDef id="6298" name="CONST_STRING_TO_WRITABLE_STRING">
			<description>
				<format>
		    Argument '%d': using a read-only string as a writable string argument. This will attempt to write into static read-only memory and cause random crashes

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6298.htm</helpURL>
		</DefectDef>
		<DefectDef id="6299" name="BITFIELD_TO_BOOL_COMPARISON">
			<description>
				<format>
		    Explicitly comparing a bit field to a Boolean type will yield unexpected results

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6299.htm</helpURL>
		</DefectDef>
		<DefectDef id="6302" name="CHAR_WCHAR_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Format string mismatch: character string passed as parameter '%d' when wide character string is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6302.htm</helpURL>
		</DefectDef>
		<DefectDef id="6303" name="WCHAR_CHAR_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
		    Format string mismatch: wide character string passed as parameter '%d' when character string is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6303.htm</helpURL>
		</DefectDef>
		<DefectDef id="6305" name="SIZEOF_COUNTOF_MISMATCH">
			<description>
				<format>
		    Potential mismatch between sizeof and countof quantities

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6305.htm</helpURL>
		</DefectDef>
		<DefectDef id="6306" name="INCORRECT_VARARG_FUNCTIONCALL">
			<description>
				<format>
		    Incorrect call to '%ls': consider using '%ls' which accepts a va_list as an argument

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6306.htm</helpURL>
		</DefectDef>
		<DefectDef id="6307" name="WCHAR_TO_BSTR">
			<description>
				<format>
		    Cast between semantically different string types: wchar * to BSTR. This might cause unexpected behavior

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6307.htm</helpURL>
		</DefectDef>
		<DefectDef id="6308" name="REALLOCLEAK">
			<description>
				<format>
		    'realloc' might return null pointer: assigning null pointer to '%ls', which is passed as an argument to 'realloc', will cause the original memory block to be leaked

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6308.htm</helpURL>
		</DefectDef>
		<DefectDef id="6309" name="PASSING_FUNCTION_UNEXPECTED_NULL">
			<description>
				<format>
		    Argument '%d' is null: this does not adhere to function specification of '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6309.htm</helpURL>
		</DefectDef>
		<DefectDef id="6310" name="ILLEGALEXCEPTEXPRCONST">
			<description>
				<format>
		    Illegal constant in exception filter can cause unexpected behavior

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6310.htm</helpURL>
		</DefectDef>
		<DefectDef id="6312" name="EXCEPTIONCONTINUEEXECUTION">
			<description>
				<format>
		    Possible infinite loop: use of the constant EXCEPTION_CONTINUE_EXECUTION in the exception-filter expression of a try-except. Execution restarts in the protected block

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6312.htm</helpURL>
		</DefectDef>
		<DefectDef id="6313" name="BITANDVSZEROVALUEDFLAG">
			<description>
				<format>
		    Incorrect operator: zero-valued flag cannot be tested with bitwise-and. Use an equality test to check for zero-valued flags

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6313.htm</helpURL>
		</DefectDef>
		<DefectDef id="6314" name="BITORVSQUESTION">
			<description>
				<format>
		    Incorrect order of operations: bitwise-or has higher precedence than the conditional-expression operator. Add parentheses to clarify intent

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6314.htm</helpURL>
		</DefectDef>
		<DefectDef id="6315" name="BITORVSBITAND">
			<description>
				<format>
		    Incorrect order of operations: bitwise-and has higher precedence than bitwise-or. Add parentheses to clarify intent

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6315.htm</helpURL>
		</DefectDef>
		<DefectDef id="6316" name="INAPPROPRIATEUSEOFBITOR">
			<description>
				<format>
		    Incorrect operator: tested expression is constant and non-zero. Use bitwise-and to determine whether bits are set

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6316.htm</helpURL>
		</DefectDef>
		<DefectDef id="6317" name="NOTNOTCOMPLEMENT">
			<description>
				<format>
		    Incorrect operator: logical-not (!) is not interchangeable with ones-complement (~)

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6317.htm</helpURL>
		</DefectDef>
		<DefectDef id="6318" name="EXCEPTIONCONTINUESEARCH">
			<description>
				<format>
		    Ill-defined __try/__except: use of the constant EXCEPTION_CONTINUE_SEARCH or another constant that evaluates to zero in the exception-filter expression. The code in the exception handler block is not executed

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6318.htm</helpURL>
		</DefectDef>
		<DefectDef id="6319" name="IGNOREDBYCOMMA">
			<description>
				<format>
		    Use of the comma-operator in a tested expression causes the left argument to be ignored when it has no side-effects

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6319.htm</helpURL>
		</DefectDef>
		<DefectDef id="6320" name="EXCEPTIONEXECUTEHANDLER">
			<description>
				<format>
		    Exception-filter expression is the constant EXCEPTION_EXECUTE_HANDLER. This might mask exceptions that were not intended to be handled

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6320.htm</helpURL>
		</DefectDef>
		<DefectDef id="6322" name="EXCEPT_BLOCK_EMPTY">
			<description>
				<format>
		    Empty _except block

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6322.htm</helpURL>
		</DefectDef>
		<DefectDef id="6323" name="ARITH_OP_ON_BOOL">
			<description>
				<format>
		    Use of arithmetic operator on Boolean type(s)

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6323.htm</helpURL>
		</DefectDef>
		<DefectDef id="6324" name="STRCPY_INSTEAD_OF_STRCMP">
			<description>
				<format>
		    Potential incorrect use of '%ls': did you intend to use '%ls' ?

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6324.htm</helpURL>
		</DefectDef>
		<DefectDef id="6326" name="CONST_CONST_COMP">
			<description>
				<format>
		    Potential comparison of a constant with another constant

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6326.htm</helpURL>
		</DefectDef>
		<DefectDef id="6327" name="DEST_BUFFER_INSUFFICIENT">
			<description>
				<format>
		    Potential buffer-overrun: SysAllocStringLen copies '%d' characters from the string '%ls' without validating the number of characters to copy. The code might crash

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6327.htm</helpURL>
		</DefectDef>
		<DefectDef id="6328" name="POTENTIAL_ARGUMENT_TYPE_MISMATCH">
			<description>
				<format>
		    '%ls' passed as parameter '%d' when '%ls' is required in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6328.htm</helpURL>
		</DefectDef>
		<DefectDef id="6329" name="POTENTIAL_INCORRECT_RETVAL_CHECK">
			<description>
				<format>
		    Return value for a call to '%ls' should not be checked against '%d'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6329.htm</helpURL>
		</DefectDef>
		<DefectDef id="6331" name="VIRTUALFREEINVALIDPARAM1">
			<description>
				<format>
		    Invalid parameter: passing MEM_RELEASE and MEM_DECOMMIT in conjunction to '%ls' is not allowed. This causes the call to fail

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6331.htm</helpURL>
		</DefectDef>
		<DefectDef id="6332" name="VIRTUALFREEINVALIDPARAM2">
			<description>
				<format>
		    Invalid parameter: passing zero as the dwFreeType parameter to '%ls' is not allowed. This causes the call to fail

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6332.htm</helpURL>
		</DefectDef>
		<DefectDef id="6333" name="VIRTUALFREEINVALIDPARAM3">
			<description>
				<format>
		    Invalid parameter: passing MEM_RELEASE and a non-zero dwSize parameter to '%ls' is not allowed. This causes the call to fail

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6333.htm</helpURL>
		</DefectDef>
		<DefectDef id="6334" name="SIZEOFEXPR">
			<description>
				<format>
		    sizeof operator applied to an expression with an operator might yield unexpected results

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6334.htm</helpURL>
		</DefectDef>
		<DefectDef id="6335" name="LEAKING_PROCESS_HANDLE">
			<description>
				<format>
		    Leaking process information handle '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6335.htm</helpURL>
		</DefectDef>
		<DefectDef id="6336" name="QUESTIONPRECEDENCE">
			<description>
				<format>
		    Arithmetic operator has precedence over question operator, use parentheses to clarify intent

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6336.htm</helpURL>
		</DefectDef>
		<DefectDef id="6381" name="SHUTDOWN_API">
			<description>
				<format>
		    Shutdown API '%ls' requires a valid dwReason or lpMessage

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6381.htm</helpURL>
		</DefectDef>
		<DefectDef id="6383" name="ELEMENTS_TO_BYTES">
			<description>
				<format>
		    Buffer overrun due to conversion of an element count into a byte count: an element count is expected for parameter '%d' in call to '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6383.htm</helpURL>
		</DefectDef>
		<DefectDef id="6384" name="DIVIDING_SIZEOF_POINTER">
			<description>
				<format>
		    Dividing sizeof a pointer by another value

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6384.htm</helpURL>
		</DefectDef>
		<DefectDef id="6385" name="READ_OVERRUN">
			<description>
				<format>
		    Invalid data: accessing '%ls', the readable size is '%ls' bytes, but '%ls' bytes might be read

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6385.htm</helpURL>
		</DefectDef>
		<DefectDef id="6386" name="WRITE_OVERRUN">
			<description>
				<format>
		    Buffer overrun: accessing '%ls', the writable size is '%ls' bytes, but '%ls' bytes might be written

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6386.htm</helpURL>
		</DefectDef>
		<DefectDef id="6387" name="INVALID_PARAM_VALUE_1">
			<description>
				<format>
		    '%ls' might be '%ls': this does not adhere to the specification for the function '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6387.htm</helpURL>
		</DefectDef>
		<DefectDef id="6388" name="INVALID_PARAM_VALUE_2">
			<description>
				<format>
		    '%ls' might not be '%ls': this does not adhere to the specification for the function '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6388.htm</helpURL>
		</DefectDef>
		<DefectDef id="6392" name="BOOL_VARIANT_BOOL_COMPARISON">
			<description>
				<format>
		    Incorrect comparison between bool and VARIANT_BOOL typed expressions

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6392.htm</helpURL>
		</DefectDef>
		<DefectDef id="6393" name="COMPARE64BIT">
			<description>
				<format>
		    Incorrect comparison between a 64-bit variable and the 32-bit constant '0xFFFFFFFF'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6393.htm</helpURL>
		</DefectDef>
		<DefectDef id="6394" name="MS03_026_LHS">
			<description>
				<format>
		    Potential buffer overrun while writing to buffer '%ls': the buffer pointer is being incremented inside a loop

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6394.htm</helpURL>
		</DefectDef>
		<DefectDef id="6400" name="LOCALE_DEPENDENT_CONSTANT_STRING_COMPARISON">
			<description>
				<format>
		    Using '%ls' to perform a case-insensitive compare to constant string '%ls'. Yields unexpected results in non-English locales

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6400.htm</helpURL>
		</DefectDef>
		<DefectDef id="6401" name="DEFAULT_LOCALE_CONSTANT_STRING_COMPARISON">
			<description>
				<format>
		    Using '%ls' in a default locale to perform a case-insensitive compare to constant string '%ls'. Yields unexpected results in non-English locales

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6401.htm</helpURL>
		</DefectDef>
		<DefectDef id="6500" name="INVALID_ATTRIBUTE_PROPERTY">
			<description>
				<format>
		    Invalid annotation: value for '%ls' property is invalid

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6500.htm</helpURL>
		</DefectDef>
		<DefectDef id="6501" name="CONFLICTING_ATTRIBUTE_PROPERTY_VALUES">
			<description>
				<format>
		    Annotation conflict: '%ls' property conflicts with previously specified property

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6501.htm</helpURL>
		</DefectDef>
		<DefectDef id="6503" name="REFERENCES_CANT_BE_NULL">
			<description>
				<format>
		    Invalid annotation: references and arrays may not be marked Null=Yes or Null=Maybe

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6503.htm</helpURL>
		</DefectDef>
		<DefectDef id="6504" name="NULL_ON_NON_POINTER">
			<description>
				<format>
		    Invalid annotation: 'Null' property may only be used on values of pointer, pointer-to-member, array, or reference type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6504.htm</helpURL>
		</DefectDef>
		<DefectDef id="6505" name="MUSTCHECK_ON_VOID">
			<description>
				<format>
		    Invalid annotation: 'MustCheck' property may not be used on values of void type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6505.htm</helpURL>
		</DefectDef>
		<DefectDef id="6506" name="BUFFER_SIZE_ON_NON_POINTER_OR_ARRAY">
			<description>
				<format>
		    Invalid annotation: '%ls' property may only be used on values of pointer, array, or reference type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6506.htm</helpURL>
		</DefectDef>
		<DefectDef id="6507" name="NULL_MISMATCH_AT_DEREF_0">
			<description>
				<format>
		    Annotation conflict: 'Null' property at Deref=0 on a post condition must be a subset of the Null property on the precondition

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6507.htm</helpURL>
		</DefectDef>
		<DefectDef id="6508" name="WRITE_ACCESS_ON_CONST">
			<description>
				<format>
		    Invalid annotation: write access is not allowed on const values

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6508.htm</helpURL>
		</DefectDef>
		<DefectDef id="6509" name="RETURN_USED_ON_PRECONDITION">
			<description>
				<format>
		    Invalid annotation: 'return' cannot be referenced from a precondition

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6509.htm</helpURL>
		</DefectDef>
		<DefectDef id="6510" name="NULLTERMINATED_ON_NON_POINTER">
			<description>
				<format>
		    Invalid annotation: 'NullTerminated' property may only be used on buffers whose elements are of integral or pointer type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6510.htm</helpURL>
		</DefectDef>
		<DefectDef id="6511" name="MUSTCHECK_MAYBE">
			<description>
				<format>
		    Invalid annotation: 'MustCheck' property must be Yes or No

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6511.htm</helpURL>
		</DefectDef>
		<DefectDef id="6512" name="NULL_CONFLICTS_WITH_NOT_VALID">
			<description>
				<format>
		    Invalid annotation: 'Null' property must be Maybe if the 'Valid' property is No

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6512.htm</helpURL>
		</DefectDef>
		<DefectDef id="6513" name="ELEMENT_SIZE_WITHOUT_BUFFER_SIZE">
			<description>
				<format>
		    Invalid annotation: 'ElementSize' requires additional size properties

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6513.htm</helpURL>
		</DefectDef>
		<DefectDef id="6514" name="BUFFER_SIZE_EXCEEDS_ARRAY_SIZE">
			<description>
				<format>
		    Invalid annotation: value of the '%ls' property exceeds the size of the array

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6514.htm</helpURL>
		</DefectDef>
		<DefectDef id="6515" name="BUFFER_SIZE_ON_NON_POINTER">
			<description>
				<format>
		    Invalid annotation: '%ls' property may only be used on values of pointer type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6515.htm</helpURL>
		</DefectDef>
		<DefectDef id="6516" name="NO_PROPERTIES_ON_ATTRIBUTE">
			<description>
				<format>
		    Invalid annotation: no properties specified for %s attribute

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6516.htm</helpURL>
		</DefectDef>
		<DefectDef id="6517" name="VALID_SIZE_ON_NON_READABLE_BUFFER">
			<description>
				<format>
		    Invalid annotation: '%ls' property may not be specified on buffers that are not readable

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6517.htm</helpURL>
		</DefectDef>
		<DefectDef id="6518" name="WRITABLE_SIZE_ON_NON_WRITABLE_BUFFER">
			<description>
				<format>
		    Invalid annotation: '%ls' property may not be specified as a precondition on buffers that are not writable

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6518.htm</helpURL>
		</DefectDef>
		<DefectDef id="6519" name="NEEDSRELEASE_MAYBE">
			<description>
				<format>
		    Invalid annotation: value of the 'NeedsRelease' property must be Yes or No

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6519.htm</helpURL>
		</DefectDef>
		<DefectDef id="6521" name="INVALID_SIZE_STRING_DEREF">
			<description>
				<format>
		    Invalid size specification: * operator can only be applied to pointer types

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6521.htm</helpURL>
		</DefectDef>
		<DefectDef id="6522" name="INVALID_SIZE_STRING_TYPE">
			<description>
				<format>
		    Invalid size specification: expression must be of integral type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6522.htm</helpURL>
		</DefectDef>
		<DefectDef id="6523" name="INVALID_SIZE_STRING_PARAM">
			<description>
				<format>
		    Invalid size specification: parameter '%ls' not found

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6523.htm</helpURL>
		</DefectDef>
		<DefectDef id="6525" name="INVALID_SIZE_STRING_UNREACHABLE_LOCATION">
			<description>
				<format>
		    Invalid size specification: property value might not be valid

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6525.htm</helpURL>
		</DefectDef>
		<DefectDef id="6526" name="INVALID_SIZE_STRING_BUFFER_TYPE">
			<description>
				<format>
		    Invalid size specification: expression must be of pointer or array type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6526.htm</helpURL>
		</DefectDef>
		<DefectDef id="6527" name="NEEDSRELEASE_ON_VOID">
			<description>
				<format>
		    Invalid annotation: 'NeedsRelease' property may not be used on values of void type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6527.htm</helpURL>
		</DefectDef>
		<DefectDef id="6530" name="UNRECOGNIZED_FORMAT_STRING_STYLE">
			<description>
				<format>
		    Unrecognized format string style '%ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6530.htm</helpURL>
		</DefectDef>
		<DefectDef id="6535" name="BUFFERSIZE_INFEASIBLE">
			<description>
				<format>
		    Buffer size cannot be of type '%ls', bigger than size_t

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6535.htm</helpURL>
		</DefectDef>
		<DefectDef id="6540" name="OVERRIDING_OLD_MODEL">
			<description>
				<format>
		    The use of attribute annotations on this function will invalidate all of its existing __declspec annotations

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6540.htm</helpURL>
		</DefectDef>
		<DefectDef id="6990" name="MANAGEDCODENOTSUPPORTED">
			<description>
				<format>
		    Managed code not supported: file was not fully analyzed

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6990.htm</helpURL>
		</DefectDef>
		<DefectDef id="6991" name="ATTRIBUTESNOTSUPPORTED">
			<description>
				<format>
		    Attributes not supported: file was not fully analyzed

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6991.htm</helpURL>
		</DefectDef>
		<DefectDef id="6992" name="NATIVEEVENTSYNTAXNOTSUPPORTED">
			<description>
				<format>
		    Native event syntax not supported: file was not fully analyzed

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6992.htm</helpURL>
		</DefectDef>
		<DefectDef id="6993" name="OMPNOTSUPPORTED">
			<description>
				<format>
		    Code analysis ignores OpenMP constructs; analyzing single-threaded code

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6993.htm</helpURL>
		</DefectDef>
		<DefectDef id="6994" name="PCHNOTFOUND">
			<description>
				<format>
		    Precompiled header not found: file was not analyzed

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6994.htm</helpURL>
		</DefectDef>
		<DefectDef id="6995" name="_SaveToXmlFailed">
			<description>
				<format>
		    Failed to save XML Log file

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6995.htm</helpURL>
		</DefectDef>
		<DefectDef id="28200" name="INTERNAL_DEBUG">
			<description>
				<format>
		    Function %ls -- DEBUG: %ls '%ls' '%ls'

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28200.htm</helpURL>
		</DefectDef>
		<DefectDef id="28201" name="XML_ANNOTATION">
			<description>
				<format>
		    Annotation in model file %ls applies to %ls at %ls: %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28201.htm</helpURL>
		</DefectDef>
		<DefectDef id="28209" name="INVALID_ANNOTATION_SYMBOL">
			<description>
				<format>
		    The declaration for symbol %s has a conflicting declaration at %s.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28209.htm</helpURL>
		</DefectDef>
		<DefectDef id="28210" name="POST_EXPECTED">
			<description>
				<format>
		    Annotations for the __on_failure context must not be in explicit pre context: Annotation '%ls' on function '%ls', '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28210.htm</helpURL>
		</DefectDef>
		<DefectDef id="28211" name="CONTEXT_EXPECTED">
			<description>
				<format>
		    Static context name expected for SAL_context, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28211.htm</helpURL>
		</DefectDef>
		<DefectDef id="28212" name="POINTER_EXPECTED">
			<description>
				<format>
		    Pointer expression expected for annotation '%ls', parameter %d, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28212.htm</helpURL>
		</DefectDef>
		<DefectDef id="28213" name="BAD_USEHEADER">
			<description>
				<format>
		    The __useHeader annotation must be used to reference, without modification, a prior declaration. %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28213.htm</helpURL>
		</DefectDef>
		<DefectDef id="28214" name="BAD_PARAM_NAME">
			<description>
				<format>
		    Attribute parameter names must be p1...p9

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28214.htm</helpURL>
		</DefectDef>
		<DefectDef id="28215" name="DUPLICATE_TYPEFIX">
			<description>
				<format>
		    The typefix '%ls' cannot be applied to a parameter that already has a typefix.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28215.htm</helpURL>
		</DefectDef>
		<DefectDef id="28216" name="MUSTCHECK_NOT_POST">
			<description>
				<format>
		    The checkReturn annotation only applies to postconditions for function '%ls' %ls.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28216.htm</helpURL>
		</DefectDef>
		<DefectDef id="28217" name="UNMATCHED_ANNO_COUNT">
			<description>
				<format>
		    For function '%ls' %ls, the number of parameters to annotation '%ls' does not match that found at %ls(%d).

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28217.htm</helpURL>
		</DefectDef>
		<DefectDef id="28218" name="UNMATCHED_ANNO_TREE">
			<description>
				<format>
		    For function '%ls' %ls, for annotation '%ls' the annotation's parameter %d does not match that found at %ls(%d).

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28218.htm</helpURL>
		</DefectDef>
		<DefectDef id="28219" name="ENUM_EXPECTED">
			<description>
				<format>
		    Member of '%ls' expected for annotation '%ls', parameter %d, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28219.htm</helpURL>
		</DefectDef>
		<DefectDef id="28220" name="INTEGER_EXPECTED">
			<description>
				<format>
		    Integer expression expected for annotation '%ls', parameter %d, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28220.htm</helpURL>
		</DefectDef>
		<DefectDef id="28221" name="STRING_EXPECTED">
			<description>
				<format>
		    String expression expected for annotation '%ls', parameter %d, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28221.htm</helpURL>
		</DefectDef>
		<DefectDef id="28222" name="YNM_EXPECTED">
			<description>
				<format>
		    __yes, __no, or __maybe expected for annotation '%ls', parameter %d, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28222.htm</helpURL>
		</DefectDef>
		<DefectDef id="28223" name="AUTOQUOTE_EXPECTED">
			<description>
				<format>
		    Token/identifier expected for annotation '%ls', parameter %d, found '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28223.htm</helpURL>
		</DefectDef>
		<DefectDef id="28224" name="PARAMS_EXPECTED">
			<description>
				<format>
		    Annotation '%ls' requires parameters.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28224.htm</helpURL>
		</DefectDef>
		<DefectDef id="28225" name="BAD_NO_PARAMS">
			<description>
				<format>
		    Annotation '%ls' requires %d parameters, found %d.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28225.htm</helpURL>
		</DefectDef>
		<DefectDef id="28226" name="NOT_BOTH">
			<description>
				<format>
		    Annotation '%ls' cannot also be a PrimOp (in current declaration)

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28226.htm</helpURL>
		</DefectDef>
		<DefectDef id="28227" name="NOT_BOTH_2">
			<description>
				<format>
		    Annotation '%ls' cannot also be a PrimOp (see prior declaration)

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28227.htm</helpURL>
		</DefectDef>
		<DefectDef id="28228" name="UNRECOGNIZED_TYPE">
			<description>
				<format>
		    Annotation '%ls' parameter %d: cannot use type '%ls' in annotations

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28228.htm</helpURL>
		</DefectDef>
		<DefectDef id="28229" name="NO_PARAMS_EXPECTED">
			<description>
				<format>
		    Annotation '%ls' does not support parameters.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28229.htm</helpURL>
		</DefectDef>
		<DefectDef id="28230" name="NO_SUCH_MEMBER">
			<description>
				<format>
		    '%ls' has no member '%ls'

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28230.htm</helpURL>
		</DefectDef>
		<DefectDef id="28231" name="ILLEGAL_INDEX">
			<description>
				<format>
		    '%ls' is not an array

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28231.htm</helpURL>
		</DefectDef>
		<DefectDef id="28232" name="DANGLING_QUALIFIER">
			<description>
				<format>
		    pre, post, or deref not applied to any annotation

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28232.htm</helpURL>
		</DefectDef>
		<DefectDef id="28233" name="BLOCK_QUALIFIER">
			<description>
				<format>
		    pre, post, or deref applied to a block

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28233.htm</helpURL>
		</DefectDef>
		<DefectDef id="28234" name="AT_NOT_ROOT">
			<description>
				<format>
		    __at expression does not apply to current function.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28234.htm</helpURL>
		</DefectDef>
		<DefectDef id="28235" name="PRIMOP_AS_ANNOTATION">
			<description>
				<format>
		    The function '%ls' cannot stand alone as an annotation.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28235.htm</helpURL>
		</DefectDef>
		<DefectDef id="28236" name="ANNOTATION_AS_PRIMOP">
			<description>
				<format>
		    The annotation '%ls' cannot be used in an expression.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28236.htm</helpURL>
		</DefectDef>
		<DefectDef id="28237" name="OBSOLETE">
			<description>
				<format>
		    '%ls': the annotation '%ls' on %ls is no longer supported.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28237.htm</helpURL>
		</DefectDef>
		<DefectDef id="28238" name="TOOMANY_OLD">
			<description>
				<format>
		    '%ls': the annotation '%ls' on %ls has more than one of value, stringValue, and longValue.  Use paramn=xxx.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28238.htm</helpURL>
		</DefectDef>
		<DefectDef id="28239" name="MIXED_OLD_NEW">
			<description>
				<format>
		    '%ls': the annotation '%ls' on %ls has both value, stringValue, or longValue; and paramn=xxx.  Use only paramn=xxx.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28239.htm</helpURL>
		</DefectDef>
		<DefectDef id="28240" name="NO_PARAM1">
			<description>
				<format>
		    '%ls': the annotation '%ls' on %ls has param2 but no param1.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28240.htm</helpURL>
		</DefectDef>
		<DefectDef id="28241" name="EXTERNAL_UNKNOWN_ANNO">
			<description>
				<format>
		    The annotation '%ls' for '%ls' on '%ls' is not recognized.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28241.htm</helpURL>
		</DefectDef>
		<DefectDef id="28242" name="BAD_MULTIPLIER">
			<description>
				<format>
		    The IsMinSize annotation for function '%ls' on %ls has a multiplier inconsistent with the element size.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28242.htm</helpURL>
		</DefectDef>
		<DefectDef id="28243" name="BAD_DEREF">
			<description>
				<format>
		    The annotation for function '%ls' on %ls requires more dereferences than the actual type annotated allows.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28243.htm</helpURL>
		</DefectDef>
		<DefectDef id="28244" name="BAD_EXTERNAL">
			<description>
				<format>
		    The annotation for function '%ls' %ls has an unparseable parameter/external annotation.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28244.htm</helpURL>
		</DefectDef>
		<DefectDef id="28245" name="THIS_NONMEMBER">
			<description>
				<format>
		    The annotation for function '%ls' annotates 'this' on a non-member-function.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28245.htm</helpURL>
		</DefectDef>
		<DefectDef id="28246" name="ANNOTATION_TYPE_MISMATCH">
			<description>
				<format>
		    The annotation for function '%ls', parameter '%ls' does not match the type of the parameter.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28246.htm</helpURL>
		</DefectDef>
		<DefectDef id="28247" name="XML_DUPLICATE">
			<description>
				<format>
		    Model file annotation for function '%ls': annotation on %ls/%ls, '%ls' duplicates header file annotation '%ls'.  Remove the duplicated annotations from the model file. (Header: %ls(%d)) 

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28247.htm</helpURL>
		</DefectDef>
		<DefectDef id="28248" name="XML_MODEL_FILE_DUPLICATE">
			<description>
				<format>
		    Model file annotation for function '%ls' duplicates existing model file definition. Remove the duplicated annotations from the model file.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28248.htm</helpURL>
		</DefectDef>
		<DefectDef id="28250" name="UNMATCHED_DECL">
			<description>
				<format>
		    Inconsistent annotation for '%ls': the prior instance has %ls. See %ls.%ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28250.htm</helpURL>
		</DefectDef>
		<DefectDef id="28251" name="UNMATCHED_DEFN">
			<description>
				<format>
		    Inconsistent annotation for '%ls': this instance has %ls. See %ls.%ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28251.htm</helpURL>
		</DefectDef>
		<DefectDef id="28252" name="UNMATCHED_DECL_ANNO">
			<description>
				<format>
		    Inconsistent annotation for '%ls': %ls has '%ls' on the prior instance. See %ls.%ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28252.htm</helpURL>
		</DefectDef>
		<DefectDef id="28253" name="UNMATCHED_DEFN_ANNO">
			<description>
				<format>
		    Inconsistent annotation for '%ls': %ls has '%ls' on this instance. See %ls.%ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28253.htm</helpURL>
		</DefectDef>
		<DefectDef id="28254" name="DYNAMIC_CAST">
			<description>
				<format>
		    dynamic_cast&amp;lt;&amp;gt;() is not supported in annotations

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28254.htm</helpURL>
		</DefectDef>
		<DefectDef id="28279" name="UNMATCHED_BEGIN">
			<description>
				<format>
		    For symbol '%ls', a 'begin' was found without a matching 'end'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28279.htm</helpURL>
		</DefectDef>
		<DefectDef id="28280" name="UNMATCHED_END">
			<description>
				<format>
		    For symbol '%ls', an 'end' was found without a matching 'begin'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28280.htm</helpURL>
		</DefectDef>
		<DefectDef id="28281" name="BAD_INVALID">
			<description>
				<format>
		    For symbol '%ls' parameter '%ls', 'Invalid Check' value not a number or not in post context.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28281.htm</helpURL>
		</DefectDef>
		<DefectDef id="28282" name="FORMAT_NOT_PRE">
			<description>
				<format>
		    Format Strings must be in preconditions: Function '%ls' %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28282.htm</helpURL>
		</DefectDef>
		<DefectDef id="28283" name="UNSUPPORTED_SIZESPEC">
			<description>
				<format>
		    For symbol '%ls', the specified size specification is not yet supported.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28283.htm</helpURL>
		</DefectDef>
		<DefectDef id="28284" name="SPEC_INVALID_PREDICATE">
			<description>
				<format>
		    For symbol '%ls', Predicates are currently not supported for non-function symbols.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28284.htm</helpURL>
		</DefectDef>
		<DefectDef id="28285" name="SPEC_INVALID_SYNTAX2">
			<description>
				<format>
		    For function '%ls', error in '%ls' near '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28285.htm</helpURL>
		</DefectDef>
		<DefectDef id="28286" name="SPEC_INVALID_SYNTAX">
			<description>
				<format>
		    For function '%ls', error near the end of '%ls'.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28286.htm</helpURL>
		</DefectDef>
		<DefectDef id="28287" name="INVALID_AT2">
			<description>
				<format>
		    For function '%ls', syntax Error in at() annotation (unrecognized parameter name).

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28287.htm</helpURL>
		</DefectDef>
		<DefectDef id="28288" name="INVALID_AT">
			<description>
				<format>
		    For function '%ls', syntax Error in at() annotation (invalid parameter name).

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28288.htm</helpURL>
		</DefectDef>
		<DefectDef id="28289" name="LIMITSPEC_EXPECTED">
			<description>
				<format>
		    For function '%ls' %ls: ReadableTo or WritableTo did not have a limit-spec as a parameter.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28289.htm</helpURL>
		</DefectDef>
		<DefectDef id="28290" name="SPEC_TOO_MANY">
			<description>
				<format>
		    the annotation for function '%ls' contains more Externals than the actual number of parameters.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28290.htm</helpURL>
		</DefectDef>
		<DefectDef id="28291" name="LOD_0_NULL">
			<description>
				<format>
		    post null/notnull at deref level 0 is meaningless for function '%ls' %ls.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28291.htm</helpURL>
		</DefectDef>
		<DefectDef id="28292" name="MIN_SIZE_MULTIPLE">
			<description>
				<format>
		    the annotations for function '%ls' '%ls' have more than one MinSize annotation.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28292.htm</helpURL>
		</DefectDef>
		<DefectDef id="28293" name="MIN_SIZE_UNKNOWN">
			<description>
				<format>
		    the annotations for function '%ls' '%ls' have an unknown MinSize type.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28293.htm</helpURL>
		</DefectDef>
		<DefectDef id="28294" name="EXTERNAL_UNKNOWN_PARAM">
			<description>
				<format>
		    the annotations for function '%ls' at slot %d have a bad parameter index.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28294.htm</helpURL>
		</DefectDef>
		<DefectDef id="28295" name="EXTERNAL_UNKNOWN_TYPE">
			<description>
				<format>
		    the annotations for function '%ls' at slot %ls have unknown type.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28295.htm</helpURL>
		</DefectDef>
		<DefectDef id="28296" name="MODEL_PARSE_CRASH">
			<description>
				<format>
		    unexpected error while parsing XML model for function '%ls'. %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28296.htm</helpURL>
		</DefectDef>
		<DefectDef id="28297" name="MODEL_PARSE_1">
			<description>
				<format>
		    Model validation error (file position = %d): %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28297.htm</helpURL>
		</DefectDef>
		<DefectDef id="28299" name="MODEL_TOO_MANY">
			<description>
				<format>
		    the XML model file for function '%ls' contains more Externals than the actual number of parameters.  This often occurs if the function has no prototype in the C source.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28299.htm</helpURL>
		</DefectDef>
		<DefectDef id="36500" name="X_INVALID_ATTRIBUTE_PROPERTY">
			<description>
				<format>
		    Invalid annotation: value for '%ls' property is invalid

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36500.htm</helpURL>
		</DefectDef>
		<DefectDef id="36501" name="X_CONFLICTING_ATTRIBUTE_PROPERTY_VALUES">
			<description>
				<format>
		    Annotation conflict: '%ls' property conflicts with previously specified property

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36501.htm</helpURL>
		</DefectDef>
		<DefectDef id="36503" name="X_REFERENCES_CANT_BE_NULL">
			<description>
				<format>
		    Invalid annotation: references and arrays may not be marked Null=Yes or Null=Maybe: Function '%ls' %ls'.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36503.htm</helpURL>
		</DefectDef>
		<DefectDef id="36504" name="X_NULL_ON_NON_POINTER">
			<description>
				<format>
		    Invalid annotation: 'Null' property may only be used on values of pointer, pointer-to-member, array, or reference type: Function '%ls' %ls.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36504.htm</helpURL>
		</DefectDef>
		<DefectDef id="36505" name="X_MUSTCHECK_ON_VOID">
			<description>
				<format>
		    Invalid annotation: 'MustCheck' property may not be used on values of void type: Function '%ls' %ls'

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36505.htm</helpURL>
		</DefectDef>
		<DefectDef id="36506" name="X_BUFFER_SIZE_ON_NON_POINTER_OR_ARRAY">
			<description>
				<format>
		    Invalid annotation: '%ls' property (with element count) may only be used on values of pointer, array, or reference type: Function '%ls' %ls.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36506.htm</helpURL>
		</DefectDef>
		<DefectDef id="36507" name="X_NULL_MISMATCH_AT_DEREF_0">
			<description>
				<format>
		    Annotation conflict: 'Null' property at Deref=0 on a post condition must be a subset of the Null property on the precondition

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36507.htm</helpURL>
		</DefectDef>
		<DefectDef id="36508" name="X_WRITE_ACCESS_ON_CONST">
			<description>
				<format>
		    Invalid annotation: write access is not allowed on const values

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36508.htm</helpURL>
		</DefectDef>
		<DefectDef id="36509" name="X_RETURN_USED_ON_PRECONDITION">
			<description>
				<format>
		    Invalid annotation: 'return' cannot be referenced in some contexts: Function %ls %ls annotation '%ls': %ls

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36509.htm</helpURL>
		</DefectDef>
		<DefectDef id="36510" name="X_NULLTERMINATED_ON_NON_POINTER">
			<description>
				<format>
		    Invalid annotation: 'NullTerminated' property may only be used on buffers whose elements are of integral or pointer type: Function '%ls' %ls.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36510.htm</helpURL>
		</DefectDef>
		<DefectDef id="36511" name="X_MUSTCHECK_MAYBE">
			<description>
				<format>
		    Invalid annotation: 'MustCheck' property must be Yes or No

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36511.htm</helpURL>
		</DefectDef>
		<DefectDef id="36512" name="X_NULL_CONFLICTS_WITH_NOT_VALID">
			<description>
				<format>
		    Invalid annotation: 'Null' property must be Maybe if the 'Valid' property is No

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36512.htm</helpURL>
		</DefectDef>
		<DefectDef id="36513" name="X_ELEMENT_SIZE_WITHOUT_BUFFER_SIZE">
			<description>
				<format>
		    Invalid annotation: 'ElementSize' requires additional size properties

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36513.htm</helpURL>
		</DefectDef>
		<DefectDef id="36514" name="X_BUFFER_SIZE_EXCEEDS_ARRAY_SIZE">
			<description>
				<format>
		    Invalid annotation: value of the '%ls' property exceeds the size of the array

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36514.htm</helpURL>
		</DefectDef>
		<DefectDef id="36515" name="X_BUFFER_SIZE_ON_NON_POINTER">
			<description>
				<format>
		    Invalid annotation: '%ls' property (with byte count) may only be used on values of pointer type: Function '%ls' %ls.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36515.htm</helpURL>
		</DefectDef>
		<DefectDef id="36516" name="X_NO_PROPERTIES_ON_ATTRIBUTE">
			<description>
				<format>
		    Invalid annotation: no properties specified for %s attribute

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36516.htm</helpURL>
		</DefectDef>
		<DefectDef id="36517" name="X_VALID_SIZE_ON_NON_READABLE_BUFFER">
			<description>
				<format>
		    Invalid annotation: '%ls' property may not be specified on buffers that are not readable

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36517.htm</helpURL>
		</DefectDef>
		<DefectDef id="36518" name="X_WRITABLE_SIZE_ON_NON_WRITABLE_BUFFER">
			<description>
				<format>
		    Invalid annotation: '%ls' property may not be specified as a precondition on buffers that are not writable

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36518.htm</helpURL>
		</DefectDef>
		<DefectDef id="36519" name="X_NEEDSRELEASE_MAYBE">
			<description>
				<format>
		    Invalid annotation: value of the 'NeedsRelease' property must be Yes or No

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36519.htm</helpURL>
		</DefectDef>
		<DefectDef id="36521" name="X_INVALID_SIZE_STRING_DEREF">
			<description>
				<format>
		    Invalid size specification: * operator can only be applied to pointer types

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36521.htm</helpURL>
		</DefectDef>
		<DefectDef id="36522" name="X_INVALID_SIZE_STRING_TYPE">
			<description>
				<format>
		    Invalid size specification: expression must be of integral type: annotation '%ls' on function '%ls' %ls.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36522.htm</helpURL>
		</DefectDef>
		<DefectDef id="36523" name="X_INVALID_SIZE_STRING_PARAM">
			<description>
				<format>
		    Invalid size specification: parameter '%ls' not found

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36523.htm</helpURL>
		</DefectDef>
		<DefectDef id="36525" name="X_INVALID_SIZE_STRING_UNREACHABLE_LOCATION">
			<description>
				<format>
		    Invalid size specification: property value might not be valid

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36525.htm</helpURL>
		</DefectDef>
		<DefectDef id="36526" name="X_INVALID_SIZE_STRING_BUFFER_TYPE">
			<description>
				<format>
		    Invalid size specification: expression must be of pointer or array type: annotation '%ls' on function '%ls' %ls.

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36526.htm</helpURL>
		</DefectDef>
		<DefectDef id="36527" name="X_NEEDSRELEASE_ON_VOID">
			<description>
				<format>
		    Invalid annotation: 'NeedsRelease' property may not be used on values of void type

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36527.htm</helpURL>
		</DefectDef>
		<DefectDef id="36530" name="X_UNRECOGNIZED_FORMAT_STRING_STYLE">
			<description>
				<format>
		    Unrecognized format string style '%ls': Function '%ls' %ls

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36530.htm</helpURL>
		</DefectDef>
		<DefectDef id="36535" name="X_BUFFERSIZE_INFEASIBLE">
			<description>
				<format>
		    Buffer size cannot be of type '%ls', bigger than size_t

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36535.htm</helpURL>
		</DefectDef>
		<DefectDef id="36540" name="X_OVERRIDING_OLD_MODEL">
			<description>
				<format>
		    The use of attribute annotations on this function will invalidate all of its existing __declspec annotations

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36540.htm</helpURL>
		</DefectDef>
		<DefectDef id="36551" name="X_INVALID_SIZE_STRING_EXPRESSION">
			<description>
				<format>
		    Invalid size specification: expression not parsable

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36551.htm</helpURL>
		</DefectDef>
		<DefectDef id="36552" name="X_INVALID_DEREF_EXPRESSION">
			<description>
				<format>
		    Invalid Deref=: expression not parsable

		    </format>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_36552.htm</helpURL>
		</DefectDef>
		<DefectDef id="6701" name="LIB_BADYESNO">
			<description>
				<format>
		    The value is not a valid Yes/No/Maybe value: '%ls'

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6701.htm</helpURL>
		</DefectDef>
		<DefectDef id="6702" name="LIB_BADSTRING">
			<description>
				<format>
		    The value is not a string value: '%ls'

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6702.htm</helpURL>
		</DefectDef>
		<DefectDef id="6703" name="LIB_BADNUMBER">
			<description>
				<format>
		    The value is not a number: '%ls'

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6703.htm</helpURL>
		</DefectDef>
		<DefectDef id="6704" name="LIB_EXP_MISC">
			<description>
				<format>
		    Unexpected Annotation Expression Error: %ls [%ls]

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6704.htm</helpURL>
		</DefectDef>
		<DefectDef id="6705" name="LIB_ANNOTE_ARITY">
			<description>
				<format>
		    Annotation error expected %d arguments for annotation %ls found %d.

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6705.htm</helpURL>
		</DefectDef>
		<DefectDef id="6706" name="LIB_ANNOTE_MISC">
			<description>
				<format>
		    Unexpected Annotation Error for annotation %ls: %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6706.htm</helpURL>
		</DefectDef>
		<DefectDef id="6707" name="LIB_MODEL_MISC">
			<description>
				<format>
		    Unexpected Model Error: %ls

		    </format>
			</description>
			<additionalInfo>
				<format>
		    This is an error in the annotations
		    </format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_6707.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup id="99200" name="drivers" tool="PREfast" version="9.0.21022.40203">
		<DefectDef id="28101" name="DRIVER_FUNCTION_TYPE">
			<description>
				<format>
				The Drivers module has inferred that the current function
				is a %prop% function
				</format>
				<param name="prop" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				This is informational only.  No problem has been detected
				</format>
			</additionalInfo>
			<doc>
				<P>
				This message is generated when the drivers module has
				concluded that the function is of the identified type.
				It does not indicate an error, but does indicate that
				PREfast will look for errors specific to that function type.
				If this inference is wrong, unexpected errors can be ignored.
				</P>
				<P>
				The function signature (arguments and result type) are used
				where possible.  Some functions (such as Cancel and StartIo)
				have the same signature, so the name is checked to see if it
				matches the conventional name for that functions.   Other
				functions may be checked for conventional names as well
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28101.htm</helpURL>
		</DefectDef>
		<DefectDef id="28110" name="FLOAT_IN_DRIVER">
			<description>
				<format>Drivers must protect floating point hardware state. 
				See use of float %expr%</format>
				<param name="expr" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				Use KeSaveFloatingPointState/KeRestoreFloatingPointState 
				around floating point operations.
				Display Drivers should use the corresponding Eng... routines
				</format>
			</additionalInfo>
			<doc>
				<P>
				Drivers normally run with the floating point
				context of the application that was running most
				recently, and any use of floating point that is
				unprotected by KeSaveFloatingPointState and
				KeRestoreFloatingPointState will change the
				results for some other process, and can often
				cause incorrect or unexpected results in the
				driver.  Any attempt to use a variable or
				constant of a float type will trigger this
				warning because the compiler is free to use the
				floating point hardware should it choose to do
				so
				</P>
				<P>
				Display Drivers should use
				EngSaveFloatingPointState/EngRestoreFloatingPointState
				instead
				</P>
				<P>
				Once an instance of this error is detected along
				any given flow path, as many as possible of any
				subsequent similar errors are suppressed.
				Functions definitions which either take floating
				type arguments or which return a floating type
				do not have this error reported because the
				caller will report the use
				</P>
				<P>
				This test can be mislead when a program saves
				and restores floating point state around a
				function call, and the called function does
				floating point operations 
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

					void driver_utility()
					{
						float a;
						a += 1;
					}

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

					void driver_utility()
					{
						KFLOATING_SAVE FloatBuf;
						KeSaveFloatingPointState(&FloatBuf);
						float a;
						a += 1;
						KeRestoreFloatingPointState(&FloatBuf);
					}
					
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28110.htm</helpURL>
		</DefectDef>
		<DefectDef id="28111" name="FP_IRQ_UNMATCHED">
			<description>
				<format>The IRQL where the floating point state was saved
				does not match the current IRQL (for this restore operation)
				</format>
			</description>
			<additionalInfo>
				<format>
				The floating Save/Restore functions require that the IRQL
				be the same at the time of save and the corresponding restore
				</format>
			</additionalInfo>
			<doc>
				<P>
				The IRQL at which the floating point state is saved affects
				how it is saved, and thus the save and restore must occur
				at the same level.
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

					void driver_utility()
					{
						// Running at APC level
						KFLOATING_SAVE FloatBuf;
						if (KeSaveFloatingPointState(&FloatBuf))
						{
							KeLowerIrql(PASSIVE_LEVEL);
							...
							KeRestoreFloatingPointState(&FloatBuf);
						}
					}

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

					void driver_utility()
					{
						// Running at APC level
						KFLOATING_SAVE FloatBuf;
						if (KeSaveFloatingPointState(&FloatBuf))
						{
							KeLowerIrql(PASSIVE_LEVEL);
							...
							KeRaiseIrql(APC_LEVEL, &old);
							KeRestoreFloatingPointState(&FloatBuf);
						}
					}
					
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28111.htm</helpURL>
		</DefectDef>
		<DefectDef id="28112" name="INTERLOCKED_ACCESS">
			<description>
				<format>A variable (%name%) which is accessed via an Interlocked
				function must always be accessed via an Interlocked function.
				See line %line%
				</format>
				<param name="name" format="%ls"/>
				<param name="line" format="%ld"/>
			</description>
			<additionalInfo>
				<format>
				It is not always safe to access a variable which is accessed
				via the Interlocked* family of functions in any other way
				</format>
			</additionalInfo>
			<doc>
				<P>
				Although certain ordinary assignments, accesses, and
				comparisons to variables which are used by
				the Interlocked* functions may, upon careful
				analysis, be safe, it is a sufficient risk
				that all such uses are diagnosed.  In
				particular, in a MP system, without using
				the Interlocked functions, there is no
				guarantee that data shared between processors
				will be updated in memory in the order
				expected.  There is also no guarantee that
				accessing the same shared variable twice
				(even in close proximity) without using the
				Interlocked* functions will yield the same
				value (or for that matter a different value,
				even when that is expected).
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
				inter_var --;
				...
                InterlockedIncrement(&inter_var);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
				InterlockedDecrement(&inter_var);
				...
                InterlockedIncrement(&inter_var);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28112.htm</helpURL>
		</DefectDef>
		<DefectDef id="28113" name="INTERLOCKED_SCLASS">
			<description>
				<format>Accessing a local variable %name% via an Interlocked function
				</format>
				<param name="name" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				This is an unusual usage which could be reconsidered
				</format>
			</additionalInfo>
			<doc>
				<P>
				Although it is legal to pass the address of a local scope
				variable to another function and then operate on it via the
				Interlocked functions, you need to be sure that the stack
				will not be swapped out unexpectedly and that the variable
				has the correct lifetime across all threads that might use it.
				Unnecessary use of interlocked operations will impact
				performance.
				</P>
				<P>
				Note that the Interlocked* functions all have a return value,
				and often it is the return value that should be used in
				subsequent computations, not any of the input arguments.
				</P>
				<P>
				Note also that the Interlocked* functions only protect their
				leftmost argument; using an Interlocked* function in the
				style of InterlockedExchange(&amp;local, global) does not
				protect the global in any special way, and often serves no
				purpose.  local = InterllockedExchange(&amp;global, global) would 
				have the same effect on the data, and protect the global.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28113.htm</helpURL>
		</DefectDef>
		<DefectDef id="28114" name="IRP_COPY">
			<description>
				<format>
				Copying a whole IRP stack entry leaves certain fields 
				initialized that should be cleared or updated
				</format>
			</description>
			<additionalInfo>
				<format>
				Use IoCopyCurrentIrpStackLocationToNext to accomplish this
				</format>
			</additionalInfo>
			<doc>
				<P>
				Improperly copying an IRP stack entry can cause serious 
				problems with a driver, including lost data and system crashes.
				If an IRP stack entry must be copied and 
				IoCopyCurrentIrpStackLocationToNext
				will not serve, then certain members should not be copied or
				should be zeroed after copying.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28114.htm</helpURL>
		</DefectDef>
		<DefectDef id="28120" name="IRQ_TOO_LOW">
			<description>
				<format>
				The function %func% is not permitted to be called
				at the current IRQ level.  The current level is too low
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				%where%.
				The level might have been inferred from the function signature
				</format>
				<param name="where" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The function being called is limited to being called to at
				IRQ levels above the current IRQ level.  Consult the function
				documentation for the acceptable range.
				</P>
				<P>
				Note that PREfast will attempt to infer what it can about
				the current IRQ level, and this warning is generated only
				when it has inferred enough about the IRQ level to detect
				the error.  Inference may come from the signature of the
				function being analyzed or prior calls along the current
				path.
				</P>
				<P>
				Note that if PREfast has not inferred enough about the
				function to determine the IRQ level at which it is running,
				no error will be reported, although a problem may be present.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28120.htm</helpURL>
		</DefectDef>
		<DefectDef id="28121" name="IRQ_TOO_HIGH">
			<description>
				<format>
				The function %func% is not permitted to be called
				at the current IRQ level.  The current level is too high
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				%where%.
				The level might have been inferred from the function signature
				</format>
				<param name="where" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The function being called is limited to being called to at
				IRQ levels below the current IRQ level.  Consult the function
				documentation for the acceptable range.
				</P>
				<P>
				Note that PREfast will attempt to infer what it can about
				the current IRQ level, and this warning is generated only
				when it has inferred enough about the IRQ level to detect
				the error.  Inference may come from the signature of the
				function being analyzed or prior calls along the current
				path.
				</P>
				<P>
				Note that if PREfast has not inferred enough about the
				function to determine the IRQ level at which it is running,
				no error will be reported, although a problem may be present.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28121.htm</helpURL>
		</DefectDef>
		<DefectDef id="28122" name="INFERRED_IRQ_TOO_LOW">
			<description>
				<format>
				The function %func% is not permitted to be called at a low
				IRQ level.  Prior function calls are inconsistent with this
				constraint
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				It may be that the error is actually in some prior call
				that limited the range.
				%where%
				</format>
				<param name="where" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The function being called is limited to being called at
				high IRQ levels.  However, PREfast has inferred from prior
				calls that the highest acceptable IRQ level for those prior
				calls to succeed is below the minimum for this call.
				Consult the function documentation for the acceptable range.
				</P>
				<P>
				Note that PREfast will attempt to infer what it can about
				the current IRQ level, and this warning is generated only
				when it has inferred enough about the IRQ level to detect
				the error.  Inference may come from the signature of the
				function being analyzed or prior calls along the current
				path.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28122.htm</helpURL>
		</DefectDef>
		<DefectDef id="28123" name="INFERRED_IRQ_TOO_HIGH">
			<description>
				<format>
				The function %func% is not permitted to be called at a high
				IRQ level.  Prior function calls are inconsistent with this
				constraint
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				It may be that the error is actually in some prior call
				that limited the range.
				%where%
				</format>
				<param name="where" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The function being called is limited to being called at
				low IRQ levels.  However, PREfast has inferred from prior
				calls that the lowest acceptable IRQ level for those prior
				calls to succeed exceeds the maximum for this call.
				Consult the function documentation for the acceptable range.
				</P>
				<P>
				Note that PREfast will attempt to infer what it can about
				the current IRQ level, and this warning is generated only
				when it has inferred enough about the IRQ level to detect
				the error.  Inference may come from the signature of the
				function being analyzed or prior calls along the current
				path.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28123.htm</helpURL>
		</DefectDef>
		<DefectDef id="28124" name="IRQ_SET_TOO_LOW">
			<description>
				<format>
				The call to %func% causes the IRQ Level to be set below
				the minimum acceptable for the function being analyzed
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				The level limits come from annotations on the current function
				</format>
			</additionalInfo>
			<doc>
				<P>
				The function being called changes the IRQL to above the
				maximum for the current function type.  This could have been
				inferred either from the function type, or from annotations
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28124.htm</helpURL>
		</DefectDef>
		<DefectDef id="28125" name="PROBE_NO_TRY">
			<description>
				<format>
                    The function %func% must be called from within a try/except block
                </format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				The requirement might be conditional
				</format>
			</additionalInfo>
			<doc>
				<p>
					This functiom must be called from within a try/except block
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					ProbeForRead(addr, len, 4);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					__try
					{
						ProbeForRead(addr, len, 4);
					}
					__except(EXCEPTION_EXECUTE_HANDLER)
					{
						Status = GetExceptionCode();
						... report error status
					}
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28125.htm</helpURL>
		</DefectDef>
		<DefectDef id="28126" name="OBJ_REFERENCE_MODE">
			<description>
				<format>
                    The AccessMode parameter to ObReferenceObject* should be IRP-&gt;RequestorMode
                </format>
			</description>
			<doc>
				<p>
				A driver should use Irp-&gt;RequestorMode rather than specifying 
				UserMode or KernelMode.  This allows kernel-mode IRP senders
				to supply kernel-mode handles safely.
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28126.htm</helpURL>
		</DefectDef>
		<DefectDef id="28127" name="PROTOTYPE_MISMATCH">
			<description>
				<format>
					The function being used as a %func% routine does not
					exactly match the type expected.  Have '%type1%', 
					expecting '%type2%'
                </format>
				<param name="func" format="%ls"/>
				<param name="type1" format="%ls"/>
				<param name="type2" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				It is likely that the difference is that the actual function
				returns a value, and the expected function type is void
				</format>
			</additionalInfo>
			<doc>
				<p>
				To assure that PREfast is able to check the various callbacks,
				a warning about this otherwise benign type mismatch is 
				generated.  The type should match exactly.  Note that any
				return value will be ignored when the expected function
				return type is void, so providing one serves no purpose
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28127.htm</helpURL>
		</DefectDef>
		<DefectDef id="28128" name="FUNCTION_ASSIGNMENT">
			<description>
				<format>
					An access to %field% has been made directly.
					It should be made by %routine%
                </format>
				<param name="field" format="%ls"/>
				<param name="routine" format="%ls"/>
			</description>
			<doc>
				<p>
				Certain structure members should not be accessed directly,
				but rather through specialized functions
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					irp->CancelRoutine = myCancelRoutine;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					oldCancel = IoSetCancelRoutine(irp, myCancelRoutine);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28128.htm</helpURL>
		</DefectDef>
		<DefectDef id="28129" name="MUST_BE_BITOP">
			<description>
				<format>
					An assignment has been made to %operand% which should
					only be modified using bit sets and clears
                </format>
				<param name="operand" format="%ls"/>
			</description>
			<doc>
				<p>
				The operand is a collection of bit flags, and not preserving 
				the bits other than those explicitly being changed may 
				cause unexpected behaviors.
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					fdo->Flags = DO_BUFFERED_IO;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					fdo->Flags |= DO_BUFFERED_IO;
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28129.htm</helpURL>
		</DefectDef>
		<DefectDef id="28131" name="NOT_COPYING_NAME">
			<description>
				<format>
					The DriverEntry routine should save a copy of the argument
					%argname%, not the pointer, since the I/O Manager frees 
					the buffer after DriverEntry returns
                </format>
				<param name="argname" format="%ls"/>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28131.htm</helpURL>
		</DefectDef>
		<DefectDef id="28132" name="SIZEOF_POINTER">
			<description>
				<format>
					Taking the size of pointer %operand%
                </format>
				<param name="operand" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
					<p>
				This will yield the size of a pointer (4 or 8), not the size
				of the object pointed to.  Dereference the pointer, or if the
				size of a pointer was intended, use the pointer type or
				(void *) instead
                </p>
				</format>
			</additionalInfo>
			<doc>
				<p>
				Even when sizeof(pointer) is intended, it can be confusing
				to a future reader, so making it explicit that the pointer type
				was intended will both suppress the error and help readers.
				</p>
				<p>
				Should the va_start macro change, this test will produce
				false positives for it.  The PREfast drivers module should 
				be updated to recognize and ignore va_start.
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					memset(b, 0, sizeof(b));
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					memset(b, 0, sizeof(*b));
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28132.htm</helpURL>
		</DefectDef>
		<DefectDef id="28133" name="INITIALIZE_TIMER">
			<description>
				<format>
					IoInitializeTimer is best called from AddDevice
                </format>
			</description>
			<additionalInfo>
				<format>
					<p>
				IoInitializeTimer can only be called once per device object.
				Calling it from the AddDevice routine helps assure that it is
				not unexpectedly called more than once
                </p>
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28133.htm</helpURL>
		</DefectDef>
		<DefectDef id="28134" name="POOL_TAG">
			<description>
				<format>
					The type of a pool tag should be integral, not a string 
					or string pointer
                </format>
			</description>
			<additionalInfo>
				<format>
					<p>
				A pool tag name should be a character literal using single
				quotes ('gaT_'), not a string in double quotes.  It is normally
				in reverse byte order
                </p>
				</format>
			</additionalInfo>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					p = ExAllocatePoolWithTag(NonPagedPool, 30, "_Tag");
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					p = ExAllocatePoolWithTag(NonPagedPool, 30, 'gaT_');
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28134.htm</helpURL>
		</DefectDef>
		<DefectDef id="28135" name="KE_WAIT_LOCAL">
			<description>
				<format>
					If the first argument to KeWaitForSingleObject is
					a local variable, the Mode parameter must be KernelMode
                </format>
			</description>
			<doc>
				<p>
				A wait which is not in kernel mode could cause the process
				to be swapped out.  If the object being awaited is on the
				stack (and thus swapped out) a system crash can result
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					KeWaitForSingleObject(&MyMutex, UserRequest, UserMode, FALSE, NULL);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					KeWaitForSingleObject(&MyMutex, UserRequest, KernelMode, FALSE, NULL);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28135.htm</helpURL>
		</DefectDef>
		<DefectDef id="28137" name="ALWAYS_CONSTANT">
			<description>
				<format>
					The variable argument '%operand%' should instead be a (literal) constant
                </format>
				<param name="operand" format="%ls"/>
			</description>
			<doc>
				<p>
				The function being called expects that a (literal) constant is present
				in the specified position.  The individual function 
				documentation will indicate why a variable in this position
				is unsafe
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					ExAcquireResourceExclusiveLite(Resource, Wait);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					ExAcquireResourceExclusiveLite(Resource, TRUE);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28137.htm</helpURL>
		</DefectDef>
		<DefectDef id="28138" name="NEVER_CONSTANT">
			<description>
				<format>
					The constant argument '%operand%' should instead be variable
                </format>
				<param name="operand" format="%ls"/>
			</description>
			<doc>
				<p>
				The function being called expects that a variable or
				non-constant expression is present
				in the specified position.  The individual function 
				documentation will indicate why a constant in this position
				is unsafe.
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					READ_PORT_UCHAR(0x80001234);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					READ_PORT_UCHAR(PortAddress);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28138.htm</helpURL>
		</DefectDef>
		<DefectDef id="28139" name="STRICT_TYPE_MATCH">
			<description>
				<format>
					The argument '%operand%' should exactly match the 
					type '%typename%'
                </format>
				<param name="operand" format="%ls"/>
				<param name="typename" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				Some functions permit limited arithmetic on the argument
				type, others do not.
				This usually indicates that an enum formal was not passed
				a member of the enum, but may be used for other types as
				well
				</format>
			</additionalInfo>
			<doc>
				<p>
				Since C permits enums to be used interchangably, and
				interchangably with constants, it is easy to pass the
				wrong enum value to a function without an error.
				</p>
				<p>
				Some functions are coded so that only enums are
				allowed.  Others permit the ?: operator to select between
				values of that type.  In some cases, arithmetic on members
				of the enum type is permitted (as would be the case for
				bit flags encoded as an enum) and in a few cases enums and
				constants may be combined.  The documentation will state the
				rules for a specific function.  If a constant is strictly
				required, rule 8137 will also apply.
                </p>
				<p>
				This rule can be used for other parameter types as well; 
				see the function documentation for why the types must match 
				exactly.
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					KeWaitForSingleObject(&MyMutex, UserRequest, UserRequest, false, NULL);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					KeWaitForSingleObject(&MyMutex, UserRequest, UserMode, false, NULL);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28139.htm</helpURL>
		</DefectDef>
		<DefectDef id="28140" name="CRITICAL_OR_IRQ">
			<description>
				<format>
                    This call must occur inside a critical region or the IRQL
					must be at least APC level
                </format>
			</description>
			<doc>
				<p>
					This function must be protected from possible APC calls
					by either using it in a critical region or with the
					IRQL raised to at least APC level
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					ExAcquireFastMutexUnsafe(Mutex);
					ExReleaseFastMutexUnsafe(Mutex);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					KeEnterCriticalRegion();
					ExAcquireFastMutexUnsafe(Mutex);
					ExReleaseFastMutexUnsafe(Mutex);
					KeLeaveCriticalRegion();
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28140.htm</helpURL>
		</DefectDef>
		<DefectDef id="28141" name="IRQ_LOWERED_IMPROPERLY">
			<description>
				<format>
				The argument '%expr%' causes the IRQ Level to be set below
				the current IRQL, and this function cannot be used for
				that purpose
				</format>
				<param name="expr" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				%where%
				</format>
				<param name="where" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The function being called changes the IRQL to below the
				current IRQL, and the function is not intended for that 
				purpose.
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

				KeRaiseIrql(DISPATCH_LEVEL, &OldIrql);
				KeRaiseIrql(PASSIVE_LEVEL, &OldIrql);

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

				KeRaiseIrql(DISPATCH_LEVEL, &OldIrql);
				KeLowerIrql(OldIrql);

				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28141.htm</helpURL>
		</DefectDef>
		<DefectDef id="28142" name="RELEASE_CONSTANT">
			<description>
				<format>
				The argument '%expr%' is a constant and is being passed
				in a context where a resource release or other restoration
				of a prior state is being made.  An object containing
				a resource should be passed
				</format>
				<param name="expr" format="%ls"/>
			</description>
			<doc>
				<P>
				This is most commonly found when passing a constant to
				a function such as KeRestoreIrql, which should instead
				be passed a value containing a previously saved IRQL.
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

				KeRaiseIrql(DISPATCH_LEVEL, &OldIrql);
				KeLowerIrql(PASSIVE_LEVEL);

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

				KeRaiseIrql(DISPATCH_LEVEL, &OldIrql);
				KeLowerIrql(OldIrql);

				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28142.htm</helpURL>
		</DefectDef>
		<DefectDef id="28143" name="PENDING_STATUS_ERROR">
			<description>
				<format>
				A dispatch routine that calls IoMarkIrpPending 
				must also return STATUS_PENDING
				</format>
			</description>
			<example>
				<defectiveSrc><![CDATA[

				IoMarkIrpPending(Irp);
				...
				return STATUS_SUCCESS;

				]]></defectiveSrc>

				IoMarkIrpPending(Irp);
				...
				return STATUS_PENDING;

				<correctedSrc><![CDATA[


				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28143.htm</helpURL>
		</DefectDef>
		<DefectDef id="28144" name="CANCEL_IRQL_FROM_IRP">
			<description>
				<format>
				Within a cancel routine, at the point of exit,
				the IRQL in Irp-&gt;CancelIrql should be the current IRQL.
				</format>
			</description>
			<additionalInfo>
				<format>
				The value need not be restored by any specific function,
				but must be restored before exit.  PREfast was unable
				to determine that it was restored to the required value
				</format>
			</additionalInfo>
			<example>
				<defectiveSrc><![CDATA[

				IoReleaseCancelSpinLock(PASSIVE_LEVEL);

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

				IoReleaseCancelSpinLock(Irp->CancelIrql);

				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28144.htm</helpURL>
		</DefectDef>
		<DefectDef id="28145" name="MODIFYING_MDL">
			<description>
				<format>
				The opaque MDL structure should not be modified by a driver
				</format>
			</description>
			<doc>
				<P>
				The MdlFlags field is used as a proxy for all MDL fields.
				With the exceptions of: MDL_MAPPING_CAN_FAIL for drivers that
				need to be Win98/NT4 compatible, and MDL_PAGES_LOCKED that
				need to be Win2K compatible, no fields should be modified.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28145.htm</helpURL>
		</DefectDef>
		<DefectDef id="28146" name="STRSAFE_H">
			<description>
				<format>
				Kernel Mode drivers should use ntstrsafe.h, not strsafe.h.
				Found in source file %file%
				</format>
				<param name="file" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				The header ntstrsafe.h contains versions of the functions 
				found in strsafe.h that are suitable for use in kernel
				mode code
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28146.htm</helpURL>
		</DefectDef>
		<DefectDef id="28147" name="UNHELPFUL_TAG">
			<description>
				<format>
				The use of a default pool tag (' kdD' or ' mdW') for calls
				to this function defeats the purpose of pool tagging
				</format>
			</description>
			<additionalInfo>
				<format>
				This may be caused by using ExAllocatePool directly, or the
				tag may have been copied from that macro.  In any case,
				ExAllocatePoolWithTag (etc.) should be used with a unique
				tag
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28147.htm</helpURL>
		</DefectDef>
		<DefectDef id="28150" name="IRQ_SET_TOO_HIGH">
			<description>
				<format>
				The function %func% causes the IRQ Level to be set above
				the maximum acceptable for the function being analyzed
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				The level limits come from being PAGED_CODE or annotations on the current function
				</format>
			</additionalInfo>
			<doc>
				<P>
				The function being called changes the IRQL to above the
				maximum for the current function type.  This could have been
				inferred either from the function type, or from annotations
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28150.htm</helpURL>
		</DefectDef>
		<DefectDef id="28151" name="BAD_IRQL_VALUE">
			<description>
				<format>
				The value of %val% is not a legal value for an IRQL
				</format>
				<param name="val" format="%ls"/>
			</description>
			<doc>
				<P>
				The value is outside the range of legal values for an
				IRQL (0-31)
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28151.htm</helpURL>
		</DefectDef>
		<DefectDef id="28152" name="INIT_NOT_CLEARED">
			<description>
				<format>
				The return from an AddDevice-like function unexpectedly 
				%kind% DO_DEVICE_INITIALIZING
				</format>
				<param name="kind" format="%ls"/>
			</description>
			<doc>
				<P>
				The Flags word of the DeviceObject must have the 
				DO_DEVICE_INITIALIZING bit cleared exactly when AddDevice 
				returns successfully.  This annotation may have been applied
				to a utility function, which then must meet the same 
				requirement.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28152.htm</helpURL>
		</DefectDef>
		<DefectDef id="28153" name="MODEL_BAD_IRQL">
			<description>
				<format>
				The value for an IRQL from annotation %type% could not be 
				evaluated in this context%note%
				</format>
				<param name="note" format="%ls"/>
				<param name="type" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				Probable annotation error.
				The following was computed: %val%
				</format>
				<param name="val" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The annotation for this function is incorrect, and the
				value for the expression could not be determined
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28153.htm</helpURL>
		</DefectDef>
		<DefectDef id="28155" name="CLASS_MISMATCH_NONE">
			<description>
				<format>
				The function being assigned or passed should be a %class1% function
				</format>
				<param name="class1" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				Add the declaration '%class1% %funcname1%;' before the current 
				first declaration of %funcname2%
				</format>
				<param name="class1" format="%ls"/>
				<param name="funcname1" format="%ls"/>
				<param name="funcname2" format="%ls"/>
			</additionalInfo>
			<doc>
				<P>
				The function type on the left was annotated as a
				special function type.  The function on the right is not
				annotated.  The function on the right should be declared
				to be of the proper function type.
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

				IoSetCancelRotine(MyStartIo);

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

				IoSetCancelRotine(MyCancelRoutine);

				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28155.htm</helpURL>
		</DefectDef>
		<DefectDef id="28156" name="IRQ_INCORRECT">
			<description>
				<format>
				The actual IRQL %act% is inconsistent with the required 
				IRQL %reqd%
				</format>
				<param name="act" format="%ls"/>
				<param name="reqd" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				The value at exit was not set to the expected value
				</format>
			</additionalInfo>
			<doc>
				<P>
				The function is annotated to exit with a specific IRQL value,
				and it did not do so along the specified path.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28156.htm</helpURL>
		</DefectDef>
		<DefectDef id="28157" name="IRQL_NOT_USED">
			<description>
				<format>
				The IRQL in '%name%' was never restored
				</format>
				<param name="name" format="%ls"/>
			</description>
			<doc>
				<P>
				The function is annotated to exit having restored the IRQL,
				and it did not do so along the specified path
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28157.htm</helpURL>
		</DefectDef>
		<DefectDef id="28158" name="IRQL_NOT_SET">
			<description>
				<format>
				No IRQL was saved into '%name%'
				</format>
				<param name="name" format="%ls"/>
			</description>
			<doc>
				<P>
				The function is annotated to exit having saved the IRQL
				into the location
				and it did not do so along the specified path.
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28158.htm</helpURL>
		</DefectDef>
		<DefectDef id="28161" name="FLOAT_UNSAFE_EXIT">
			<description>
				<format>Exiting without acquiring the right to use floating hardware
				</format>
			</description>
			<additionalInfo>
				<format>
				This function was annotated to exit with floating point available
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28161.htm</helpURL>
		</DefectDef>
		<DefectDef id="28162" name="FLOAT_SAFE_EXIT">
			<description>
				<format>Exiting while holding the right to use floating point hardware
				</format>
			</description>
			<additionalInfo>
				<format>
				This function was annotated to exit with floating point restored
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28162.htm</helpURL>
		</DefectDef>
		<DefectDef id="28163" name="MUST_NOT_TRY">
			<description>
				<format>
                    The function %func% should never be called from within a try/except block
                </format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				The requirement might be conditional
				</format>
			</additionalInfo>
			<doc>
				<p>
					This functiom should never be called from within a try/except block
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28163.htm</helpURL>
		</DefectDef>
		<DefectDef id="28164" name="PVOID">
			<description>
				<format>
				The argument %variable% is being passed to a function that
				expects a pointer to an object (not a pointer to a pointer)
				</format>
				<param name="variable" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				The function takes a PVOID in this position.
				Usually, this indicates that &amp;pXXX was used when pXXX is
				required
				</format>
			</additionalInfo>
			<doc>
				<p>
				Some 'polymorphic' functions are implemented in C by using
				a PVOID argument to take any pointer type.  However, this
				permits coding a pointer to a pointer when this is not
				intended.
				</p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					PFAST_MUTEX pFm;
					...
					KeWaitForSingleObject(&pFm, UserRequest, UserMode, false, NULL);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					PFAST_MUTEX pFm;
					...
					KeWaitForSingleObject(pFm, UserRequest, UserMode, false, NULL);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28164.htm</helpURL>
		</DefectDef>
		<DefectDef id="28165" name="CLASS_MISMATCH">
			<description>
				<format>
				The function pointer of class %class1% does not match the
				function class %class2%
				</format>
				<param name="class1" format="%ls"/>
				<param name="class2" format="%ls"/>
			</description>
			<doc>
				<P>
				Both functions were annotated with a function class, but
				the classes do not match.
				</P>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

				IoSetCancelRotine(MyStartIo);

				]]></defectiveSrc>
				<correctedSrc><![CDATA[

				IoSetCancelRotine(MyCancelRoutine);

				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28165.htm</helpURL>
		</DefectDef>
		<DefectDef id="28166" name="NOT_SAME_IRQL">
			<description>
				<format>
				The function %func% does not restore the IRQL to the value that 
				was current at function entry and is required to do so.
				%where%
				</format>
				<param name="func" format="'%ls'"/>
				<param name="where" format="%ls"/>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28166.htm</helpURL>
		</DefectDef>
		<DefectDef id="28167" name="UNEXPECTED_IRQL_CHANGE">
			<description>
				<format>
				The function %func% changes the IRQL and does not restore the 
				IRQL before it exits.  It should be annotated to reflect the 
				change or the IRQL should be restored.
				%where%
				</format>
				<param name="func" format="'%ls'"/>
				<param name="where" format="%ls"/>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28167.htm</helpURL>
		</DefectDef>
		<DefectDef id="28168" name="DISPATCH_MISMATCH">
			<description>
				<format>
				The dispatch function %func% does not
				have a __drv_dispatchType annotation matching 
				this dispatch table entry (0x%slot%)
				</format>
				<param name="func" format="'%ls'"/>
				<param name="slot" format="%02x"/>
			</description>
			<additionalInfo>
				<format>
				This can be corrected either by adding a __drv_dispatchType
				annotation to the function or correcting the dispatch table
				entry being used
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28168.htm</helpURL>
		</DefectDef>
		<DefectDef id="28169" name="DISPATCH_MISSING">
			<description>
				<format>
				The dispatch function %func% does not
				have any __drv_dispatchType annotations
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				This can be corrected by adding appropriate 
				__drv_dispatchType annotations to the function.
				Unnecessary casts can cause this warning
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28169.htm</helpURL>
		</DefectDef>
		<DefectDef id="28170" name="NO_PAGED_CODE">
			<description>
				<format>
				The function '%func%' has been declared to be in a paged
				segment, but neither PAGED_CODE nor PAGED_CODE_LOCKED was
				found
				</format>
				<param name="func" format="%ls"/>
			</description>
		</DefectDef>
		<DefectDef id="28171" name="MULTIPLE_PAGED_CODE">
			<description>
				<format>
				The function '%func%' has more than one instance of
				PAGED_CODE or PAGED_CODE_LOCKED
				</format>
				<param name="func" format="%ls"/>
			</description>
		</DefectDef>
		<DefectDef id="28172" name="NO_PAGING_SEGMENT">
			<description>
				<format>
				The function '%func%' has PAGED_CODE or PAGED_CODE_LOCKED
				but is not declared to be in a paged segment
				</format>
				<param name="func" format="%ls"/>
			</description>
		</DefectDef>
		<DefectDef id="28173" name="GET_ADAPTER_NOT_RETRIED">
			<description>
				<format>
				The current function appears to incorrectly adapt to 
				physical memory above 4GB
				</format>
			</description>
			<additionalInfo>
				<format>
				The code does not appear to recover from a call to 
				IoGetDmaAdapter that returns a small number of
				map registers.  See the documentation for details
				</format>
			</additionalInfo>
		</DefectDef>
		<DefectDef id="28175" name="INACCESSIBLE_MEMBER">
			<description>
				<format>
				The %member% member of %struct% should not be accessed by
				a driver
				</format>
				<param name="struct" format="%ls"/>
				<param name="member" format="'%ls'"/>
			</description>
		</DefectDef>
		<DefectDef id="28176" name="READ_ONLY_MEMBER">
			<description>
				<format>
				The %member% member of %struct% should not be modified by
				a driver
				</format>
				<param name="struct" format="%ls"/>
				<param name="member" format="'%ls'"/>
			</description>
		</DefectDef>
		<DefectDef id="28177" name="MULTIPLE_FUNCTION_CLASS">
			<description>
				<format>
				Function %func% is annotated with more than one
				function class.  All but one will be ignored
				</format>
				<param name="func" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
				This can often occur when there is a chain of typedefs
				</format>
			</additionalInfo>
		</DefectDef>
		<DefectDef id="28260" name="MODEL_SYNTAX_ERROR">
			<description>
				<format>
					A syntax error in the annotations was found 
					for function %clue1%,
					for property %clue2%,
					while parsing %clue3%,
					beginning just before "%clue4%"
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="'%ls'"/>
				<param name="clue3" format="%ls"/>
				<param name="clue4" format="%ls"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations.  The owner
				of the file containing those annotations should correct that
				file.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28260.htm</helpURL>
		</DefectDef>
		<DefectDef id="28266" name="MODEL_PLACEMENT_ERROR">
			<description>
				<format>
					A syntax error in the annotations was found 
					for function %clue1%,
					for property %clue2%,
					%clue3%
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="'%ls'"/>
				<param name="clue3" format=" %ls"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations.  The owner
				of the file containing those annotations should correct that
				file.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28266.htm</helpURL>
		</DefectDef>
		<DefectDef id="28268" name="CLASS_MODEL_MISMATCH">
			<description>
				<format>
				The function class %class1% on the function does not
				match the function class %class2% on the typedef used here
				</format>
				<param name="class1" format="%ls"/>
				<param name="class2" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
				This is an error in the annotations
				</format>
			</additionalInfo>
			<doc>
				<P>
				Both the typedef and the function itself have functionClass
				annotations, but they do not match.  If both are used they
				must match
				</P>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28268.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup id="99200" name="fpa" tool="PREfast" version="9.0.21022.40203">
		<DefectDef id="28197" name="ALIASED_MEMORY_LEAK">
			<description>
				<format>
					Possibly leaking memory %pointer%%note%
				</format>
				<param name="pointer" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<doc>
				<p>
					This warning indicates that the specified pointer points
					to allocated memory or some other allocated resource
					that was not explicitly freed, but was passed to a
					function that might have retained a copy that will be
					freed later.
				</p>
				<p>
					This warning is reported for both memory and resource
					leaks when the resource is commonly aliased to another 
				    location.
				</p>
				<p>
					This warning can be reported on function exit if the
					argument is annotated as having been expected to be
					released.
				</p>
			</doc>
			<example funcBody="void Dfa_%id%" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
					char *p = (char *)malloc(10);
					test(p);   // does not save a copy of p
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char *p = (char *)malloc(10);
					test(p);   // does not save a copy of p

					free(p);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28197.htm</helpURL>
		</DefectDef>
		<DefectDef id="28198" name="ALIASED_MEMORY_LEAK_EXCEPTION">
			<description>
				<format>
					Possibly leaking memory %pointer% due to an exception%note%
				</format>
				<param name="pointer" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<question>
				<format>
					Is a local catch block needed to clean up memory
				</format>
			</question>
			<doc>
				<p>
					This warning indicates that allocated memory is not
					being freed when an exception is thrown.  The statement
					at the end of the path could potentially throw an
					exception.  The memory had been passed to a function
					that might have saved a copy to be freed later.
				</p>
			</doc>
			<example funcBody="void Dfa_%id%" sysIncludes="new">
				<defectiveSrc><![CDATA[
					char *p1 = new char[10];
					char *p2 = new char[10];

					test(p1);   // does not save a copy of p

					delete[] p2;
					delete[] p1;
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char *p1 = new char[10];
					char *p2 = NULL;

					test(p1);   // does not save a copy of p

					try {
						p2 = new char[10];
					} catch (std::bad_alloc *e) {
						// just handle the throw.
						;
					}

					delete[] p2;
					delete[] p1;
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28198.htm</helpURL>
		</DefectDef>
		<DefectDef id="28103" name="RESOURCE_LEAK">
			<description>
				<format>
					Leaking the %reskind% stored in %pointer%
				</format>
				<param name="reskind" format="%ls"/>
				<param name="pointer" format="'%ls'"/>
			</description>
			<doc>
				<p>
					This warning indicates that the specified object
					contains a resource that has not been freed
				</p>
				<p>
					This warning is reported for resource leaks.
				</p>
			</doc>
			<example funcBody="void Dfa_%id%" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
					res = KeSaveFloatingPointState(buffer);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					res = KeSaveFloatingPointState(buffer);
					if (NT_SUCCESS(res))
					{
						res = KeRestoreFloatingPointState(buffer);
					}
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28103.htm</helpURL>
		</DefectDef>
		<DefectDef id="28104" name="RESOURCE_NOT_ACQUIRED">
			<description>
				<format>
					The %reskind% that should have been acquired before
					function exit was not acquired
				</format>
				<param name="reskind" format="%ls"/>
			</description>
			<doc>
				<p>
					This warning indicates that the function is intended
					to acquire a resource before exit, and did not
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28104.htm</helpURL>
		</DefectDef>
		<DefectDef id="28105" name="RESOURCE_LEAK_EXCEPTION">
			<description>
				<format>
					Leaking %reskind% stored in %pointer% due to an exception
				</format>
				<param name="reskind" format="%ls"/>
				<param name="pointer" format="'%ls'"/>
			</description>
			<question>
				<format>
					Is a local catch block needed to release the resource 
				</format>
			</question>
			<doc>
				<p>
					This warning indicates that some resource is not
					being freed when an exception is thrown.  The statement
					at the end of the path could potentially throw an
					exception.
				</p>
			</doc>
			<example funcBody="void Dfa_%id%" sysIncludes="new">
				<defectiveSrc><![CDATA[
					res = AllocateResource(Resource);
					char *p2 = new char[10]; // could throw

					delete[] p2;
					FreeResource(Resource)
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					res = AllocateResource(Resource);
					char *p2;

					try {
						p2 = new char[10];
					} catch (std::bad_alloc *e) {
						// just handle the throw.
						;
					}
					FreeResource(Resource)

				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28105.htm</helpURL>
		</DefectDef>
		<DefectDef id="28106" name="ALREADY_HELD">
			<description>
				<format>
					The variable %variable% already holds a %reskind%
				</format>
				<param name="variable" format="'%ls'"/>
				<param name="reskind" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
                    Putting a new resource into this variable may cause the
					prior value to be lost
                </format>
			</additionalInfo>
			<doc>
				<p>
					This error occurs when a variable containing a resource
					is called in a context where a new value for that resource
					will be put into that variable, possibly causing the old
					value to be lost and thus leak
				</p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					ExAcquireResourceLite(resource, true);
					...
					ExAcquireResourceLite(resource, true);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					ExAcquireResourceLite(resource1, true);
					...
					ExAcquireResourceLite(resource2, true);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28106.htm</helpURL>
		</DefectDef>
		<DefectDef id="28107" name="MUST_HOLD">
			<description>
				<format>
					The %reskind% %variable% must be held when calling %func%
				</format>
				<param name="reskind" format="%ls"/>
				<param name="variable" format="'%ls'"/>
				<param name="func" format="'%ls'"/>
			</description>
			<doc>
				<p>
					This warning indicates that some resource that the program
					must acquire is not held when the failing call is made.
				</p>
				<p>
					This test is used for resources that are usually taken
					and released in the same function.
				</p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					ExAcquireResourceLite(resource, true);
					ExReleaseResourceLite(resource);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					KeEnterCriticalRegion();
					ExAcquireResourceLite(resource, true);
					ExReleaseResourceLite(resource);
					KeLeaveCriticalRegion();
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28107.htm</helpURL>
		</DefectDef>
		<DefectDef id="28108" name="WRONG_KIND">
			<description>
				<format>
					The variable %variable% holds a %reskind% when it should
					hold a %expected%
				</format>
				<param name="variable" format="'%ls'"/>
				<param name="reskind" format="%ls"/>
				<param name="expected" format="%ls"/>
			</description>
			<doc>
				<p>
					This error occurs when resources of the same C Language
					type, but different semantic type, are confused.
					Note that this rule fires for both must-hold and
					release annotations, so it frequently will be repeated
				</p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					KeAcquireInStackSpinLock(spinLock, lockHandle);
					...
					KeReleaseSpinLock(spinLock, 0);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					KeAcquireInStackSpinLock(spinLock, lockHandle);
					...
					KeReleaseInStackSpinLock(lockHandle);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28108.htm</helpURL>
		</DefectDef>
		<DefectDef id="28109" name="MUST_NOT_HOLD">
			<description>
				<format>
					The %reskind% %variable% cannot be held at the time %func%
					is called
				</format>
				<param name="reskind" format="%ls"/>
				<param name="variable" format="'%ls'"/>
				<param name="func" format="'%ls'"/>
			</description>
			<doc>
				<p>
					This warning indicates that some resource that the program
					should not hold at this point is held.  Very possibly it
					is a duplicate acquisition
				</p>
				<p>
					This test is used for resources that are usually taken
					and released in the same function
				</p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					ExAcquireResourceLite(resource, true);
					...
					ExAcquireResourceLite(resource, true);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					ExAcquireResourceLite(resource, true);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28109.htm</helpURL>
		</DefectDef>
		<DefectDef id="28159" name="USE_OTHER_FUNCTION">
			<description>
				<format>Consider using %function% instead of %function2%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="function2" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests a preferred function calls that
				that may be semantically equivalent to the existing function call.</P>
			</doc>
			<example funcBody="void example_func(char *input)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
					char buff[MAX_PATH];

					OemToChar(buff, input);  // if strlen(input) > MAX_PATH,
											 // leads to buffer overrun
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[MAX_PATH];

					OemToCharBuff(buff, input, MAX_PATH);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28159.htm</helpURL>
		</DefectDef>
		<DefectDef id="28160" name="ERROR">
			<description>
				<format>Error annotation: %reason%
				</format>
				<param name="reason" format="%ls"/>
			</description>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28160.htm</helpURL>
		</DefectDef>
		<DefectDef id="28191" name="MUST_HOLD_CLASS">
			<description>
				<format>
                    At least one resource of the class %class% must be held 
					when this function is called
                </format>
				<param name="class" format="'%ls'"/>
			</description>
			<doc>
				<p>
					This indicates that the function being called will
					not operate some resource of the specific
					class is held at the time it is called
                </p>
			</doc>
			<!-- No example currently known -->
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28191.htm</helpURL>
		</DefectDef>
		<DefectDef id="28192" name="MUST_NOT_HOLD_CLASS">
			<description>
				<format>
                    No resource of the class %class% can be held when this
					function is called.  %variable% is currently held
                </format>
				<param name="class" format="'%ls'"/>
				<param name="variable" format="'%ls'"/>
			</description>
			<doc>
				<p>
					This indicates that the function being called will
					not operate correctly if any resource of the specific
					class is held at the time it is called
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					KeAcquireSpinLock(lock, &oldIrq);
					...
					IoCompleteRequest(Irp, 0);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					KeAcquireSpinLock(lock, &oldIrq);
					...
					KeReleaseSpinLock(lock, oldIrq);
					...
					IoCompleteRequest(Irp, 0);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28192.htm</helpURL>
		</DefectDef>
		<DefectDef id="28193" name="MUST_USE">
			<description>
				<format>
					%variable% holds a value that must be examined
                </format>
				<param name="variable" format="'%ls'"/>
			</description>
			<doc>
				<p>
					The function call which set this variable returns a
					value that a correct program must examine, and it was
					not examined or is being overwritten before examination.
                </p>
			</doc>
			<example funcBody="void Dfa_%id%">
				<defectiveSrc><![CDATA[
					IoGetDmaAdapter(pPDO, &DevDesc, &nMapRegs);
					...
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
					IoGetDmaAdapter(pPDO, &DevDesc, &nMapRegs);
					...
					if (nMapRegs < MIN_REQUIRED_MAPS) {
					    ...
					}
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28193.htm</helpURL>
		</DefectDef>
		<DefectDef id="28194" name="MEMORY_NOT_ALIASED">
			<description>
				<format>
					The function %func% was declared as aliasing 
					the value in %variable% and exited without doing so
                </format>
				<param name="variable" format="'%ls'"/>
				<param name="func" format="'%ls'"/>
			</description>
			<doc>
				<p>
					The annotations for the current function indicate that it
					will alias the specified argument, and it does not do
					so along the path indicated.  Aliasing means assigning
					the value to a non-local variable.  Must functions that
					alias a vaariable "capture" a value and put it into
					some global data structure.
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28194.htm</helpURL>
		</DefectDef>
		<DefectDef id="28195" name="MEMORY_NOT_ACQUIRED">
			<description>
				<format>
					The function %func% was declared as acquiring memory
					in %variable% and exited without doing so
                </format>
				<param name="func" format="'%ls'"/>
				<param name="variable" format="'%ls'"/>
			</description>
			<doc>
				<p>
					The annotations for the current function indicate that it
					acquires memory in the designated result location, but
					the current path did not actually allocate a value
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28195.htm</helpURL>
		</DefectDef>
		<DefectDef id="28196" name="RETURNING_BAD_RESULT">
			<description>
				<format>
					The result %param% is %value%, which
					is inconsistent with the Results specified by the annotations
                </format>
				<param name="param" format="'%ls'"/>
				<param name="value" format="'%ls'"/>
			</description>
			<doc>
				<p>
					The annotations specify one or more Results.  The value
					returned is inconsistent with that
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28196.htm</helpURL>
		</DefectDef>
		<DefectDef id="28199" name="MAYBE_UNINIT_VAR">
			<description>
				<format>
					Using possibly uninitialized memory %variable%
				</format>
				<param name="variable" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
					The variable has had its address taken but no assignment
					to it has been discovered
				</format>
			</additionalInfo>
			<doc>
				<p>
					The warning indicates that the specified variable has
					been used without being explicitly initialized, but the
					variable has had its address recorded somewhere.  It is
					possible that some action invisible to PREfast has 
					cause the variable to be initialized.
				</p>
				<p>
					This warning can be reported on function exit if the
					argument is annotated as having been expected to be
					checked by the caller and it is not initialized.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28199.htm</helpURL>
		</DefectDef>
		<DefectDef id="28262" name="MODEL_SYNTAX_ERROR2">
			<description>
				<format>
					A syntax error in the annotations was found 
					for function %clue1%,
					for property %clue2%,
					while parsing %clue3%,
					beginning just before "%clue4%"
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="'%ls'"/>
				<param name="clue3" format="%ls"/>
				<param name="clue4" format="%ls"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations, a responsibility
				of the PREfast team.  Please inform your PREfast support
				contact.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28262.htm</helpURL>
		</DefectDef>
		<DefectDef id="28267" name="MODEL_PLACEMENT_ERROR1">
			<description>
				<format>
					A syntax error in the annotations was found 
					for function %clue1%,
					for property %clue2%,
					was %clue3%
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="'%ls'"/>
				<param name="clue3" format="%ls"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations.  The owner
				of the file containing those annotations should correct that
				file.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28267.htm</helpURL>
		</DefectDef>
		<DefectDef id="28181" name="DEREF_INTERMEDIATE_NULL_PTR">
			<description>
				<format>
					Possibly dereferencing NULL pointer %pointer%%note%
				</format>
				<param name="pointer" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<doc>
				<p>
					This warning indicates that the specified pointer is
					being dereferenced, but may be a NULL pointer.
					The pointer being dereferenced usually is in the middle of a chain 
					pointers to pointers.

				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28181.htm</helpURL>
		</DefectDef>
		<DefectDef id="28182" name="DEREF_RENAMED_NULL_PTR">
			<description>
				<format>
					Dereferencing NULL pointer.  
					%pointer% contains the same NULL value as %pointer2% 
					did%note%
				</format>
				<param name="pointer" format="'%ls'"/>
				<param name="pointer2" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<doc>
				<p>
				The specified pointer contains a copy of the NULL value
				discovered in the second-named pointer.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28182.htm</helpURL>
		</DefectDef>
		<DefectDef id="28183" name="INVALID_PARAM_VALUE_3">
			<description>
				<format>
					%arg% could be %value%, and is a copy
					of the value found in %pointer%%note%
                </format>
				<param name="arg" format="'%ls'"/>
				<param name="value" format="'%ls'"/>
				<param name="pointer" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
                    this does not adhere to the specification for the
					function %func%
                </format>
				<param name="func" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
					This warning indicates that this value is unexpected in 
					the current context. This warning usually appears when
					a <code>NULL</code> value is passed an argument to a
					function that does not permit it. The value was actually
					found in the specified variable, and the argument is
					a copy of that variable.
                </p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28183.htm</helpURL>
		</DefectDef>
		<DefectDef id="28184" name="DEREF_PARAMETER_NULL_PTR">
			<description>
				<format>
					Dereferencing possibly NULL parameter %pointer%%note%
				</format>
				<param name="pointer" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<doc>
				<p>
					This warning indicates that the specified pointer is
					being dereferenced, but may be a NULL pointer.
					The pointer being dereferenced is a parameter and
					the annotations do not indicate whether it may be null.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28184.htm</helpURL>
		</DefectDef>
		<DefectDef id="28185" name="INVALID_PARAM_VALUE_4">
			<description>
				<format>
                    Parameter %arg% could be %value%%note%
                </format>
				<param name="arg" format="'%ls'"/>
				<param name="value" format="'%ls'"/>
				<param name="note" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
                    this does not adhere to the specification for the
					function %func%
                </format>
				<param name="func" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
					This warning indicates that an unexpected value derived
					from a formal parameter is being used in the 
					specified context. This is typically
					reported for potentially <code>NULL</code> values passed
					as arguments to a function that does not expect it.
                </p>
			</doc>
			<example funcBody="void Dfa_%id%" sysIncludes="string.h">
				<defectiveSrc><![CDATA[
					char a[10], b[10];
					memcpy(0, 0, 0);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char a[10], b[10];
					memcpy(a, b, 10);
				]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28185.htm</helpURL>
		</DefectDef>
		<DefectDef id="28274" name="MISMATCHED_PREDICATE1">
			<description>
				<format>
					For function %clue1%, the %clue2% %clue3%
					is inconsistent with the function declaration
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="%ls"/>
				<param name="clue3" format="'%ls'"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations rather than the
				code being analyzed.  If the function declaration is in
				a header, the correction needs to be made to the header.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28274.htm</helpURL>
		</DefectDef>
		<DefectDef id="28275" name="NULL_MACRO_VALUE">
			<description>
				<format>
					The parameter to macroValue$ is null
				</format>
			</description>
			<doc>
				<p>
				This indicates an internal error in the model file rather than 
				the code being analyzed.  
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28275.htm</helpURL>
		</DefectDef>
		<DefectDef id="28276" name="NO_MACROS">
			<description>
				<format>
					PFD was unable to find any macros -- internal error
				</format>
			</description>
			<doc>
				<p>
					This indicates an error in setting up PFD, and should
					never happen.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28276.htm</helpURL>
		</DefectDef>
		<DefectDef id="28261" name="MODEL_SYNTAX_ERROR1">
			<description>
				<format>
					A syntax error in the annotations was found 
					for function %clue1%,
					for property %clue2%,
					while parsing %clue3%,
					beginning just before "%clue4%"
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="'%ls'"/>
				<param name="clue3" format="%ls"/>
				<param name="clue4" format="%ls"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations rather than the
				code being analyzed.  If the function declaration in
				a header, the correction needs to be made to the header.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28261.htm</helpURL>
		</DefectDef>
		<DefectDef id="28264" name="MUST_BE_CONSTANT">
			<description>
				<format>
					Result lists values must be constants. See function %clue1%
					value %clue2%.
				</format>
				<param name="clue1" format="'%ls'"/>
				<param name="clue2" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
					Usually this indicates that a non-constant expression
					was used for a __drv_valueIs value list
				</format>
			</additionalInfo>
			<doc>
				<p>
				This indicates an error in the annotations rather than the
				code being analyzed.  If the function declaration in
				a header, the correction needs to be made to the header.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28264.htm</helpURL>
		</DefectDef>
		<DefectDef id="28272" name="MISMATCHED_LIST">
			<description>
				<format>
					The annotation for function %clue1%, parameter %clue2%
					when examining %clue3%
					is inconsistent with the function declaration
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="'%ls'"/>
				<param name="clue3" format="'%ls'"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations rather than the
				code being analyzed.  If the function declaration in
				a header, the correction needs to be made to the header.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28272.htm</helpURL>
		</DefectDef>
		<DefectDef id="28273" name="MISMATCHED_PREDICATE">
			<description>
				<format>
					For function %clue1%, the %clue2% %clue3%
					is inconsistent with the function declaration
				</format>
				<param name="clue1" format="%ls"/>
				<param name="clue2" format="%ls"/>
				<param name="clue3" format="'%ls'"/>
			</description>
			<doc>
				<p>
				This indicates an error in the annotations rather than the
				code being analyzed.  If the function declaration in
				a header, the correction needs to be made to the header.
				</p>
			</doc>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28273.htm</helpURL>
		</DefectDef>
		<DefectDef id="28278" name="NO_PROTOTYPE">
			<description>
				<format>
					Function %name% appears with no prototype in scope.
				</format>
				<param name="name" format="%ls"/>
			</description>
			<additionalInfo>
				<format>
					Only limited analysis can be performed.  Include the 
					appropriate header or add a prototype.
					This warning also occurs if parameter or return types
					are omitted in a function definition
				</format>
			</additionalInfo>
			<helpURL>http://winweb/cse/tools/plugins/pfd/warnings/warning_28278.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup id="28600" name="WindowsPREfast" symbol="DEFECT_DESCRIPTION__" tool="PREfast" version="9.0.21022.40203">
		<display>Windows Division Defect Checks</display>
		<doc>
			<p>
                This Module contains defect detections intended to be 
                used for Windows code.
            
                The following warnings are reported by this Module.
            </p>
		</doc>
		<ownerURL>http://winweb/wincet/</ownerURL>
		<ownerContact>winpft</ownerContact>
		<!-- 28600 -->
		<!-- 28601 -->
		<DefectDef id="28601" name="AVOID_BLOCKING_HWNDBROADCAST">
			<description>
				<format>
                    Avoid blocking on HWND_BROADCAST
                </format>
			</description>
			<doc>
				<p>
                    Calling <code>SendMessage</code> with the
                    <code>HWND_BROADCAST</code> flag will block your thread
                    until all the windows that you broadcasted this message
                    to respond.  However, if another window is hung - then
                    you've just hung your thread as well.
                </p>
				<p>
                    To fix this, you may want to use
                    <code>PostMessage</code> instead - so that it is not a
                    blocking call. Alternatively, you may want to avoid
                    <code>HWND_BROADCAST</code> altogether in favour of
                    directing the message at a particular window.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    SendMessage(HWND_BROADCAST, ... );
                ]]></defectiveSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28602 -->
		<DefectDef id="28602" name="AVOID_TIMEOUT_HWNDBROADCAST">
			<description>
				<format>
                    Avoid calling SendMessageTimeout with HWND_BROADCAST
                </format>
			</description>
			<doc>
				<p>
                    Even if you use <code>SendMessageTimeout</code> and ask
                    the thread to hang for only 10 seconds; your application
                    may actually get hung for as long as there is any other
                    window that's hung. This is because you cannot control
                    the response time of every other <code>HWND</code> on
                    the system.
                </p>
				<p>
                    To fix this, you may want to use
                    <code>PostMessage</code> instead - so that it is not a
                    blocking call. Alternatively, you may want to avoid
                    <code>HWND_BROADCAST</code> altogether in favour of
                    directing the message at a particular window.

                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28604 -->
		<DefectDef id="28604" name="AVOID_SENDMESSAGE_TIMEOUT_MISUSE">
			<description>
				<format>
                    Avoid calling SendMessageTimeout with SMTO_ABORTIFHUNG 
                    with a timeout of 0
                </format>
			</description>
			<doc>
				<p>
                    Using <code>SendMessageTimeout</code> with <code>SMTO_ABORTIFHUNG</code> flag and a
                    timeout value of 0 can be problematic because in this
                    case timeout has no impact and the call is treated as 
                    a blocking call.
                </p>
				<p>
                    Use a non zero value for timeout.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    fNeedsCallbackEvent = (0 != SendMessageTimeout(_hwnd, WM_NULL, 0, 0, SMTO_ABORTIFHUNG, 0, &dwResult));  
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    fNeedsCallbackEvent = (0 != SendMessageTimeout(_hwnd, WM_NULL, 0, 0, SMTO_ABORTIFHUNG, 1000, &dwResult));  
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28615 -->
		<DefectDef id="28615" name="ALLOCA_RESETSTKOFLW">
			<description>
				<format>
                    Must call _resetstkoflw in the __except() block when
                    calling _alloca in the __try block.  Don't call
                    _resetstkoflw from inside a catch() block
                </format>
			</description>
			<doc>
				<p>
                    Only one raise from <code>_alloca</code> can be caught
                    in a given thread unless the stack is 'fixed' (e.g. by
                    <code>_resetstkoflw</code>) after each raise. If the
                    stack is not fixed after the first raise from
                    <code>_alloca</code>, a second raise will result in
                    immediate and silent process termination.
                </p>
				<p>
                    You must call <code>_resetstkoflw</code> when the
                    current stack pointer points into an address higher than
                    the third page on the stack. This is because it doesn't
                    make sense to make a guard page out of the current page
                    the stack pointer is pointing to (or will point to in a
                    moment).
                </p>
				<p>
                    Thus, you shouldn't call <code>_resetstkoflw()</code>
                    from an SEH filter expression, or a function called from
                    an SEH filter expression.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    __try 
                    {
                        /* The following could cause stack overflow */
                        char *x = _alloca (i);
                    }

                    /* This doesn't work since the filter expression is
                     * called before stack unwinding happens. In the case
                     * of stack overflow, the filter expression is called 
                     * when the current stack pointer is pointing to the
                     * third page from the bottom of the stack.
                     */
                    __except ((GetExceptionCode () == EXCEPTION_STACK_OVERFLOW) ? (_resetstkoflw (), EXCEPTION_EXECUTE_HANDLER) : EXCEPTION_CONTINUE_SEARCH)
                    {
                    }
                ]]></defectiveSrc>
				<defectiveSrc><![CDATA[
                    __try 
                    {
                        char *x = _alloca (i);
                    }
                    __except (SEHFilter (GetExceptionCode ()))
                    {
                    }

                    int SEHFilter (DWORD dwExceptionCode)
                    {
                        if (dwExceptionCode == EXCEPTION_STACK_OVERFLOW)
                        {
                            _resetstkoflw ();
                            return EXCEPTION_EXECUTE_HANDLER;
                        }
                        else
                        {
                            return EXCEPTION_CONTINUE_SEARCH;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    __try
                    {
                        char *x = _alloca (i);
                    }
                    __except ((GetExceptionCode () == EXCEPTION_STACK_OVERFLOW) ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
                    {
                        /* In this block the stack has already been unwound,
                         * so this call will succeed.
                         */
                        _resetstkoflw ();
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28616 -->
		<DefectDef id="28616" name="INTERLOCKEDDECREMENT_MISUSE1">
			<description>
				<format>
                    Multithreaded AV condition
                </format>
			</description>
			<additionalInfo>
				<format>
                    After InterlockedDecrement(this.m_cRef) you can't
                    reference member variables again - they may already 
					have been deleted
                </format>
			</additionalInfo>
			<doc>
				<p>
                    Refer to the example of defective source given below. 
                    An example of threading time sequence that could expose
                    this problem:
                </p>
				<p>
                    A thread T1 executes lines 1, 2, and 3 decrementing
                    m_cRef to 1.
                </p>
				<p>

                    Another thread T2 executes lines 1, 2, and 3 decrementing
                    <code>m_cRef</code> to 0. Then it executes lines 4 and 5
                    - where <code>this</code> is deleted, and finally line 6.
                </p>
				<p>
                    Now when T1 is rescheduled, it will reference
                    <code>m_cref</code> on line 9. Thus it will access a
                    member variable after the related <code>this</code>
                    pointer has been deleted - and when the heap for the
                    object is in an unknown state.
                </p>
				<p>
                    The corrected example does not reference any heap memory
                    after the object is deleted.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    ULONG CObject::Release()                            // 1
                    {                                                   // 2
                        if ( 0 == InterlockedDecrement(&m_cRef) )       // 3
                        {                                               // 4
                            delete this;                                // 5
                            return NULL;                                // 6
                        }                                               // 7
                        /* this.m_cRef isn't thread safe */             // 8
                        return m_cRef;                                  // 9
                    }                                                   // 10
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    ULONG CObject::Release()
                    {
                        ASSERT( 0 != m_cRef );
                        ULONG cRef = InterlockedDecrement(&m_cRef);
                        if ( 0 == cRef )
                        {
                            delete this;
                        }
                        return cRef;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28617 -->
		<DefectDef id="28617" name="AVOID_BEGIN_THREAD_RETURN_VALUE">
			<description>
				<format>
                    Avoid using the return value of _beginthread().
                    Use _beginthreadex() instead
                </format>
			</description>
			<doc>
				<p>
                    It is safer to use <code>_beginthreadex</code> than
                    <code>_beginthread</code>.  If the thread spawned by
                    <code>_beginthread</code> exits quickly, the handle
                    returned to the caller of <code>_beginthread</code> may
                    be invalid or, worse, point to another thread. However,
                    the handle returned by <code>_beginthreadex</code> has
                    to be closed by the caller of
                    <code>_beginthreadex</code>, so it is guaranteed to be
                    a valid handle if <code>_beginthreadex</code> did not
                    return an error. 
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    hThread = (HANDLE)_beginthread ( NULL, 0,
                                                     &SecondThreadFunc,
                                                     NULL, 0, &threadID);

                    WaitForSingleObject (hThread, INFINITE);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    hThread = (HANDLE)_beginthreadex ( NULL, 0,
                                                       &SecondThreadFunc,
                                                       NULL, 0, &threadID);

                    WaitForSingleObject (hThread, INFINITE);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28623 -->
		<DefectDef id="28623" name="UNSIGNED_CAST_OF_GETMESSAGEPOS">
			<description>
				<format>
                    Unsigned cast of GetMessagePos() coordinates.
                    Use GET_X_LPARAM/GET_Y_LPARAM instead of LOWORD/HIWORD
                </format>
			</description>
			<doc>
				<p>
                    Systems with multiple monitor systems can have negative
                    x- and y- coordinates. On such systems,
                    <code>GetMessagePos</code> may therefore return negative
                    values.  <code>LOWORD</code> and <code>HIWORD</code>,
                    however, treat the coordinates as unsigned quantities.
                    Hence they should not be used.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    DWORD dw = GetMessagePos();
                    POINT ppt;

                    ppt.x = LOWORD(dw);
                    ppt.y = HIWORD(dw);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    DWORD dw = GetMessagePos();
                    POINT ppt;

                    ppt.x = GET_X_LPARAM(dw);
                    ppt.y = GET_Y_LPARAM(dw);
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28624 -->
		<DefectDef id="28624" name="UNRELEASED_REF">
			<description>
				<format>
                    No call to Release() to match incremented refcount 
                    from LResultFromObject
                </format>
			</description>
			<doc>
				<p>
					<code>LresultFromObject()</code> increases the refcount
                    on new <code>IAccessible</code> objects.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    {
                        IAccessible *pacc = CreateNewIAccessible();
                        LRESULT lTemp = LresultFromObject(riid, NULL, pacc );
                    }

                    {
                        IAccessible *pacc = NULL;

                        /* 
                         * Get new interface (from same object)
                         */
                        QueryInterface( & pacc );

                        /* 
                         * Lresult will internally bump up the refcount
                         * to hold onto the object.
                         */
                        LRESULT lTemp = LresultFromObject( riid, NULL, pacc );
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    {
                        IAccessible *pacc = CreateNewIAccessible();

                        /* 
                         * Lresult internally bumps up the refcount to
                         * hold onto the object.
                         */
                        LRESULT lTemp = LresultFromObject(riid, NULL, pacc );

                        /* 
                         * We no longer need our pacc interface, so we 
                         * release it.
                         */
                        pacc->Release();
                    }

                    {
                        /* 
                         * This case is actually fine, but flagged as
                         * an error - Noisy case.
                         */

                        IAccessible *g_pCachedIAccessible = CreateNewIAccessible();
                        /* 
                         * Same object used throughout this window/app-s 
                         * lifetime.
                         */
                        IAccessible *pacc = g_pCachedIAccessible;

                        LresultFromObject( riid, NULL, pacc );
                    }

                    {
                        IAccessible *pacc = NULL;

                        /*
                         * Get new interface (from same object)
                         */
                        QueryInterface( & pacc );

                        /*
                         * Lresult internally bumps up the refcount 
                         * to hold onto the object.
                         */
                        LRESULT lTemp = LresultFromObject( riid, NULL, pacc );

                        /*
                         * We no longer need our pacc interface, 
                         * so we release it.
                         */
                        pacc->Release();
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28625 -->
		<DefectDef id="28625" name="COMPILER_OPTIMIZATES_OUT_CLEARING_SENSITIVEDATA">
			<description>
				<format>
                    Function call used to clear sensitive data
                    will be optimized away
                </format>
			</description>
			<doc>
				<p>
                    This Function call may be optimized away during compile, 
                    resulting in sensitive data lingering in memory.
                    Use <code>SecureZeroMemory</code> or
                    <code>RtlSecureZeroMemory</code> instead.
                    A heuristic looks for identifier names containing
                    items like "key" or "pass" to trigger this warning.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    {
                        BYTE Password[100];

                        /*
                         * The Buffer will be going out of scope 
                         * anyway so the compiler optimises away
                         * the following
                         */
                        ZeroMemory (Password, sizeof(Password);
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    {
                        BYTE Password[100];

                        /*
                         * The Buffer will be going out of scope 
                         * anyway so the compiler optimises away
                         * the following
                         */
                        SecureZeroMemory (Password, sizeof(Password);
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28636 -->
		<DefectDef id="28636" name="LOCAL_FREE_NONALLOCATED">
			<description>
				<format>
                    Calling LocalFree on non-allocated pointer
                    obtained from calls to
                    GetSecurityDescriptorOwner/Group/Dacl/Sacl
                </format>
			</description>
			<additionalInfo>
				<format>
                    pointer initialized from call to %function% 
                    (line %lineno%) should not have LocalFree
                    called on it
                </format>
				<param name="function" format="%s"/>
				<param name="lineno" format="%d"/>
			</additionalInfo>
			<doc>
				<p>
                    These functions do not allocate any memory - it
                    just sets the passed in pointer. Hence it is 
                    wrong to free memory using that pointer.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    PSECURITY_DESCRIPTOR pSecurityDescriptor = NULL;
                    LPBOOL lpbDaclPresent = NULL;
                    PSID *pOwner = NULL;
                    PACL *pacl = NULL;
                    LPBOOL lpbOwnerDefaulted = NULL;

                    GetSecurityDescriptorOwner (pSecurityDescriptor,
                                                pOwner,
                                                lpbOwnerDefaulted);

                     /* 
                      * Error - GetSecurityDescriptorOwner 
                      * doesn't allocate.
                      */
                    LocalFree(pOwner);



                    GetSecurityDescriptorGroup (pSecurityDescriptor, 
                                                pOwner,
                                                lpbOwnerDefaulted);

                     /* 
                      * Error - GetSecurityDescriptorGroup
                      * doesn't allocate.
                      */
                    LocalFree(pOwner);



                    GetSecurityDescriptorDacl ( pSecurityDescriptor,
                                                lpbDaclPresent,
                                                pacl,
                                                lpbOwnerDefaulted);

                     /* 
                      * Error - GetSecurityDescriptorDacl
                      * doesn't allocate.
                      */
                    LocalFree(pacl);


                    GetSecurityDescriptorSacl ( pSecurityDescriptor,
                                                lpbDaclPresent,
                                                pacl,
                                                lpbOwnerDefaulted);
                     /* 
                      * Error - GetSecurityDescriptorSacl
                      * doesn't allocate.
                      */
                    LocalFree(pacl);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    PSECURITY_DESCRIPTOR pSecurityDescriptor = NULL;
                    LPBOOL lpbDaclPresent = NULL;
                    PSID *pOwner = NULL;
                    PACL *pacl = NULL;
                    LPBOOL lpbOwnerDefaulted = NULL;

                    GetSecurityDescriptorOwner (pSecurityDescriptor,
                                                pOwner,
                                                lpbOwnerDefaulted);

                    GetSecurityDescriptorGroup (pSecurityDescriptor,
                                                pOwner,
                                                lpbOwnerDefaulted);

                    GetSecurityDescriptorDacl ( pSecurityDescriptor,
                                                lpbDaclPresent,
                                                pacl,
                                                lpbOwnerDefaulted);

                    GetSecurityDescriptorSacl ( pSecurityDescriptor,
                                                lpbDaclPresent,
                                                pacl,
                                                lpbOwnerDefaulted);

                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28637 -->
		<DefectDef id="28637" name="UNSAFE_CALL_IN_GLOBAL_INIT">
			<description>
				<format>
                    Calling %function% in a global initializer 
                    is unsafe
                </format>
				<param name="function" format="%s"/>
			</description>
			<doc>
				<p>
                    When using a DLL, it is frequently the case that any
                    static construtors are called from DllMain.
                    There are a number of constraints that apply to calling
                    other functions from DllMain.  In particular, it is 
                    possible to create memory leaks if the DLL is loaded 
                    and unloaded dynamically.
                    The MSDN article
                    http://msdn2.microsoft.com/en-us/library/ms682583.aspx
                    contains the details.
                </p>
				<p>
                    SysAllocString is an example of a function that, in this
                    case, could cause a memory leak.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    extern const BSTR XML_SELECTION_LANGUAGE_VALUE = SysAllocString(L"XPath");
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                void InitFunc()
                {
                    /*
                     * OK if initialised inside a function.
                     */
                    BSTR temp = SysAllocString(L"XPath");
                }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28638 -->
		<DefectDef id="28638" name="DLOAD_FUNCDEFN">
			<description>
				<format>
                    '%function%' delayload stub is missing a 
                    matching declaration
                </format>
				<param name="function" format="%s"/>
			</description>
			<doc>
				<p>
                    Many of delayload stubs may be implemented without
                    including the project's headerfile where the functions
                    are declared.  Over time the function signatures might
                    be changed without updating all the corresponding
                    delayload stubs. If the delayload stubs have the wrong
                    signature that leads to AV. 
                </p>
				<p>

                    Usually a <code>#include &lt;foobar.h&gt;</code> that
                    contains the function prototype for the delayload stub
                    being implemented is missing.  A common mistake is to
                    include the public headerfile while implementing
                    delayload stubs for both public and private ordinals. So
                    the fix is to include the appropriate header file for
                    the delayload stub being implemented.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28639 -->
		<DefectDef id="28639" name="CLOSEHANDLE_STRING">
			<description>
				<format>
                    Calling close handle with string '%string%'
                </format>
				<param name="string" format="%s"/>
			</description>
			<doc>
				<p>
                    The function <code>CloseHandle</code> takes a <code>void
                    *</code>.  It is possible to cast (among other things) a
                    string pointer to a <code>void *</code> and pass it as an
                    argument to it when the intention was to pass a handle
                    opened using the string.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    _hPUPProfileArrival = CreateEvent (NULL, FALSE, FALSE, L"Global\\PUPProfileArrival");

                    if (_hPUPProfileArrival)
                    {
                        /*
                         * Bad - Passing a String instead of a handle.
                         */
                        CloseHandle (L"Global\\PUPProfileArrival");
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    _hPUPProfileArrival = CreateEvent (NULL, FALSE, FALSE, L"Global\\PUPProfileArrival");

                    if (_hPUPProfileArrival)
                    {
                        /*
                         * OK - Passing in a handle.
                         */
                        CloseHandle (_hPUPProfileArrival);
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28640 -->
		<!-- Bug Number 740362 -->
		<DefectDef id="28640" name="DLOAD_FUNCSTATIC">
			<description>
				<format>
                    '%function%' delayload stub should be a static function
                </format>
				<param name="function" format="%s"/>
			</description>
			<doc>
				<p>
                    All of the dload libs should be static so they have no 
                    symbolic exports. This ensures that no one inside
                    and outside of MS can link to your dload stub functions.
                    If this guideline is not followed your binary exposes a
                    bunch of exports that look like kernel APIs to some
                    folk, for instance. So some people may end up linking to
                    your delaystub which is the wrong API.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28642 -->
		<DefectDef id="28642" name="BAD_POSTMESSAGE_FLAG">
			<description>
				<format>
            THIS WARNING IS CURRENTLY DISABLED.
                    Bad flag for PostMessage
                </format>
			</description>
			<doc>
				<p>
                    As per the MSDN documentation for
                    <code>PostMessage</code>:
                    <ul>
                        If you send a message in the range below
                        <b>WM_USER</b> to the asynchronous message functions
                        (<b>PostMessage</b>, <b>SendNotifyMessage</b>, and
                        <b>SendMessageCallback</b>), its message parameters
                        cannot include pointers.  Otherwise, the operation
                        will fail. The functions will return before the
                        receiving thread has had a chance to process the
                        message and the sender will free the memory before
                        it is used.
                    </ul>
				</p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28644 -->
		<DefectDef id="28644" name="DPA_INSERTPTR_RETURN">
			<description>
				<format>
                    Return value from DPA_InsertPtr not checked
                </format>
			</description>
			<consequence>
				<format>
                    Memory might be leaked
                </format>
			</consequence>
			<doc>
				<p>
                    Most calls to <code>DPA_InsertPtr</code> use a variable
                    that was allocated on the heap. Functions then use the
                    DPA and free all the objects stored in the DPA. When
                    <code>DPA_InsertPtr</code> fails, the allocated object
                    can no longer be freed by the DPA cleanup code, so the
                    caller of <code>DPA_InsertPtr</code> needs to free the
                    memory.
                </p>
				<p>
                    Notice the call to <code>CleanupDPA</code> in the
                    example below. If your code does not free the allocated
                    objects in a manner similar to <code>CleanupDPA</code>
                    then you might not have to fix anything. This defect
                    assumes we're relying on the DPA to keep track of all
                    the objects that we have to later free. 
                </p>
				<p>
                    This warning fires only when SHELL_FULL_DEBUG=1.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    void Func()
                    {

                        WCHAR *pszBuf = new WCHAR[MAX_PATH];

                        DPA_InsertPtr(_hdpa, DA_LAST, pszBuf);
                    }

                    void CleanupDPA()
                    {
                        int count = DPA_GetCount(_hdpa);
                        for (int i = 0; i < count; i++)
                        {
                            delete [] (LPWSTR)DPA_GetPtr(_hdpa, i);
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    void Func()
                    {

                        WCHAR *pszBuf = new WCHAR[MAX_PATH];

                        if (DPA_ERR == DPA_InsertPtr(_hdpa, DA_LAST, pszBuf))
                        {
                            delete [] pszBuf;
                        }
                    }

                    void CleanupDPA()
                    {
                        int count = DPA_GetCount(_hdpa);
                        for (int i = 0; i < count; i++)
                        {
                            delete [] (LPWSTR)DPA_GetPtr(_hdpa, i);
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28645 -->
		<DefectDef id="28645" name="OBSOLETE_MESSAGE_SYMBOL_QUESTION">
			<description>
				<format>
                    MessageBox was called using the question mark message 
                    symbol which is no longer recommended
                </format>
			</description>
			<doc>
				<p>
                    As per MSDN:
                    <ul>
                        "...the question mark message icon is no longer
                        recommended, because it does not clearly represent a
                        specific type of message and because the phrasing of
                        a message as a question could apply to any message
                        type.  In addition, users can confuse the message
                        symbol question mark with Help information.
                        Therefore, do not use this question mark message
                        symbol in your message boxes. The system continues
                        to support its inclusion only for backward
                        compatibility."
                    </ul>
				</p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28648 -->
		<DefectDef id="28648" name="DO_NOT_USE_PULSEEVENT">
			<description>
				<format>
                    PulseEvent is an unreliable function
                </format>
			</description>
			<recommendedFix>
				<format>
                    Do NOT use it
                </format>
			</recommendedFix>
			<doc>
				<p>
                    A thread waiting on a synchronization object can be
                    momentarily removed from the wait state by a kernel-mode
                    APC, and then returned to the wait state after the APC
                    is complete. If the call to <code>PulseEvent</code>
                    occurs during the period when the thread was removed
                    from the wait state, the thread will not be released and
                    will "hang" forever.  This is because
                    <code>PulseEvent</code> releases only those threads that
                    are waiting at the moment it is called.
                </p>
				<p>
                   The following ways are suggested to fix usage of 
                   PulseEvent:

                    <UL>
						<LI>
                            If only one of the threads waiting on the event
                            needs to be released AND:
                            <UL>
								<LI>
                                    the event is a manual-reset event;
                                    change it to an auto-reset event and
                                    call <code>SetEvent</code> instead of
                                    <code>PulseEvent</code>.
                                </LI>
								<LI>
                                    the event is an auto-reset event; call
                                    <code>SetEvent</code> instead of
                                    <code>PulseEvent</code>.
                                </LI>
							</UL>
						</LI>
						<LI>
                            If all threads waiting on the event need to 
                            be released AND:
                            <UL>
								<LI>
                                    the event is a manual-reset event; 
                                    redesign your code to use a different 
                                    kind of synchronization object (such 
                                    as a semaphore).
                                </LI>
								<LI>
                                    the event is an auto-reset event; call
                                    <code>SetEvent</code> instead of
                                    <code>PulseEvent</code> (your original
                                    call to <code>PulseEvent</code> was
                                    releasing just one thread anyway).
                                </LI>
							</UL>
						</LI>
					</UL>
				</p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28649 -->
		<DefectDef id="28649" name="REDUNDANT_CHECK_FOR_ARRAY_IS_NOT_NULL">
			<description>
				<format>
                    Automatic or Global Stack Arrays are never NULL
                </format>
			</description>
			<additionalInfo>
				<format>
                    Checking that they are not NULL is not only redundant
                    but is often an indicator of a bug
                </format>
			</additionalInfo>
			<doc>
				<p>

                    Stack based arrays can never be <code>NULL</code>.
                    However most of the times; the intention is to check a
                    particular element (almost always the first element)
                    against <code>NULL</code> or for a <code>NULL</code>
                    character. Due to an error of omission, the programmer
                    misses the dereferencing (<code>*</code>) operator
                    resulting in the array being checked instead.
                </p>
			</doc>
			<example funcBody="BOOL WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    WCHAR   szLocalComputerName[MAX_COMPUTERNAME_LENGTH + 3];
                    ...
                    szLocalNameTable = BuildNameTable((szLocalComputerName == NULL ? NULL : szLocalComputerName),NULL, & dwLastName); 
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    WCHAR   szLocalComputerName[MAX_COMPUTERNAME_LENGTH + 3];
                    ...
                    szLocalNameTable = BuildNameTable((szLocalComputerName[0] == L'\0'? NULL : szLocalComputerName),NULL, & dwLastName); 
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28650 -->
		<DefectDef id="28650" name="IMPROPER_NOT_OPERATOR_ON_ZERO">
			<description>
				<format>
                    The type for which <code>!0</code> is being used does not treat it as failure case.
                </format>
			</description>
			<additionalInfo>
				<format>
            Returning a status value like <code>!TRUE</code> is not the
            same as returning a status value that indicates failure.
                </format>
			</additionalInfo>
			<doc>
				<p>
            Certain types like NTSTATUS and HRESULT have associated 
            macros that classify values of these types into SUCCESS or
            FAILURE. These macros check the most significant bit of the
            returned value(s) to determine this. Thus 0 and 1 are both
            classified as SUCCESS values. 
                </p>
				<p>
            The
            proper way to fix this warning is to return a proper error
            code instead of a generic value like -1.
                </p>
			</doc>
			<example funcBody="NTSTATUS WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    status = !STATUS_SUCCESS;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    status = STATUS_NO_MEMORY;
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28651 -->
		<DefectDef id="28651" name="NONSTATIC_FUNCPTR_IN_STATIC_INIT">
			<description>
				<format>
                    Static initializer causes copy on write pages due to member function pointers
                </format>
			</description>
			<additionalInfo>
				<format>
                    %desc%
                </format>
				<param name="desc" format="%s"/>
			</additionalInfo>
			<doc>
				<p>
            Static initializers of global or static const variables can often
            be fully evaluated at compile time, thus generated in RDATA.
            However if any initializer is a pointer-to-member-function where
            it is a non-static function, the entire initialier may be placed
            in copy-on-write pages, which has a performance cost.
                </p>
				<p>
            For binaries which require fast loading and minimizing copy on
            write pages, consider making sure all function pointer in the
            static initializer are not pointer-to-member-function.  If a
            pointer-to-member-function is required, write a simple static
            member function that wraps a call to the actual member function.
                </p>
			</doc>
			<example funcBody="NTSTATUS WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    class MyClass
                    {
                        ...
                        bool memberFunc();
                        ...
                    };
                    const StructType MyStruct[] = {
                        ...
                        &MyClass::memberFunc,
                        ...
                    };
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class MyClass
                    {
                        ...
                        bool memberFunc();
                        static bool memberFuncWrap(MyClass *thisPtr)
                            { return thisPtr->memberFunc(); }
                        ...
                    };
                    const StructType MyStruct[] = {
                        ...
                        &MyClass::memberFuncWrap,
                        ...
                    };
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28652 -->
		<DefectDef id="28652" name="BITOP_CALL_IN_STATIC_INIT">
			<description>
				<format>
                    Static initializer causes copy on write pages due to overloaded bitwise operators
                </format>
			</description>
			<additionalInfo>
				<format>
                    %desc%
                </format>
				<param name="desc" format="%s"/>
			</additionalInfo>
			<doc>
				<p>
            Static initializers of global or static const variables can often
            be fully evaluated at compile time, thus generated in RDATA.
            However if any initializer requires a function call, the entire
            initializer may be put in copy-on-write pages, which has
            a performance cost.  This initialization has calls to overloaded
            bitwise operators on enum types.  If the overloaded implementations
            have the obvious semantics, then using appropriate casts or
            macros can get the same effect without requiring copy-on-write.
                </p>
			</doc>
			<example funcBody="NTSTATUS WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
                    #include <nt.h>

                    typedef enum
                    {
                        ENUM_VAL_1 = 0x1,
                        ENUM_VAL_2 = 0x2,
                        ENUM_VAL_3 = 0x4
                    } ENUM_VALS;

                    DEFINE_ENUM_FLAG_OPERATORS(ENUM_VALS);

                    const ENUM_VALS rgValsRuntime[] = {
                        ENUM_VAL_1 | ENUM_VAL_2,    // Runtime init!
                        ENUM_VAL_3                  // Compile time init
                    };
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    #include <nt.h>

                    typedef enum
                    {
                        ENUM_VAL_1 = 0x1,
                        ENUM_VAL_2 = 0x2,
                        ENUM_VAL_3 = 0x4
                    } ENUM_VALS;

                    DEFINE_ENUM_FLAG_OPERATORS(ENUM_VALS);

                    const ENUM_VALS rgValsRuntime[] = {
                        (ENUM_VALS) COMPILETIME_OR_2FLAGS(ENUM_VAL_1, ENUM_VAL_2),
                        ENUM_VAL_3                  // Compile time init
                    };
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28714 -->
		<DefectDef id="28714" name="CAST_NTSTATUS_TO_BOOL">
			<description>
				<format>
                    Cast between semantically different integer types
                </format>
			</description>
			<additionalInfo>
				<format>
                    NTSTATUS to Boolean
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that an <code>NTSTATUS</code> is
                    being explicitly cast to a Boolean type. This is likely
                    to give undesirable results.  For example, the typical
                    success value for <code>NTSTATUS</code>,
                    <code>STATUS_SUCCESS</code>, is <code>false</code> when
                    tested as a Boolean.
                </p>
				<p>
                    In most cases, the <code>NT_SUCCESS</code> macro should
                    be used to test the value of an <code>NTSTATUS</code>.
                    This macro returns <code>true</code> iff the returned 
                    status value is neither a warning nor an error code.
                    If the function return a Boolean to indicate its 
                    failure/success; it should explicitly return the 
                    appropriate Boolean types than depend on casting
                    of <code>NTSTATUS</code> to a Boolean type.
                </p>
				<p>
                    Also sometimes the program may be attempting to reuse a
                    Boolean local variable to store <code>NTSTATUS</code>s as
                    well.  This practice is often error-prone; it is much
                    safer (and likely more efficient) to use a separate
                    <code>NTSTATUS</code> variable.
                </p>
			</doc>
			<example funcBody="BOOL WindowsPREfast_%id%" sysIncludes="nt.h" globalDecls="extern NTSTATUS SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    NTSTATUS Status;

                    Status = SomeFunc();

                    if (NT_SUCCESS(Status)) {
                        return ((BOOL)Status);
                    }

                    /* ... */

                    return Status;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    NTSTATUS Status;

                    Status = SomeFunc();

                    if (NT_SUCCESS(Status)) {
                        return FALSE;
                    }

                    /* ... */

                    return TRUE;
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28715 -->
		<DefectDef id="28715" name="CAST_BOOL_TO_NTSTATUS">
			<description>
				<format>
                    Cast between semantically different integer types
                </format>
			</description>
			<additionalInfo>
				<format>
                    Boolean to NTSTATUS
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that a Boolean is being cast to
                    an <code>NTSTATUS</code>.  This is likely to give
                    undesirable results.  For example, the typical failure
                    value for functions that return a Boolean
                    (<code>false</code>) is a success status when tested as
                    an <code>NTSTATUS</code>.
                </p>
				<p>
                    Typically a function that returns Boolean returns either
                    1 (for <code>true</code>) or 0 (for <code>false</code>).
                    Both of these values are treated as as success codes by
                    the <code>NT_SUCCESS</code> macro. The failure case
                    will, thus, never be detected.
                </p>
			</doc>
			<example funcBody="int WindowsPREfast_%id%" sysIncludes="nt.h" globalDecls="extern BOOL SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    if (NT_SUCCESS(SomeFunction())) {
                        return 0;
                    } else {
                        return -1;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (SomeFunction() == TRUE) {
                        return 0;
                    } else {
                        return -1;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28716 -->
		<DefectDef id="28716" name="COMPILER_INSERTED_CAST_BOOL_TO_NTSTATUS">
			<description>
				<format>
                    Compiler-inserted cast between semantically different
                    integral types
                </format>
			</description>
			<additionalInfo>
				<format>
                    Boolean to NTSTATUS
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that a Boolean is being used as
                    an <code>NTSTATUS</code> without being explicitly cast.
                    This is likely to give undesirable results.  For
                    instance, the typical failure value for functions that
                    return a Boolean (<code>false</code>) is a success
                    status when tested as an <code>NTSTATUS</code>.
                </p>
			</doc>
			<example funcBody="NTSTATUS WindowsPREfast_%id%" sysIncludes="nt.h" globalDecls="extern bool SomeMemAllocFunction(void **)">
				<defectiveSrc><![CDATA[
                    return SomeMemAllocFunction(&MyPtr);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (SomeMemAllocFunction(&MyPtr) == true) {
                        return STATUS_SUCCESS;
                    } else {
                        return STATUS_NO_MEMORY;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28717 -->
		<DefectDef id="28717" name="INVALID_VARIANT_TYPE">
			<description>
				<format>
                    Invalid VARIANT type
                </format>
			</description>
			<additionalInfo>
				<format>
                    The vt field of a VARIANT struct can take only
            certain values.  Assigning any other value to
            it is an error
                </format>
			</additionalInfo>
			<doc>
				<p> The vt field of a VARIANT or VARIANTARG struct can only take the following values (possibly or-ed by VT_BYREF and/or VT_ARRAY):</p>
				<p> VT_EMPTY, VT_NULL, VT_I2, VT_I4, VT_R4, VT_R8, VT_CY, VT_DATE, VT_BSTR, VT_DISPATCH, VT_ERROR, VT_BOOL, VT_VARIANT, VT_DECIMAL, VT_RECORD, VT_UNKNOWN, VT_I1, VT_UI1, VT_UI2, VT_UI4, VT_INT, VT_UINT (VT_EMPTY and VT_NULL cannot be combined with VT_ARRAY) </p>
				<p> Assigning any other value to this field is an error. </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           VARIANT var;
           var.vt = VT_SAFEARRAY | VT_INT;
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           VARIANT var;
           var.vt = VT_ARRAY | VT_INT;
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28718 -->
		<DefectDef id="28718" name="UNANNOTATED_BUFFER">
			<description>
				<format>
                    Unannotated buffer
                </format>
			</description>
			<additionalInfo>
				<format>
                    The following %buffers% should be annotated with SAL so that tools can
                    catch buffer overruns at compile time: %list%%where%
                </format>
				<param name="buffers" format="%s"/>
				<param name="list" format="%s"/>
				<param name="where" format="%s"/>
			</additionalInfo>
			<doc>
				<p> A buffer passed as a function parameter or returned by a function should be annotated with SAL. Static analysis tools can use such annotations to detect buffer overruns.
                </p>
				<p>Currently, only non-constant string buffers are diagnosed with this warning.  Ideally, all buffers passed as function parameters or returned by functions should be annotated. 
                Arrays of wchar_t or char are candidates for this 
                warning.  Unsigned chars currently are not.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           int foo( LPTSTR buffer, size_t cch );
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           int foo( __out_ecount(cch) LPTSTR buffer, size_t cch );
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28719 -->
		<DefectDef id="28719" name="BANNED_API_USAGE">
			<description>
				<format>
                    Banned API Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% is a Banned API as listed in dontuse.h for security purposes
                </format>
				<param name="function" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a function is being used that has been banned,
                    and has a more robust and secure replacement.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28720 -->
		<DefectDef id="28720" name="ISBADXXXPTR_API_USAGE">
			<description>
				<format>
                    Banned API Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% is a Banned API as listed in dontuse.h for security purposes
                </format>
				<param name="function" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a function is being used that has been banned,
                    and has a more robust and secure replacement.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28721 -->
		<DefectDef id="28721" name="DEPRECATED_PERF_COUNT">
			<description>
				<format>
                    Deprecated performance counter architecture
                </format>
			</description>
			<additionalInfo>
				<format>
                    A deprecated performance counter architecture is used: %symptom%
                </format>
				<param name="symptom" format="%s"/>
			</additionalInfo>
			<doc>
				<p> The code uses an old performance counter architecture to expose
                    performance metrics of your application/component.  
                    A new performance counter architecture was introduced for Vista.
                    You should migrate to the new architecture unless your 
                    application has simultaneous down-level requirements 
                    (must run on both Vista and down-level platforms).
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28722 -->
		<!-- This warning is transitional and should be discarded once
         it reaches level 1.  See the analysis code for more. -->
		<DefectDef id="28722" name="UNANNOTATED_BUFFER_IN_DECL">
			<description>
				<format>
                    Unannotated buffer in function declaration
                </format>
			</description>
			<additionalInfo>
				<format>
                    The following %buffers% should be annotated with SAL so that tools can
                    catch buffer overruns at compile time: %list%
                </format>
				<param name="buffers" format="%s"/>
				<param name="list" format="%s"/>
			</additionalInfo>
			<doc>
				<p> A buffer passed as a function parameter or returned by a function should be annotated with SAL. Static analysis tools can use such annotations to detect buffer overruns.
                </p>
				<p>Currently, only non-constant buffers are diagnosed with this warning.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           int foo( LPTSTR buffer, size_t cch );
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           int foo( __out_ecount(cch) LPTSTR buffer, size_t cch );
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28723 -->
		<DefectDef id="28723" name="UNANNOTATED_BUFFER_IN_DEFN_WO_DECL">
			<description>
				<format>
                    Unannotated buffer in function definition that has no corresponding declaration
                </format>
			</description>
			<additionalInfo>
				<format>
                    The following %buffers% should be annotated with SAL so that tools can
                    catch buffer overruns at compile time: %list%
                </format>
				<param name="buffers" format="%s"/>
				<param name="list" format="%s"/>
			</additionalInfo>
			<doc>
				<p> A buffer passed as a function parameter or returned by a function should be annotated with SAL. Static analysis tools can use such annotations to detect buffer overruns.
                </p>
				<p>Currently, only non-constant buffers are diagnosed with this warning.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           int foo( LPTSTR buffer, size_t cch )
       {
           ...
       }
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           int foo( __out_ecount(cch) LPTSTR buffer, size_t cch )
       {
           ...
       }
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28725 -->
		<DefectDef id="28725" name="SETUNHANDLEDEXCEPTIONFILTER_USE">
			<description>
				<format>
                     Use Watson instead of this SetUnhandledExceptionFilter.
                </format>
			</description>
			<additionalInfo>
				<format>
                    See the online help for more detailed information.
                </format>
			</additionalInfo>
			<doc>
				<p> Use Watson instead. mailto:kinshu</p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28726 -->
		<DefectDef id="28726" name="BANNED_API_USAGEL2">
			<description>
				<format>
                    Banned API Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% is a Banned API as listed in dontuse.h for security purposes
                </format>
				<param name="function" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a function is being used that has been banned,
                    and has a more robust and secure replacement.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28727 -->
		<DefectDef id="28727" name="BANNED_API_USAGEL3">
			<description>
				<format>
                    Banned API Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% is a Banned API as listed in dontuse.h for security purposes
                </format>
				<param name="function" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a function is being used that has been banned,
                    and has a more robust and secure replacement.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28728 -->
		<DefectDef id="28728" name="BANNED_API_USAGEL4">
			<description>
				<format>
                    Banned API Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% is a Banned API as listed in dontuse.h for security purposes
                </format>
				<param name="function" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a function is being used that has been banned,
                    and has a more robust and secure replacement.
                </p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28730 -->
		<DefectDef id="28730" name="INCORRECT_NULLTERM_ASSIGN">
			<description>
				<format>
                     Possible assignment of '\\0' directly to a pointer.
                </format>
			</description>
			<additionalInfo>
				<format>
                     p='\\0' should be *p='\\0'
                </format>
			</additionalInfo>
			<doc>
				<p></p>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28731 -->
		<DefectDef id="28731" name="RETAIL_DEBUGBREAK">
			<description>
				<format>
            THIS WARNING IS CURRENTLY DISABLED.
                    Avoid calling DebugBreak() in retail build.
                </format>
			</description>
			<additionalInfo>
				<format>
				</format>
			</additionalInfo>
			<doc>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28732 -->
		<DefectDef id="28732" name="THROW_DECL_MISMATCH">
			<description>
				<format>
            THIS WARNING IS CURRENTLY DISABLED.
                    The throw clause is different between the decleration and definition
                </format>
			</description>
			<additionalInfo>
				<format>
				</format>
			</additionalInfo>
			<doc>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28733 -->
		<DefectDef id="28733" name="THROW_DECL_MISSING">
			<description>
				<format>
            THIS WARNING IS CURRENTLY DISABLED.
                    The function throws, but it missing a throw clause decleration.
                </format>
			</description>
			<additionalInfo>
				<format>
				</format>
			</additionalInfo>
			<doc>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28734 -->
		<DefectDef id="28734" name="CYCLOMATIC_COMPLEXITY">
			<description>
				<format>
                    Cyclocmatic complexity is %ccnum%; max allowable is %ccmax%
                </format>
				<param name="ccnum" format="%d"/>
				<param name="ccmax" format="%d"/>
			</description>
			<additionalInfo>
				<format>
                Setting the environment variable _PREFAST_CYCLOMATIC will override the default
                max threashold of 25. Cyclomatic complexity is the number of closed loops in a function + 1.
                A quick way to count this metric is to sum 1 plus the count of {IF FOR WHILE SWITCH BREAK RETURN OPERATOR.QUESTION OPERATOR.AND OPERATOR.OR CATCH} in the function body.
                </format>
			</additionalInfo>
			<doc>
			</doc>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28735 -->
		<DefectDef id="28735" name="BANNED_CRIMSON_API_USAGE">
			<description>
				<format>
                    Banned Crimson API Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% is a Banned Crimson API
                </format>
				<param name="function" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a legacy Crimson API 
            is being used. These APIs have been replaced by the Windows Vista ETW model
            which improves both performance and security. By restricting new uses of these legacy API 
            calls, we ensure that our customers, particularly administrators, have the best possible 
            experience when debugging Windows components using events. 
            
            If you have any questions, please contact etwapi support alias.
            </p>
			</doc>
			<helpURL>http://diagnostics/sites/etw/Document%20Library/legacyapis.aspx</helpURL>
		</DefectDef>
		<!-- 28736 -->
		<DefectDef id="28736" name="BANNED_API_ARGUMENT_USAGE">
			<description>
				<format>
                    Banned API Argument Usage
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% has a banned Crimson or Perflib consumer API argument %argument%
                </format>
				<param name="function" format="%s"/>
				<param name="argument" format="%s"/>
			</additionalInfo>
			<doc>
				<p> This warning indicates that a legacy Crimson or Perflib consumer API with a banned argument
            is being used. These APIs and arguments have been replaced by the Windows Vista ETW model
            which improves both performance and security. By restricting new uses of these legacy API 
            calls, we ensure that our customers, particularly administrators, have the best possible 
            experience when debugging Windows components using events. 
            
            If you have any questions, please contact etwapi support alias.
        </p>
			</doc>
			<helpURL>http://diagnostics/sites/etw/Document%20Library/legacyapis.aspx</helpURL>
		</DefectDef>
		<!-- 28740 -->
		<!-- This warning is transitional and should be discarded once
         it reaches level 1.  See the analysis code for more. -->
		<DefectDef id="28740" name="UNANNOTATED_BUFFER_UCHAR">
			<description>
				<format>
                    Unannotated unsigned buffer
                </format>
			</description>
			<additionalInfo>
				<format>
                    The following %buffers% should be annotated with SAL so that tools can
                    catch buffer overruns at compile time: %list%%where%
                </format>
				<param name="buffers" format="%s"/>
				<param name="list" format="%s"/>
				<param name="where" format="%s"/>
			</additionalInfo>
			<doc>
				<p> A buffer passed as a function parameter or returned by a function should be annotated with SAL. Static analysis tools can use such annotations to detect buffer overruns.
                </p>
				<p>Currently, only non-constant buffers are diagnosed with this warning.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           int foo( BYTE * buffer, size_t cch );
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           int foo( __out_ecount(cch) BYTE * buffer, size_t cch );
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28741 -->
		<!-- This warning is transitional and should be discarded once
         it reaches level 0.  See the analysis code for more. -->
		<DefectDef id="28741" name="UNANNOTATED_BUFFER_PROTOTYPE">
			<description>
				<format>
                    Unannotated buffer in the function %kind1%
                </format>
				<param name="kind1" format="%s"/>
			</description>
			<additionalInfo>
				<format>
                    The following %buffers% in the function %kind2%
                    corresponding to this function should be annotated
                    with SAL so that tools can
                    catch buffer overruns at compile time: %list%
                </format>
				<param name="buffers" format="%s"/>
				<param name="list" format="%s"/>
				<param name="kind2" format="%s"/>
			</additionalInfo>
			<doc>
				<p> A buffer passed as a function parameter or returned by a function should be annotated with SAL. Static analysis tools can use such annotations to detect buffer overruns.
                </p>
				<p>Currently, only non-constant string buffers are diagnosed with this warning.  Ideally, all buffers passed as function parameters or returned by functions should be annotated. 
                Arrays of wchar_t or char are candidates for this 
                warning.  Unsigned chars currently are not.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           int foo( LPTSTR buffer, size_t cch );
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           int foo( __out_ecount(cch) LPTSTR buffer, size_t cch );
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- 28742 -->
		<!-- This warning is transitional and should be discarded once
         it reaches level 1.  See the analysis code for more. -->
		<DefectDef id="28742" name="UNANNOTATED_BUFFER_PROTOTYPE_UCHAR">
			<description>
				<format>
                    Unannotated buffer in the function %kind1%
                </format>
				<param name="kind1" format="%s"/>
			</description>
			<additionalInfo>
				<format>
                    The following %buffers% in the function %kind2%
                    corresponding to this function should be annotated
                    with SAL so that tools can
                    catch buffer overruns at compile time: %list%
                </format>
				<param name="buffers" format="%s"/>
				<param name="list" format="%s"/>
				<param name="kind2" format="%s"/>
			</additionalInfo>
			<doc>
				<p> A buffer passed as a function parameter or returned by a function should be annotated with SAL. Static analysis tools can use such annotations to detect buffer overruns.
                </p>
				<p>Currently, only non-constant buffers are diagnosed with this warning.
                </p>
			</doc>
			<example funcBody="void WindowsPREfast_%id%">
				<defectiveSrc><![CDATA[
           int foo( LPTSTR buffer, size_t cch );
               ]]></defectiveSrc>
				<correctedSrc><![CDATA[
           int foo( __out_ecount(cch) LPTSTR buffer, size_t cch );
              ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/wincet/docs/prefast/warning_%id%.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
</DefectDefs>
