/***
*typeinfo.h - Defines the type_info structure and exceptions used for RTTI
*
*	Copyright (c) Microsoft Corporation. All rights reserved.
*	Modified January 1996 by P.J. Plauger
*
*Purpose:
*       Defines the type_info structure and exceptions used for
*       Runtime Type Identification.
*
*       [Public]
*
****/

#if _MSC_VER > 1000
#pragma once
#endif

#ifndef _TYPEINFO_
#define _TYPEINFO_
#ifndef RC_INVOKED
#include <xstddef>

#ifdef  _MSC_VER
#pragma pack(push,_CRT_PACKING)
#endif  /* _MSC_VER */

 #ifndef __cplusplus
  #error This header requires a C++ compiler ...
 #endif

 #if !defined(_WIN32)
  #error ERROR: Only Win32 target supported!
 #endif

#if defined (_HAS_EXCEPTIONS)
#if !_HAS_EXCEPTIONS
#error "_HAS_EXCEPTIONS == 0 is not supported."
#endif
#endif

struct __type_info_node {
    void *memPtr;
    __type_info_node* next;
};

extern __type_info_node __type_info_root_node;

typedef int __TYPEINFO_OPERATOR_EQ_RET;

#if (_MSC_VER < 1400) || defined(_STATIC_MGDLIB)
#define _THISCALL
#else
#define _THISCALL __thiscall
#endif

class type_info {
public:
    _CRTIMP_PURE_TYPEINFO virtual ~type_info();
    _CRTIMP_TYPEINFO __TYPEINFO_OPERATOR_EQ_RET _THISCALL operator==(const type_info& rhs) const;
    _CRTIMP_TYPEINFO __TYPEINFO_OPERATOR_EQ_RET _THISCALL operator!=(const type_info& rhs) const;
    _CRTIMP_TYPEINFO int _THISCALL before(const type_info& rhs) const;
    _CRTIMP_TYPEINFO const char* _THISCALL name() const;
    _CRTIMP_TYPEINFO const char* _THISCALL name(__type_info_node* __ptype_info_node) const;
    _CRTIMP_TYPEINFO const char* _THISCALL raw_name() const;
private:
    void *_m_data;
    char _m_d_name[1];
    type_info(const type_info& rhs);
    type_info& operator=(const type_info& rhs);
    _CRTIMP static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
    _CRTIMP static void __cdecl _Type_info_dtor(type_info *);
};


 _STD_BEGIN

using ::type_info;

 _STD_END


// This include must occur below the definition of class type_info
#include <exception>


class _CRTEXP_PURE bad_cast : public exception {

public:

//
// This function is not exported prior to Windows XP.
// Therefore always inline it for x86. Anything with aliases
// is tricky because the function cannot be renamed. Putting it in
// msvcrt_win2000.c necessitates a change to C++ and checking if that
// affects which exception handling code gets pulled in -- still, that
// may be the way to go.
//
#if defined(_M_CEE_PURE) || (defined(_X86_) /*&& defined(_DLL) && (_WIN32_WINNT <= 0x0500)*/)
    __CLR_OR_THIS_CALL bad_cast(const char * _Message = "bad cast")
        : exception(_Message)
    {}

#else /* CEE_PURE || x86 */

    __CLR_OR_THIS_CALL bad_cast(const char * _Message = "bad cast");

#endif


#if defined(_M_CEE_PURE)

    __CLR_OR_THIS_CALL bad_cast(const bad_cast &_That)
        : exception(_That)
    {}

    virtual __CLR_OR_THIS_CALL ~bad_cast()
    {}

#else   /* _M_CEE_PURE */

    __CLR_OR_THIS_CALL bad_cast(const bad_cast &);
    virtual __CLR_OR_THIS_CALL ~bad_cast();

#endif



#if !defined (_MANAGED)
protected: virtual void __CLR_OR_THIS_CALL _Doraise() const { _RAISE(*this); }
#endif

};

class _CRTEXP_PURE bad_typeid : public exception {
public:
#if defined(_M_CEE_PURE)
    __CLR_OR_THIS_CALL bad_typeid(const char * _Message = "bad typeid")
        : exception(_Message)
    {}
    __CLR_OR_THIS_CALL bad_typeid(const bad_typeid &_That)
        : exception(_That)
    {}
    virtual __CLR_OR_THIS_CALL ~bad_typeid()
    {}
#else  /* _M_CEE_PURE */
    __CLR_OR_THIS_CALL bad_typeid(const char * _Message = "bad typeid");
    __CLR_OR_THIS_CALL bad_typeid(const bad_typeid &);
    virtual __CLR_OR_THIS_CALL ~bad_typeid();
#endif /* _M_CEE_PURE */
#if !defined (_MANAGED)
protected: virtual void __CLR_OR_THIS_CALL _Doraise() const { _RAISE(*this); }
#endif
};

class _CRTEXP_PURE __non_rtti_object : public bad_typeid {
public:
#if defined(_M_CEE_PURE)
    __CLR_OR_THIS_CALL __non_rtti_object(const char * _Message)
        : bad_typeid(_Message)
    {}
    __CLR_OR_THIS_CALL __non_rtti_object(const __non_rtti_object &_That)
        : bad_typeid(_That)
    {}
    virtual __CLR_OR_THIS_CALL ~__non_rtti_object()
    {}
#else  /* _M_CEE_PURE */
    __CLR_OR_THIS_CALL __non_rtti_object(const char * _Message);
    __CLR_OR_THIS_CALL __non_rtti_object(const __non_rtti_object &);
    virtual __CLR_OR_THIS_CALL ~__non_rtti_object();
#endif /* _M_CEE_PURE */
};


 _STD_BEGIN

using ::bad_typeid;
using ::bad_cast;
using ::__non_rtti_object;


 _STD_END
 


#endif /* RC_INVOKED */

#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif // _TYPEINFO_

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Modified January 1996 by P.J. Plauger
 * Modified November 1998 by P.J. Plauger
 * Consult your license regarding permissions and restrictions.
 */
/* 88bf0570-3001-4e78-a5f2-be5765546192 */ 

