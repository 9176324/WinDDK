<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<title>EVENT</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"MS Sans Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	color:black;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman","serif";
	color:black;
	font-weight:bold;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman","serif";
	color:black;
	font-weight:bold;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	color:black;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	color:black;}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";
	color:black;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;
	font-style:italic;}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:Consolas;
	color:black;}
.MsoChpDefault
	{font-size:10.0pt;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
-->
</style>

<meta name=Template content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</head>

<body bgcolor=white lang=EN-US link=blue vlink=purple leftmargin=8>

<div class=Section1>

<h2><a name=MYSAMPLE><span style='font-family:"Verdana","sans-serif"'>EVENT</span></a><span
style='font-family:"Verdana","sans-serif"'> </span></h2>

<h3><span style='font-family:"Verdana","sans-serif"'>SUMMARY</span></h3>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>This
sample demonstrates two different ways a Windows NT kernel-mode driver can
notify an application about a hardware event. One is event based method and the
other is an IRP based method. Since the sample driver is not talking to any
real hardware, it uses a timer DPC to simulate hardware events. The test
application informs the driver whether it wants to be notified by signaling an
event or by completing the pending IRP and also gives a relative time at which
the DPC timer has to fire. </span></p>

<p><b><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>Event
based approach:</span></b><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>
The application creates an event using CreateEvent(). It then passes the event
handle to the driver in a private ioctl IOCTL_REGISTER_EVENT. Since the driver
is a monolithic toplevel driver, its IRP dispatch routines run in the
application process context and as a result the event handle is still valid in
the driver. The driver dereferences the user-mode handle into system space
&amp; saves the event object pointer for later use and queues a custom timer
DPC. When the DPC fires, the driver signals the event via KeSetEvent() at
DISPATCH_LEVEL and deletes the references to the event object. You can't use
this approach if your driver is not a monolithic - toplevel driver, because you
can't guarantee the process context in a multi-level driver stack if you are
not at the top.</span></p>

<p><b><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>Pending
IRP based approach:</span></b><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>
The application make a synchronous ioctl(IOCTL_REGISTER_EVENT) request. The
driver marks the device I/O control IRP pending and queues a timer DPC and
returns STATUS_PENDING. When the timer fires to indicate a hardware event, the
driver completes the pending IRP to notify the application about the hardware
event. </span></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>There are
two advantages of this method over the event based approach. One is that you
can send a message to the application along with your notification and other
one is that the driver routines don't have to be in the context of the process
that made the request. The application can do a synchronous or asynchronous
(overlapped) ioctl to the driver. </span></p>

<p><b><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>This
sample driver is not a PnP driver. This is a minimal driver meant to
demonstrate an OS feature. Neither it nor its sample programs are intended for
use in a production environment. Rather, they are intended for educational
purposes and as a skeleton driver.</span></b></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>This driver
will work on Windows NT 4.0, Windows 2000 and later operating systems.</span></p>

<h3><span style='font-family:"Verdana","sans-serif"'>BUILDING THE SAMPLE</span></h3>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>Click the
Free Build Environment or Checked Build Environment icon under Development Kits
program group to set basic environment variables. </span></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>Change to
the directory containing the device source code, such as CD Src\General\Event. </span></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>Run <b>build
-ceZ,</b> or use the macro <b>BLD</b>. This command invokes the Microsoft make
routines to build the components. If the build succeeds, you will find the
driver, event.sys, and the test application, event.exe, in the binary output directory specified for the build environment. You can get the output path from the buildxxx.log file. If the build
fails you can find errors and warnings in the buildxxx.err and buildxxx.err
respectively, where xxx is eithr chk or fre depending on the build environment.
</span></p>

<h3><span style='font-family:"Verdana","sans-serif"'>TESTING</span></h3>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>To test
this driver, copy the test app, event.exe, and the driver to the same
directory, and run the application. The application will automatically load the
driver if it's not already loaded and interact with the driver. When you exit
the app, the driver will be stopped, unloaded and removed. </span></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>c:\&gt;Event.exe
DELAY </span><0/1></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>where
DELAY equals the time to delay the Event signal in seconds.</span></p>

<p><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>Specify O
for IRP based notification and 1 for event based notification.</span></p>

<h3><span style='font-family:"Verdana","sans-serif"'>CODE TOUR</span></h3>

<h4><span style='font-family:"Verdana","sans-serif"'>File Manifest</span></h4>

<pre><u>File           Description</u></pre><pre>&nbsp;</pre><pre>&nbsp;</pre><pre>Event.htm      Documentation for the sample (this file)</pre><pre>&nbsp;</pre><pre>Exe\Sources    Generic file for building the test app</pre><pre>Exe\Eventtest.c Simple console test application</pre><pre>Exe\install.c  Code for registering and starting the driver service</pre><pre>&nbsp;</pre><pre>Wdm\Sources    Generic file for building the driver</pre><pre>Wdm\Event.h    Header file private to the driver</pre><pre>Wdm\public.h   Common header file between app and driver</pre><pre>Wdm\Event.c    Main driver file</pre><pre>Wdm\Event.rc   Driver resource file</pre><pre>&nbsp;</pre>

<p align=center style='text-align:center'><span style='font-size:10.0pt;
font-family:"Courier New"'><a href="#top"><span style='font-family:"Verdana","sans-serif"'>Top
of page</span></a></span><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>
</span></p>

<pre>&nbsp;</pre>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=624
 style='width:6.5in'>
 <tr style='height:1.5pt'>
  <td style='background:aqua;padding:.75pt .75pt .75pt .75pt;height:1.5pt'></td>
 </tr>
</table>

<pre>&nbsp;</pre><pre>&nbsp;</pre>

<p><span style='font-size:7.5pt;font-family:"MS Sans Serif","serif"'>© 1998
Microsoft Corporation</span><span style='font-size:10.0pt;font-family:"Verdana","sans-serif"'>
</span></p>

</div>

</body>

</html>

