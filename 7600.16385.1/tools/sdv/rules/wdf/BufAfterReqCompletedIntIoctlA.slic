/*
	Copyright (c) Microsoft Corporation.  All rights reserved.
	
	Summary: 
	This rule verifies that after a request is completed, its buffer cannot be accessed
	(inside EvtIoInternalDeviceControl callback only). The buffer was retrieved by calling 
	WdfRequestRetrieveInputBuffer or WdfRequestRetrieveOutputBuffer or 
	WdfRequestRetrieveUnsafeUserInputBuffer or WdfRequestRetrieveUnsafeUserOutputBuffer.
	    
	
	Description: 
	Within the EvtIoInternalDeviceControl I/O queue event callback function, the request buffer retrieved by calling
	WdfRequestRetrieveInputBuffer or WdfRequestRetrieveOutputBuffer or
	WdfRequestRetrieveUnsafeUserInputBuffer or WdfRequestRetrieveUnsafeUserOutputBuffer
	cannot be accessed after the WdfRequestComplete, WdfRequestCompleteWithInformation, or WdfRequestCompleteWithPriorityBoost 
	methods have been called on the request. The following possible buffer access functions are considered:
	RtlMoveMemory (with the buffer as a 1st and 2nd parameter),
	RtlZeroMemory, RtlCompareMemory, ZwReadFile, ZwWriteFile, 
	WDF_MEMORY_DESCRIPTOR_INIT_BUFFER, 
	WdfMemoryCreatePreallocated, WdfMemoryAssignBuffer, WdfMemoryCopyFromBuffer,
	WdfMemoryCopyToBuffer.
	
	Rule diagnostics: 
	"Request's Buffer cannot be accessed after the Request had been completed."      
	
	Note 1:  
	The following buffer access functions are considered in a separate
	rule: WdfRequestRetrieveInputBuffer, WdfRequestRetrieveUnsafeUserInputBuffer,
	WdfRequestRetrieveOutputBuffer, WdfRequestRetrieveUnsafeUserOutputBuffer.	

*/

#include "ntddk_slic.h"

state{
     enum {INIT1, IOCTL} s = INIT1;
     enum {INIT2, REQCOMPL} t = INIT2;
     int *cur_buffer = 0;             
} with guard (sdv_main, hrequest)


sdv_main.entry
{
  cur_buffer = hbuffer;
}
fun_WDF_IO_QUEUE_IO_INTERNAL_DEVICE_CONTROL.entry [guard $2]
{
   s = IOCTL;
}
fun_WDF_IO_QUEUE_IO_INTERNAL_DEVICE_CONTROL.exit [guard $2]
{
     s = INIT1;
     t = INIT2;
}
[sdv_WdfRequestComplete
,sdv_WdfRequestCompleteWithInformation
,sdv_WdfRequestCompleteWithPriorityBoost
].exit [guard $1]
{    
  if (s == IOCTL){
       t = REQCOMPL;                      
  }                      
}
[ sdv_WdfRequestRetrieveInputBuffer
, sdv_WdfRequestRetrieveUnsafeUserInputBuffer
, sdv_WdfRequestRetrieveOutputBuffer
, sdv_WdfRequestRetrieveUnsafeUserOutputBuffer
].exit [guard $1]
{
   if (t != REQCOMPL) {
          cur_buffer = *($3);  
      }
}
[sdv_RtlMoveMemory
,RtlCompareMemory
].entry
{
     if ((t == REQCOMPL) && (($1 == cur_buffer) || ($2 == cur_buffer))) {
       abort "Request's Buffer cannot be accessed after the Request had been completed.";
   }
}     
sdv_RtlZeroMemory.entry
{
     if ((t == REQCOMPL) && ($1 == cur_buffer)) {
       abort "Request's Buffer cannot be accessed after the Request had been completed.";
   }
} 
ZwReadFile.entry
{
     if ((t == REQCOMPL) && ($6 == cur_buffer)) {
       abort "Request's Buffer cannot be accessed after the Request had been completed.";
   }
} 
[sdv_WDF_MEMORY_DESCRIPTOR_INIT_BUFFER
,sdv_WdfMemoryCreatePreallocated
,sdv_WdfMemoryAssignBuffer
].entry
{
     if ((t == REQCOMPL) && ($2 == cur_buffer)) {
       abort "Request's Buffer cannot be accessed after the Request had been completed.";
   }
}   
[sdv_WdfMemoryCopyFromBuffer
,sdv_WdfMemoryCopyToBuffer
].entry
{
     if ((t == REQCOMPL) && ($3 == cur_buffer)) {
       abort "Request's Buffer cannot be accessed after the Request had been completed.";
   }
}       
