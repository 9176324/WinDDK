// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
df2a3420-3e68-6b1f-e452-606e9c85bab9     base // SRC=FxVerifierLock.hpp MJ= MN=
#typev  FxVerifierLock_hpp497 14     "%0Lock 0x%10!p! is being destroyed while owned by thread 0x%11!p!, Owning Object 0x%12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::~FxVerifierLock
{
this, ItemPtr -- 10
m_OwningThread, ItemPtr -- 11
m_ParentObject, ItemPtr -- 12
}
#typev  FxVerifierLock_hpp474 13     "%0Failed to allocate verifier lock, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxNonPagedObject::FxNonPagedObject
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d4cc4102-533a-06d8-fc50-2c81394a1763     base // SRC=FxDmaEnabler.cpp MJ= MN=
#typev  FxDmaEnabler_cpp364 14     "%0The maximum transfer lenght for WDFDMAENABLER %10!p! is reduced to %11!I64d! from %12!I64d! due to mapregisters limit"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaEnabler::InitializeResources
{
GetHandle(), ItemPtr -- 10
Config->MaximumLength, ItemLongLong -- 11
AdapterInfo->MaximumFragmentLength, ItemLongLong -- 12
}
#typev  FxDmaEnabler_cpp355 13     "%0WDFDMAENABLER %10!p!, profile %11!s! DmaAdapterObject %12!p!, MapRegisters %13!d!, MaximumFragmentLength %14!I64d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaEnabler::InitializeResources
{
GetHandle(), ItemPtr -- 10
Config->Profile, ItemListLong(WdfDmaProfileInvalid,WdfDmaProfilePacket,WdfDmaProfileScatterGather,WdfDmaProfilePacket64,WdfDmaProfileScatterGather64,WdfDmaProfileScatterGatherDuplex,WdfDmaProfileScatterGather64Duplex) -- 11
AdapterInfo->AdapterObject, ItemPtr -- 12
AdapterInfo->NumberOfMapRegisters, ItemLong -- 13
AdapterInfo->MaximumFragmentLength, ItemLongLong -- 14
}
#typev  FxDmaEnabler_cpp340 12     "%0CalculateScatterGatherList failed for WDFDMAENABLER %10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaEnabler::InitializeResources
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaEnabler_cpp320 11     "%0Unable to allocate DmaAdapter object for WDFDMAENABLER %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaEnabler::InitializeResources
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaEnabler_cpp455 16     "%0WDFDMAENABLER %10!p!: PowerUp: %11!s! failed %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaEnabler::PowerUp
{
GetHandle(), ItemPtr -- 10
tag, ItemListLong(FxEvtDmaEnablerInvalid,FxEvtDmaEnablerFill,FxEvtDmaEnablerFlush,FxEvtDmaEnablerEnable,FxEvtDmaEnablerDisable,FxEvtDmaEnablerSelfManagedIoStart,FxEvtDmaEnablerSelfManagedIoStop) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDmaEnabler_cpp415 15     "%0WDFDMAENABLER %10!p!: PowerUp notification"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaEnabler::PowerUp
{
GetHandle(), ItemPtr -- 10
}
#typev  FxDmaEnabler_cpp516 18     "%0WDFDMAENABLER %10!p!: PowerDown: %11!s! failed %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaEnabler::PowerDown
{
GetHandle(), ItemPtr -- 10
tag, ItemListLong(FxEvtDmaEnablerInvalid,FxEvtDmaEnablerFill,FxEvtDmaEnablerFlush,FxEvtDmaEnablerEnable,FxEvtDmaEnablerDisable,FxEvtDmaEnablerSelfManagedIoStart,FxEvtDmaEnablerSelfManagedIoStop) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDmaEnabler_cpp475 17     "%0WDFDMAENABLER %10!p!: PowerDown notification"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaEnabler::PowerDown
{
GetHandle(), ItemPtr -- 10
}
#typev  FxDmaEnabler_cpp98 10     "%0Unable to allocate DmaEnablerList for WDFDEVICE %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaEnabler::Initialize
{
Device->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b8ad0f5f-6d64-1bbf-11a7-753d9fc10c82     base // SRC=FxDmaEnablerAPI.cpp MJ= MN=
#typev  FxDmaEnablerAPI_cpp271 15     "%0Invalid value for Dma direction %10!d!, %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerGetFragmentLength
{
DmaDirection, ItemLong -- 10
DmaEnabler, ItemPtr -- 11
}
#typev  FxDmaEnablerAPI_cpp314 16     "%0Invalid value for Dma direction %10!d!, %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerWdmGetDmaAdapter
{
DmaDirection, ItemLong -- 10
DmaEnabler, ItemPtr -- 11
}
#typev  FxDmaEnablerAPI_cpp102 11     "%0DMA Profile value %10!d! is unknown, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerCreate
{
Config->Profile, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaEnablerAPI_cpp129 13     "%0Could not allocate memory for a WDFDMAENABLER, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxDmaEnablerAPI_cpp112 12     "%0Config MaximumLength of zero is invalid, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxDmaEnablerAPI_cpp84 10     "%0WDF_DMA_ENABLER_CONFIG Size 0x%10!x!, expected 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerCreate
{
Config->Size, ItemLong -- 10
sizeof(WDF_DMA_ENABLER_CONFIG), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     base // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDmaEnablerCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b8ad0f5f-6d64-1bbf-11a7-753d9fc10c82     base // SRC=FxDmaEnablerAPI.cpp MJ= MN=
#typev  FxDmaEnablerAPI_cpp228 14     "%0Cannot set MaximumElements of zero on WDFDMAENABLER %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaEnablerSetMaximumScatterGatherElements
{
DmaEnabler, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     base // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDmaEnablerSetMaximumScatterGatherElements
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
70d3cae8-c158-bb7a-d2ed-276210821c92     base // SRC=FxDmaTransaction.cpp MJ= MN=
#typev  FxDmaTransaction_cpp69 10     "%0WDFDMATRANSACTION %10!p! state %11!s! is invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::Dispose
{
GetHandle(), ItemPtr -- 10
m_State, ItemListLong(FxDmaTransactionStateInvalid,FxDmaTransactionStateCreated,FxDmaTransactionStateInitialized,FxDmaTransactionStateTransfer,FxDmaTransactionStateTransferCompleted,FxDmaTransactionStateTransferFailed,FxDmaTransactionStateReleased,FxDmaTransactionStateDeleted) -- 11
}
#typev  FxDmaTransaction_cpp173 14     "%0WDFDMATRANSACTION %10!p! state %11!s! is invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::Execute
{
GetHandle(), ItemPtr -- 10
m_State, ItemListLong(FxDmaTransactionStateInvalid,FxDmaTransactionStateCreated,FxDmaTransactionStateInitialized,FxDmaTransactionStateTransfer,FxDmaTransactionStateTransferCompleted,FxDmaTransactionStateTransferFailed,FxDmaTransactionStateReleased,FxDmaTransactionStateDeleted) -- 11
}
#typev  FxDmaTransaction_cpp350 18     "%0Exit WDFDMATRANSACTION %10!p! Transitioned(%11!s!)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::DmaCompleted
{
dmaTransaction, ItemPtr -- 10
hasTransitioned, ItemListByte(FALSE,TRUE) -- 11
}
#typev  FxDmaTransaction_cpp256 17     "%0WDFDMATRANSACTION %10!p! Transfered Length %11!I64d! can't be more than the length asked to transfer %12!I64d! %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::DmaCompleted
{
dmaTransaction, ItemPtr -- 10
TransferredLength, ItemLongLong -- 11
m_CurrentFragmentLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransaction_cpp244 16     "%0WDFDMATRANSACTION %10!p! state %11!s! is invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::DmaCompleted
{
dmaTransaction, ItemPtr -- 10
m_State, ItemListLong(FxDmaTransactionStateInvalid,FxDmaTransactionStateCreated,FxDmaTransactionStateInitialized,FxDmaTransactionStateTransfer,FxDmaTransactionStateTransferCompleted,FxDmaTransactionStateTransferFailed,FxDmaTransactionStateReleased,FxDmaTransactionStateDeleted) -- 11
}
#typev  FxDmaTransaction_cpp235 15     "%0Enter WDFDMATRANSACTION %10!p!, lenght %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::DmaCompleted
{
dmaTransaction, ItemPtr -- 10
(ULONG)TransferredLength, ItemLong -- 11
}
#typev  FxDmaTransaction_cpp374 19     "%0WDFDMATRANSACTION %10!p! is already released, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::ReleaseForReuse
{
GetHandle(), ItemPtr -- 10
STATUS_SUCCESS, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp463 21     "%0Unable to allocate memory for SG List, WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::_Create
{
pTransaction->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp442 20     "%0Could not allocate memory for WDFTRANSACTION, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxDmaTransaction_cpp564 23     "%0WDFDMATRANSACTION %10!p! for MDL %11!p! is more fragmented (%12!d!) than the limit (%13!I64d!) specified by the driver, %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::InitializeResources
{
GetHandle(), ItemPtr -- 10
nextMdl, ItemPtr -- 11
mapRegistersRequired, ItemLong -- 12
m_DmaEnabler->m_MaxSGElements, ItemLongLong -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxDmaTransaction_cpp554 22     "%0CalculateScatterGatherList failed for WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::InitializeResources
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp782 29     "%0Exit WDFDMATRANSACTION %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::_AdapterListControl
{
dmaTransaction, ItemPtr -- 10
}
#typev  FxDmaTransaction_cpp751 28     "%0Enter WDFDMATRANSACTION %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::_AdapterListControl
{
dmaTransaction, ItemPtr -- 10
}
#typev  FxDmaTransaction_cpp1033 30     "%0Could not allocate memory for WDFTRANSACTION, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxDmaTransaction_cpp1136 34     "%0Exit WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::StartTransfer
{
dmaTransaction, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp1120 33     "%0AllocateAdapterChannel failed for WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::StartTransfer
{
dmaTransaction, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp1098 32     "%0Only one transaction can be queued at one time on a packet based WDFDMAENABLER %10!p! %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::StartTransfer
{
m_DmaEnabler->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp1091 31     "%0Enter WDFDMATRANSACTION %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::StartTransfer
{
dmaTransaction, ItemPtr -- 10
}
#typev  FxDmaTransaction_cpp1260 36     "%0Exit WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::StageTransfer
{
dmaTransaction, ItemPtr -- 10
STATUS_SUCCESS, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp1207 35     "%0Enter WDFDMATRANSACTION %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::StageTransfer
{
dmaTransaction, ItemPtr -- 10
}
#typev  FxDmaTransaction_cpp1288 37     "%0FlushAdapterBuffers on WDFDMATRANSACTION %10!p! failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaPacketTransaction::TransferCompleted
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp152 13     "%0Exit WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::Initialize
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp116 12     "%0WDFDMATRANSACTION %10!p! state %11!s! is invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::Initialize
{
GetHandle(), ItemPtr -- 10
m_State, ItemListLong(FxDmaTransactionStateInvalid,FxDmaTransactionStateCreated,FxDmaTransactionStateInitialized,FxDmaTransactionStateTransfer,FxDmaTransactionStateTransferCompleted,FxDmaTransactionStateTransferFailed,FxDmaTransactionStateReleased,FxDmaTransactionStateDeleted) -- 11
}
#typev  FxDmaTransaction_cpp108 11     "%0Enter WDFDMATRANSACTION %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaTransactionBase::Initialize
{
GetHandle(), ItemPtr -- 10
}
#typev  FxDmaTransaction_cpp722 27     "%0Exit WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::StageTransfer
{
dmaTransaction, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp704 26     "%0Build or GetScatterGatherList failed for WDFDMATRANSACTION %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::StageTransfer
{
dmaTransaction, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransaction_cpp670 25     "%0WDFDMATRANSACTION %10!p! for MDL %11!p! is more fragmented (%12!d!) than the limit (%13!I64d!) specified by the driver, %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::StageTransfer
{
dmaTransaction, ItemPtr -- 10
m_CurrentFragmentMdl, ItemPtr -- 11
mapRegistersRequired, ItemLong -- 12
m_DmaEnabler->m_MaxSGElements, ItemLongLong -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxDmaTransaction_cpp629 24     "%0Enter WDFDMATRANSACTION %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDMA FUNC=FxDmaScatterGatherTransaction::StageTransfer
{
GetHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
faa097ce-614f-ba20-5d9f-99f5d1999db5     base // SRC=FxDmaTransactionAPI.cpp MJ= MN=
#typev  FxDmaTransactionAPI_cpp316 19     "%0WDFTANSACTION 0x%10!p! initialization failed: %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
DmaTransaction, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransactionAPI_cpp296 18     "%0WDFREQUEST %10!p! transfer length (%11!d!) is out of bounds of MDL Byte count (%12!d!), %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
Request, ItemPtr -- 10
reqLength, ItemLong -- 11
length, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransactionAPI_cpp277 17     "%0Zero length request, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxDmaTransactionAPI_cpp268 16     "%0Couldn't retrieve mdl from WDFREQUEST 0x%10!p! for WDFTRANSACTION 0x%11!p! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
Request, ItemPtr -- 10
DmaTransaction, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDmaTransactionAPI_cpp144 11     "%0Dma direction %10!s! of WDFTRANSACTION 0x%11!p! doesn't match with the WDFREQUEST 0x%12!p! type %13!s! %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
DmaDirection, ItemEnum(_WDF_DMA_DIRECTION) -- 10
DmaTransaction, ItemPtr -- 11
Request, ItemPtr -- 12
stack->MajorFunction, ItemEnum(_WDF_REQUEST_TYPE) -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxDmaTransactionAPI_cpp164 12     "%0Dma direction %10!s! of WDFTRANSACTION 0x%11!p! doesn't match with the WDFREQUEST 0x%12!p! type %13!s! %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
DmaDirection, ItemEnum(_WDF_DMA_DIRECTION) -- 10
DmaTransaction, ItemPtr -- 11
Request, ItemPtr -- 12
stack->MajorFunction, ItemEnum(_WDF_REQUEST_TYPE) -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxDmaTransactionAPI_cpp208 13     "%0Dma direction %10!s! of WDFTRANSACTION 0x%11!p! doesn't match with WDFREQUEST 0x%12!p! ioctl type METHOD_IN_DIRECT %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
DmaDirection, ItemEnum(_WDF_DMA_DIRECTION) -- 10
DmaTransaction, ItemPtr -- 11
Request, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransactionAPI_cpp232 14     "%0Dma direction %10!s! of WDFTRANSACTION 0x%11!p! doesn't match with WDFREQUEST 0x%12!p! ioctl type METHOD_OUT_DIRECT %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
DmaDirection, ItemEnum(_WDF_DMA_DIRECTION) -- 10
DmaTransaction, ItemPtr -- 11
Request, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransactionAPI_cpp251 15     "%0Invalid ioctl code in WDFREQUEST 0x%10!p! %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransactionAPI_cpp117 10     "%0Initialization of WDFDMATRANSACTION 0x%10!p! using WDFREQUEST %11!p!, DmaDirection 0x%12!x! is an invalid value, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitializeUsingRequest
{
DmaTransaction, ItemPtr -- 10
Request, ItemPtr -- 11
DmaDirection, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransactionAPI_cpp398 22     "%0VirtualAddress %10!p! is not within the Mdl bounds, StartVA (%11!p!) + ByteCount (0x%12!x!), %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitialize
{
VirtualAddress, ItemPtr -- 10
pVA, ItemPtr -- 11
mdlLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransactionAPI_cpp443 24     "%0WDFTANSACTION 0x%10!p! initialization failed: %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitialize
{
DmaTransaction, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDmaTransactionAPI_cpp424 23     "%0VirtualAddress+Length (%10!p!+%11!I64d!) is out of bounds of MDL VA + MDL Byte count (max address is %12!p!). Possibly a chained MDL, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitialize
{
VirtualAddress, ItemPtr -- 10
Length, ItemLongLong -- 11
WDF_PTR_ADD_OFFSET(pVA. mdlLength), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDmaTransactionAPI_cpp382 21     "%0Initialization of WDFDMATRANSACTION 0x%10!p!,DmaDirection 0x%11!x! is an invalid value, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitialize
{
DmaTransaction, ItemPtr -- 10
DmaDirection, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDmaTransactionAPI_cpp373 20     "%0Can't initialize WDFDMATRANSACTION 0x%10!p! with zero length transfer"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfDmaTransactionInitialize
{
DmaTransaction, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5216ddbe-96b7-ed8b-6c44-595ad185f070     base // SRC=FxCommonBuffer.cpp MJ= MN=
#typev  FxCommonBuffer_cpp122 12     "%0WDFDMAENABLER %10!p! AllocateCommonBuffer:  overflow when  converting from ULongLong %11!I64d! to ULong"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxCommonBuffer::AllocateCommonBuffer
{
GetObjectHandle(), ItemPtr -- 10
offset, ItemLongLong -- 11
}
#typev  FxCommonBuffer_cpp112 11     "%0WDFDMAENABLER %10!p! AllocateCommonBuffer:  overflow when subtracting RawLA %11!I64x! from AlignedLA %12!I64x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxCommonBuffer::AllocateCommonBuffer
{
GetObjectHandle(), ItemPtr -- 10
m_BufferRawLA.QuadPart, ItemLongLongX -- 11
m_BufferAlignedLA.QuadPart, ItemLongLongX -- 12
}
#typev  FxCommonBuffer_cpp85 10     "%0WDFDMAENABLER %10!p! AllocateCommonBuffer:  overflow when adding Length %11!I64d! + Alignment %12!I64d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=FxCommonBuffer::AllocateCommonBuffer
{
GetObjectHandle(), ItemPtr -- 10
Length, ItemLongLong -- 11
m_Alignment, ItemLongLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     base // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxCommonBuffer::AllocateCommonBuffer
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ba2611a6-6407-21b6-c945-f2f480aba289     base // SRC=FxCommonBufferAPI.cpp MJ= MN=
#typev  FxCommonBufferAPI_cpp103 11     "%0Could not allocate memory for a WDFCOMMONBUFFER, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfCommonBufferCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxCommonBufferAPI_cpp81 10     "%0Length is 0, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfCommonBufferCreate
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     base // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfCommonBufferCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ba2611a6-6407-21b6-c945-f2f480aba289     base // SRC=FxCommonBufferAPI.cpp MJ= MN=
#typev  FxCommonBufferAPI_cpp214 14     "%0Could not allocate memory for a WDFCOMMONBUFFER, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfCommonBufferCreateWithConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxCommonBufferAPI_cpp195 13     "%0Length is 0, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfCommonBufferCreateWithConfig
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     base // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfCommonBufferCreateWithConfig
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ba2611a6-6407-21b6-c945-f2f480aba289     base // SRC=FxCommonBufferAPI.cpp MJ= MN=
#typev  FxCommonBufferAPI_cpp176 12     "%0WDF_COMMON_BUFFER_CONFIG Size 0x%10!x!, expected 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDMA FUNC=imp_WdfCommonBufferCreateWithConfig
{
Config->Size, ItemLong -- 10
sizeof(WDF_COMMON_BUFFER_CONFIG), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5260cee9-3bc5-0a10-29e6-305743a13b1a     general // SRC=FxIoTarget.cpp MJ= MN=
#typev  FxIoTarget_cpp118 10     "%0WDFIOTARGET %10!p!, setting Dispose event %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::PrintDisposeMessage
{
GetObjectHandle(), ItemPtr -- 10
m_DisposeEvent->GetEvent(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp134 11     "%0WDFIOTARGET %10!p!, Waiting on Dispose event %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::WaitForDisposeEvent
{
GetObjectHandle(), ItemPtr -- 10
m_DisposeEvent->GetEvent(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp467 16     "%0WDFIOTARGET %10!p!, WDFREQUEST %11!p! is being canceled on another thread, allowing other thread to complete request, not resending"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::DrainPendedRequestsLocked
{
GetObjectHandle(), ItemPtr -- 10
pRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp673 18     "%0WDFIOTARGET %10!p! is already in the process of being stopped from another thread. Driver must wait for the first WdfIoTargetStop to complete before calling it again."      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::GotoStopState
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp649 17     "%0WDFIOTARGET %10!p! stopped, but is current in the %11!s! state, not started or stopped"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::GotoStopState
{
GetHandle(), ItemPtr -- 10
m_State, ItemEnum(_WDF_IO_TARGET_STATE) -- 11
}
#typev  FxIoTarget_cpp764 19     "%0WDFIOTARGET %10!p! stopped"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::Stop
{
GetHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp788 20     "%0WDFIOTARGET %10!p! is being deleted while it is being stopped by another thread. Driver must wait for WdfIoTargetStop to complete before deleting the object."      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::GotoRemoveState
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp940 21     "%0Init WDFIOTARGET %10!p!, unexpected NULL, m_InStackDevice %11!p!, m_TargetDevice %12!p!, m_TargetPdo %13!p!, m_Driver %14!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::Init
{
GetObjectHandle(), ItemPtr -- 10
m_InStackDevice, ItemPtr -- 11
m_TargetDevice, ItemPtr -- 12
m_TargetPdo, ItemPtr -- 13
m_Driver, ItemPtr -- 14
}
#typev  FxIoTarget_cpp1695 35     "%0WDFIOTARGET %10!p!, WDFREQUEST %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::RemoveCompletedRequestLocked
{
GetObjectHandle(), ItemPtr -- 10
Request->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp2355 52     "%0Could not retrieve io buffer as a PVOID, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2290 50     "%0Could not retrieve io buffer, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2277 49     "%0Could not allocate common buffer"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoRequest
{
}
#typev  FxIoTarget_cpp2337 51     "%0Could not retrieve io buffer as a PMDL, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2365 53     "%0Trying to format closed WDFIOTARGET %10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoRequest
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTarget_cpp2231 48     "%0could not allocate context for request"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoRequest
{
}
#typev  FxIoTarget_cpp2531 57     "%0Could not retrieve output buffer, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2516 56     "%0Could not retrieve input buffer, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2504 55     "%0Could not allocate common buffer"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
}
#typev  FxIoTarget_cpp2600 59     "%0Could not retrieve output buffer as a PMDL, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2568 58     "%0Could not retrieve input buffer as a PVOID, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2625 61     "%0Could not retrieve input buffer as a PVOID, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2613 60     "%0Could not retrieve output buffer as a PVOID, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTarget_cpp2441 54     "%0Could not allocate context for request"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatIoctlRequest
{
}
#typev  FxIoTarget_cpp2714 63     "%0Could not retrieve buffer %10!d!, status %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatInternalIoctlOthersRequest
{
i+1, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTarget_cpp2679 62     "%0Could not allocate context for request"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::FormatInternalIoctlOthersRequest
{
}
#typev  FxIoTarget_cpp2845 65     "%0Cancelling pending I/O on WDFIOTARGET %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::CancelSentIo
{
GetHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp328 15     "%0WDFIOTARGET %10!p! is being started while it is being stopped by another thread. WdfIoTargetStart and WdfIoTargetStop must be called synchronously. After the driver calls one of these functions, it must not call the other function before the first one returns."      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::GotoStartState
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1916 38     "%0WDFIOTARGET %10!p!, setting stop event %11!p! in timer callback"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::TimerCallback
{
GetObjectHandle(), ItemPtr -- 10
m_SentIoEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp1908 37     "%0WDFREQUEST %10!p! completed in timer callback"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::TimerCallback
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1833 36     "%0WDFIOTARGET %10!p!, WDFREQUEST %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::TimerCallback
{
GetObjectHandle(), ItemPtr -- 10
Request->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp1962 40     "%0WDFIOTARGET %10!p!, setting stop event %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::CompleteCanceledRequest
{
GetObjectHandle(), ItemPtr -- 10
m_SentIoEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp1956 39     "%0WDFREQUEST %10!p! completed in from cancel"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::CompleteCanceledRequest
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp2041 43     "%0WDFIOTARGET %10!p!, setting stop event %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::HandleFailedResubmit
{
GetObjectHandle(), ItemPtr -- 10
m_SentIoEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp2035 42     "%0WDFREQUEST %10!p! completed in completion routine"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::HandleFailedResubmit
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1994 41     "%0WDFREQUEST %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::HandleFailedResubmit
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp2139 47     "%0WDFIOTARGET %10!p!, setting stop event %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::RequestCompletionRoutine
{
GetObjectHandle(), ItemPtr -- 10
m_SentIoEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp2132 46     "%0WDFREQUEST %10!p! completed in completion routine"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::RequestCompletionRoutine
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp2123 45     "%0WDFREQUEST %10!p! deferring completion due to outstanding completion references"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::RequestCompletionRoutine
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp2073 44     "%0WDFREQUEST %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::RequestCompletionRoutine
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1361 31     "%0Starting timer on WDFREQUEST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1317 30     "%0Pending WDFREQUEST %10!p!, WDFIOTARGET %11!p! is paused, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTarget_cpp1183 29     "%0failing WDFREQUEST %10!p!, WDFIOTARGET %11!p! not accepting requests, state %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
m_State, ItemEnum(_WDF_IO_TARGET_STATE) -- 12
}
#typev  FxIoTarget_cpp1149 28     "%0ignoring WDFIOTARGET %10!p! state, sending WDFREQUEST %11!p!, state %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
GetObjectHandle(), ItemPtr -- 10
Request->GetTraceObjectHandle(), ItemPtr -- 11
m_State, ItemEnum(_WDF_IO_TARGET_STATE) -- 12
}
#typev  FxIoTarget_cpp1137 27     "%0WDFIOTARGET %10!p! state %11!s!, sending WDFREQUEST %12!p! cannot ignore current state, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
GetObjectHandle(), ItemPtr -- 10
m_State, ItemEnum(_WDF_IO_TARGET_STATE) -- 11
Request->GetTraceObjectHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxIoTarget_cpp1110 26     "%0WDFREQUEST %10!p!, could not create timer, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTarget_cpp1078 25     "%0WDFREQUEST %10!p!, PIRP %11!p! does not have enough stack locations %12!d! for this WDFIOTARGET %13!p! (requires %14!d! locations),  %15!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
irp, ItemPtr -- 11
irp->CurrentLocation - 1, ItemLong -- 12
GetHandle(), ItemPtr -- 13
m_TargetStackSize, ItemLong -- 14
status, ItemNTSTATUS -- 15
}
#typev  FxIoTarget_cpp1061 24     "%0WDFREQUEST %10!p! is already pending on a WDFIOTARGET"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1051 23     "%0WDFREQUEST %10!p! has not been formatted, cannot send, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTarget_cpp1020 22     "%0WDFREQUEST %10!p! already sent to a target"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitLocked
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp1500 34     "%0Sending WDFREQUEST %10!p!, Irp %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitSync
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
Request->GetSubmitIrp(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp1486 33     "%0WDFREQUEST %10!p!, Action 0x%11!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitSync
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
action, ItemLong -- 11
}
#typev  FxIoTarget_cpp1430 32     "%0WDFIOTARGET %10!p!, WDFREQUEST %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitSync
{
GetObjectHandle(), ItemPtr -- 10
Request->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTarget_cpp2753 64     "%0Pended WDFREQUEST %10!p! canceled"      //   GLOBALS=pRequest->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::_RequestCancelled
{
pRequest->GetTraceObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp2882 66     "%0Ignoring WDFIOTARGET %10!p! state to send request"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitSyncRequestIgnoreTargetState
{
GetHandle(), ItemPtr -- 10
}
#typev  FxIoTarget_cpp229 13     "%0Completing Pended WDFREQUEST %10!p!, Irp %11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitPendedRequest
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
irp, ItemPtr -- 11
irp->IoStatus.Status, ItemNTSTATUS -- 12
}
#typev  FxIoTarget_cpp211 12     "%0Sending Pended WDFREQUEST %10!p!, Irp %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::SubmitPendedRequest
{
Request->GetTraceObjectHandle(), ItemPtr -- 10
irp, ItemPtr -- 11
}
#typev  FxIoTarget_cpp294 14     "%0WDFIOTARGET %10!p! started status %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTarget::Start
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
73cb0a8e-2503-8d66-43eb-b775ed5588d7     general // SRC=FxIoTargetRemote.cpp MJ= MN=
#typev  FxIoTargetRemote_cpp149 13     "%0Commit failed for target, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetRemote_cpp126 12     "%0Could not allocate memory for target, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetRemote_cpp109 11     "%0Attributes->ParentObject 0x%10!p! ancestor is WDFDEVICE %11!p!, but not the same WDFDEVICE 0x%12!p! passed to WdfIoTargetCreate, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_Create
{
Attributes->ParentObject, ItemPtr -- 10
pSearchDevice->GetHandle(), ItemPtr -- 11
Device->GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxIoTargetRemote_cpp98 10     "%0Attributes->ParentObject 0x%10!p! must have WDFDEVICE as an eventual ancestor, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_Create
{
Attributes->ParentObject, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetRemote_cpp839 37     "%0WDFIOTARGET %10!p! closing handle %11!p! on close"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
pointers.TargetHandle, ItemPtr -- 11
}
#typev  FxIoTargetRemote_cpp831 36     "%0WDFIOTARGET %10!p! derefing FileObj %11!p! on close"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
pointers.TargetFileObject, ItemPtr -- 11
}
#typev  FxIoTargetRemote_cpp822 35     "%0WDFIOTARGET %10!p! derefing PDO %11!p! on close"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
pointers.TargetPdo, ItemPtr -- 11
}
#typev  FxIoTargetRemote_cpp786 34     "%0WDFIOTARGET %10!p!, waiting for stop to complete"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp722 33     "%0WDFIOTARGET %10!p!:  fileobj %11!p!, devobj %12!p!, handle %13!p!, notify handle %14!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
m_TargetFileObject, ItemPtr -- 11
m_TargetDevice, ItemPtr -- 12
m_TargetHandle, ItemPtr -- 13
m_TargetNotifyHandle, ItemPtr -- 14
}
#typev  FxIoTargetRemote_cpp712 32     "%0Closing WDFIOTARGET %10!p! which is not open"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp694 31     "%0Closing WDFIOTARGET %10!p!, reason:   close"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp683 30     "%0Closing WDFIOTARGET %10!p!, reason:   query remove"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp675 29     "%0Closing WDFIOTARGET %10!p!, reason:   delete"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp661 28     "%0Closing WDFIOTARGET %10!p! which is opening, waiting on event %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
m_OpenedEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxIoTargetRemote_cpp634 27     "%0enter:  WDFIOTARGET %10!p!, reason %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Close
{
GetObjectHandle(), ItemPtr -- 10
Reason, ItemLong -- 11
}
#typev  FxIoTargetRemote_cpp852 38     "%0WDFIOTARGET %10!p! cleared pointers %11!p! state %12!s!, open state %13!d!, pdo %14!p!, fileobj %15!p!, handle %16!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::ClearTargetPointers
{
GetObjectHandle(), ItemPtr -- 10
m_ClearedPointers, ItemPtr -- 11
m_State, ItemEnum(_WDF_IO_TARGET_STATE) -- 12
m_OpenState, ItemLong -- 13
m_TargetPdo, ItemPtr -- 14
m_TargetFileObject, ItemPtr -- 15
m_TargetHandle, ItemPtr -- 16
}
#typev  FxIoTargetRemote_cpp577 26     "%0WDFIOTARGET %10!p! could not transition to started state, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetRemote_cpp546 25     "%0WDFIOTARGET %10!p!, could not register pnp notification, %11!s! not treated as an error"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetRemote_cpp494 24     "%0Unable to allocate memory for IRP WDFIOTARGET %10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetRemote_cpp410 23     "%0ZwCreateFile for WDFIOTARGET %10!p! returned status %11!s!, info 0x%12!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
(ULONG) ioStatus.Information, ItemLong -- 12
}
#typev  FxIoTargetRemote_cpp402 22     "%0WDFIOTARGET %10!p!, could not convert handle %11!p! to fileobject, status %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
m_TargetHandle, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTargetRemote_cpp393 21     "%0WDFIOTARGET %10!p!, could not convert filobj %11!p! to devobj"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
m_TargetFileObject, ItemPtr -- 11
}
#typev  FxIoTargetRemote_cpp372 20     "%0ZwCreateFile for WDFIOTARGET %10!p! returned status %11!s!, info 0x%12!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
(ULONG) ioStatus.Information, ItemLong -- 12
}
#typev  FxIoTargetRemote_cpp276 19     "%0Opening WDFIOTARGET %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp269 18     "%0Opening an already open WDFIOTARGET %10!p!, open state %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
m_OpenState, ItemLong -- 11
}
#typev  FxIoTargetRemote_cpp259 17     "%0Opening WDFIOTARGET %10!p! which is removed, state %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
m_State, ItemLong -- 11
}
#typev  FxIoTargetRemote_cpp241 16     "%0Could not allocate memory for target name for WDFIOTARGET %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp228 15     "%0Could not allocate memory for target name for WDFIOTARGET %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp201 14     "%0Reopen only supported if the open type is WdfIoTargetOpenByName WDFIOTARGET %10!p! %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::Open
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetRemote_cpp991 44     "%0WDFIOTARGET %10!p!: remove canceled, default action (reopen)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_PlugPlayNotification
{
pThis->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp981 43     "%0WDFIOTARGET %10!p!: remove canceled notification"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_PlugPlayNotification
{
pThis->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp968 42     "%0WDFIOTARGET %10!p!: remove complete, default action (close)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_PlugPlayNotification
{
pThis->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp956 41     "%0WDFIOTARGET %10!p!: remove complete notification"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_PlugPlayNotification
{
pThis->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp943 40     "%0WDFIOTARGET %10!p!: query remove, default action (close for QR)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_PlugPlayNotification
{
pThis->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoTargetRemote_cpp928 39     "%0WDFIOTARGET %10!p!: query remove notification"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetRemote::_PlugPlayNotification
{
pThis->GetObjectHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp214 13     "%0OpenParams %10!p! TargetFileObject is NULL but a state callback (query remove %11!p!, remove canceled %12!p!, remove complete %13!p!) was specified, %14!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetValidateOpenParams
{
OpenParams, ItemPtr -- 10
OpenParams->EvtIoTargetQueryRemove, ItemPtr -- 11
OpenParams->EvtIoTargetRemoveCanceled, ItemPtr -- 12
OpenParams->EvtIoTargetRemoveComplete, ItemPtr -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxIoTargetAPI_cpp201 12     "%0Expected non NULL TargetDeviceObject in OpenParams, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetValidateOpenParams
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetAPI_cpp232 14     "%0Expected valid OpenParams TargetDeviceName string, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetValidateOpenParams
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetAPI_cpp245 15     "%0OpenParams Type (%10!d!) incorrect, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetValidateOpenParams
{
OpenParams->Type, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp187 11     "%0OpenParams size (%10!d!) incorrect, expected %11!d!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetValidateOpenParams
{
OpenParams->Size, ItemLong -- 10
sizeof(WDF_IO_TARGET_OPEN_PARAMS), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTargetAPI_cpp638 24     "%0exit WDFIOTARGET 0x%10!p!, WDM DevObj 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetDeviceObject
{
IoTarget, ItemPtr -- 10
pDevice, ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp633 23     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetDeviceObject
{
IoTarget, ItemPtr -- 10
}
#typev  FxIoTargetAPI_cpp682 26     "%0exit WDFIOTARGET 0x%10!p!, WDM PDO 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetPhysicalDevice
{
IoTarget, ItemPtr -- 10
pPdo, ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp677 25     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetPhysicalDevice
{
IoTarget, ItemPtr -- 10
}
#typev  FxIoTargetAPI_cpp726 28     "%0exit WDFIOTARGET 0x%10!p!, WDM FileObj 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetFileObject
{
IoTarget, ItemPtr -- 10
pFile, ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp721 27     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetFileObject
{
IoTarget, ItemPtr -- 10
}
#typev  FxIoTargetAPI_cpp772 30     "%0exit WDFIOTARGET 0x%10!p!, WDM file handle 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetFileHandle
{
IoTarget, ItemPtr -- 10
handle, ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp767 29     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetWdmGetTargetFileHandle
{
IoTarget, ItemPtr -- 10
}
#typev  FxIoTargetAPI_cpp1021 38     "%0exit WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIo
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTargetAPI_cpp990 37     "%0invalid memory offsets, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIo
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetAPI_cpp972 36     "%0enter: WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, MJ code 0x%12!x!, WDFMEMORY 0x%13!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIo
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
MajorCode, ItemLong -- 12
IoBuffer, ItemPtr -- 13
}
#typev  FxIoTargetAPI_cpp1443 48     "%0Exit WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIoctl
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTargetAPI_cpp1393 47     "%0Invalid output memory offsets, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIoctl
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetAPI_cpp1372 46     "%0Invalid input memory offsets, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIoctl
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoTargetAPI_cpp1353 45     "%0enter: WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, IOCTL 0x%12!x!, internal %13!d!, input WDFMEMORY 0x%14!p!, output WDFMEMORY 0x%15!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetFormatIoctl
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
Ioctl, ItemLong -- 12
Internal, ItemLong -- 13
InputBuffer, ItemPtr -- 14
OutputBuffer, ItemPtr -- 15
}
#typev  FxIoTargetAPI_cpp1859 57     "%0Invalid OtherArg%10!d! memory offsets, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetFormatRequestForInternalIoctlOthers
{
i+1, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1877 58     "%0Exit: WDFIOTARGET %10!p!, WDFREQUEST %11!p!, IOCTL 0x%12!x!, Arg Handles %13!p! %14!p! %15!p!, status %16!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetFormatRequestForInternalIoctlOthers
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
Ioctl, ItemLong -- 12
OtherArg1, ItemPtr -- 13
OtherArg2, ItemPtr -- 14
OtherArg4, ItemPtr -- 15
status, ItemNTSTATUS -- 16
}
#typev  FxIoTargetAPI_cpp1828 56     "%0Enter: WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, IOCTL 0x%12!x!, WDFMEMORY 1 0x%13!p!, 2 0x%14!p!, 3 0x%15!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetFormatRequestForInternalIoctlOthers
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
Ioctl, ItemLong -- 12
OtherArg1, ItemPtr -- 13
OtherArg2, ItemPtr -- 14
OtherArg4, ItemPtr -- 15
}
#typev  FxIoTargetAPI_cpp111 10     "%0Action %10!d! undefined or out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetStop
{
Action, ItemLong -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetStop
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp300 16     "%0WDFDEVICE 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetCreate
{
Device, ItemPtr -- 10
}
#typev  FxIoTargetAPI_cpp385 18     "%0exit WDFIOTARGET 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetOpen
{
IoTarget, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetOpen
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp365 17     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetOpen
{
IoTarget, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetCloseForQueryRemove
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp425 19     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetCloseForQueryRemove
{
IoTarget, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetClose
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp469 20     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetClose
{
IoTarget, ItemPtr -- 10
}
#typev  FxIoTargetAPI_cpp518 22     "%0exit WDFIOTARGET 0x%10!p!, WDFDEVICE 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetGetDevice
{
IoTarget, ItemPtr -- 10
device, ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp513 21     "%0enter WDFIOTARGET 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetGetDevice
{
IoTarget, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetQueryForInterface
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp903 35     "%0could not format MJ 0x%10!x! request, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIo
{
MajorCode, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp892 34     "%0WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p! being submitted"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIo
{
IoTarget, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp875 33     "%0invalid input buffer descriptor 0x%10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIo
{
IoBuffer, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp863 32     "%0invalid options, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIo
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     general // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxIoTargetSendIo
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxIoTargetSendIo
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxIoTargetSendIo
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxIoTargetSendIo
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp849 31     "%0enter:  WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, MJ code 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIo
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
MajorCode, ItemLong -- 12
}
#typev  FxIoTargetAPI_cpp1275 44     "%0could not format IOCTL 0x%10!x! request, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIoctl
{
Ioctl, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1262 43     "%0WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p! being submitted"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIoctl
{
IoTarget, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp1248 42     "%0invalid output buffer descriptor 0x%10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIoctl
{
OutputBuffer, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1234 41     "%0invalid input buffer descriptor 0x%10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIoctl
{
InputBuffer, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1222 40     "%0invalid options, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIoctl
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     general // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxIoTargetSendIoctl
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxIoTargetSendIoctl
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxIoTargetSendIoctl
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxIoTargetSendIoctl
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp1208 39     "%0enter:  WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, IOCTL 0x%12!x!, internal %13!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxIoTargetSendIoctl
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
Ioctl, ItemLong -- 12
Internal, ItemLong -- 13
}
#typev  FxIoTargetAPI_cpp1742 55     "%0Could not format IOCTL 0x%10!x! request, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
Ioctl, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1729 54     "%0WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p! being submitted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
IoTarget, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxIoTargetAPI_cpp1714 53     "%0invalid OtherArg4 buffer descriptor 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
OtherArg4, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1699 52     "%0invalid OtherArg2 buffer descriptor 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
OtherArg2, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1684 51     "%0invalid OtherArg1 buffer descriptor 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
OtherArg1, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoTargetAPI_cpp1669 50     "%0Invalid options, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     general // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp1655 49     "%0enter:  WDFIOTARGET 0x%10!p!, WDFREQUEST 0x%11!p!, IOCTL 0x%12!x!, Args %13!p! %14!p! %15!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetSendInternalIoctlOthersSynchronously
{
IoTarget, ItemPtr -- 10
Request, ItemPtr -- 11
Ioctl, ItemLong -- 12
OtherArg1, ItemPtr -- 13
OtherArg2, ItemPtr -- 14
OtherArg4, ItemPtr -- 15
}
#typev  FxIoTargetAPI_cpp1965 60     "%0exit WDFIOTARGET 0x%10!p!, Property %11!d!, %12!s!"      //   GLOBALS=pGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetQueryTargetProperty
{
IoTarget, ItemPtr -- 10
DeviceProperty, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTargetAPI_cpp1952 59     "%0WDFIOTARGET 0x%10!p! has no PDO (not opened yet?), %11!s!"      //   GLOBALS=pGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetQueryTargetProperty
{
IoTarget, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetQueryTargetProperty
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9303dcf1-d942-e0f5-cf9f-119bbe29e165     general // SRC=FxIoTargetAPI.cpp MJ= MN=
#typev  FxIoTargetAPI_cpp2062 62     "%0exit WDFIOTARGET 0x%10!p!, Property %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetAllocAndQueryTargetProperty
{
IoTarget, ItemPtr -- 10
DeviceProperty, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoTargetAPI_cpp2044 61     "%0WDFIOTARGET %10!p! has no PDO (not opened yet?), %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfIoTargetAllocAndQueryTargetProperty
{
IoTarget, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     general // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoTargetAllocAndQueryTargetProperty
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5e10f6c6-daec-6f1e-4995-c74bae4d3696     usb // SRC=FxUsbDevice.cpp MJ= MN=
#typev  FxUsbDevice_cpp990 16     "%0Query Interface for bus returned error, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp870 15     "%0Could not retrieve config descriptor, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp833 14     "%0Could not allocate %10!d! bytes for config descriptor, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
paddedSize, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDevice_cpp793 13     "%0Could not retrieve config descriptor size, config.wTotalLength %10!d! < sizeof(config descriptor) (%11!d!), %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
config.wTotalLength, ItemLong -- 10
size, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDevice_cpp780 12     "%0Could not retrieve config descriptor size, zero bytes transferred,  %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp769 11     "%0Could not retrieve config descriptor size, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp730 10     "%0Could not retrieve device descriptor, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::InitDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp1152 21     "%0Config descriptor indicated there were %10!d! interfaces, only found %11!d! interfaces"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::CreateInterfaces
{
m_NumInterfaces, ItemLong -- 10
iInterface, ItemLong -- 11
}
#typev  FxUsbDevice_cpp1144 20     "%0Config descriptor indicated there were 0 interfaces, but an interface descriptor was found"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::CreateInterfaces
{
}
#typev  FxUsbDevice_cpp1078 18     "%0Could not allocate memory for interface object #%10!d!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::CreateInterfaces
{
iInterface, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDevice_cpp1137 19     "%0Config descriptor indicated there were %10!d! interfaces, but did not find any interface descriptors in config descriptor %11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::CreateInterfaces
{
m_NumInterfaces, ItemLong -- 10
m_ConfigDescriptor, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDevice_cpp1035 17     "%0Could not allocate memory for %10!d! interfaces, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::CreateInterfaces
{
m_ConfigDescriptor->bNumInterfaces, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDevice_cpp2234 37     "%0USB core failed Select Configuration, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp2192 36     "%0USB core failed Select Interface URB, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp2052 34     "%0Could not commit the pipe object, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp2044 33     "%0Could not Init the pipe object, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp2035 32     "%0Could not allocate a pipe object, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp2012 31     "%0Could not allocate memory for Pipes InterfaceNumber %10!d!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
pIface->InterfaceNumber, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDevice_cpp1974 30     "%0Could not find an instance of an interface descriptor with InterfaceNumber %10!d!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
pIface->InterfaceNumber, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDevice_cpp1963 29     "%0WDFUSBDEVICE supports a maximum of %10!d! pipes per interface, USBD_INTERFACE_INFORMATION %11!p! specified %12!d!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
UCHAR_MAX, ItemLong -- 10
pIface, ItemPtr -- 11
pIface->NumberOfPipes, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDevice_cpp2093 35     "%0Could not allocate a select interface URB, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbDevice_cpp1933 28     "%0Could not internal allocate tracking info for selecting a config on WDFUSBDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfig
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDevice_cpp2431 39     "%0WDFUSBDEVICE %10!p!, Request %11!p!, setting target failed, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::FormatStringRequest
{
GetHandle(), ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDevice_cpp2493 41     "%0WDFUSBDEVICE %10!p!, Request %11!p!, setting target failed, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::FormatControlRequest
{
GetHandle(), ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDevice_cpp2483 40     "%0Control transfer buffer is limited to 0xFFFF bytes in size, %10!I64d! requested"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::FormatControlRequest
{
bufferSize, ItemLongLong -- 10
}
#typev  FxUsbDevice_cpp1529 23     "%0WDFUSBDEVICE %10!p! could not retrieve AlternateSetting 0 for bInterfaceNumber %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfigSingle
{
GetHandle(), ItemPtr -- 10
m_Interfaces[0]->m_InterfaceNumber, ItemLong -- 11
}
#typev  FxUsbDevice_cpp1512 22     "%0WDFUSBDEVICE %10!p! cannot be auto configured for a single interface since there are %11!d! interfaces on the device, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfigSingle
{
GetHandle(), ItemPtr -- 10
m_NumInterfaces, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDevice_cpp1680 25     "%0WDFUSBDEVICE %10!p! could not retrieve AlternateSetting %11!d! for bInterfaceNumber %12!d!, returning %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfigMulti
{
GetHandle(), ItemPtr -- 10
altSettingIndex, ItemLong -- 11
interfaceNumber, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDevice_cpp1705 26     "%0WDFUSBDEVICE %10!p! interface pairs set (%11!d!) is not equal to actual # of interfaces (%12!d!) reported by the device, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfigMulti
{
GetObjectHandle(), ItemPtr -- 10
interfacePairsNum, ItemLong -- 11
m_NumInterfaces, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDevice_cpp1620 24     "%0WDFUSBDEVICE %10!p! could not retrieve AlternateSetting 0 for bInterfaceNumber %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfigMulti
{
GetHandle(), ItemPtr -- 10
m_Interfaces[i]->m_InterfaceNumber, ItemLong -- 11
}
#typev  FxUsbDevice_cpp1788 27     "%0Could not allocate array of USBD_INTERFACE_LIST_ENTRY, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbDevice::SelectConfigDescriptor
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
65c7a6eb-4901-fbd2-42cf-54c0e60e48dc     usb // SRC=FxUsbPipe.cpp MJ= MN=
#typev  FxUsbPipe_cpp1305 22     "%0WDFUSBPIPE %10!p! is stopped from EvtUsbTargetPipeReadersFailed callback"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::GotoStopState
{
GetHandle(), ItemPtr -- 10
}
#typev  FxUsbPipe_cpp1282 21     "%0WDFUSBPIPE %10!p! converting stop action %11!s! to %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::GotoStopState
{
GetHandle(), ItemPtr -- 10
Action, ItemEnum(_WDF_IO_TARGET_SENT_IO_ACTION) -- 11
WdfIoTargetCancelSentIo, ItemEnum(_WDF_IO_TARGET_SENT_IO_ACTION) -- 12
}
#typev  FxUsbPipe_cpp1357 23     "%0WDFUSBPIPE %10!p! was not stopped in EvtDeviceD0Exit callback"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::GotoRemoveState
{
GetHandle(), ItemPtr -- 10
}
#typev  FxUsbPipe_cpp1420 26     "%0WDFUSBPIPE %10!p!, waiting for all i/o to complete"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::WaitForSentIoToComplete
{
GetHandle(), ItemPtr -- 10
}
#typev  FxUsbPipe_cpp1406 25     "%0WDFUSBPIPE %10!p!, cancelling for continuous reader (max of %11!d!)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::WaitForSentIoToComplete
{
GetHandle(), ItemPtr -- 10
m_Reader->m_NumReaders, ItemLong -- 11
}
#typev  FxUsbPipe_cpp1393 24     "%0WDFUSBPIPE %10!p!, waiting for continuous reader work item to complete"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::WaitForSentIoToComplete
{
GetHandle(), ItemPtr -- 10
}
#typev  FxUsbPipe_cpp1732 35     "%0Pipe %10!p!, Request %11!p!, setting target failed, status %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::FormatTransferRequest
{
this, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipe_cpp1722 34     "%0Pipe %10!p!, sending __out transaction on an __in endpoint"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::FormatTransferRequest
{
this, ItemPtr -- 10
}
#typev  FxUsbPipe_cpp1708 33     "%0Pipe %10!p!, sending __in transaction on a __out endpoint"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::FormatTransferRequest
{
this, ItemPtr -- 10
}
#typev  FxUsbPipe_cpp1685 31     "%0WDFUSBPIPE %10!p! not the right type, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::FormatTransferRequest
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbPipe_cpp1799 36     "%0Pipe %10!p!, Request %11!p!, setting target failed, status %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::FormatAbortRequest
{
this, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipe_cpp1838 37     "%0Pipe %10!p!, Request %11!p!, setting target failed, status %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::FormatResetRequest
{
this, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipe_cpp1585 28     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p!, WDFMEMORY %12!p!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::_FormatTransfer
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
TransferMemory, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbPipe_cpp1660 30     "%0WDFUSBPIPE %10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::_SendTransfer
{
Pipe, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbPipe_cpp1644 29     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p! being submitted"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::_SendTransfer
{
Pipe, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxUsbPipe::_SendTransfer
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxUsbPipe::_SendTransfer
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxUsbPipe::_SendTransfer
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxUsbPipe::_SendTransfer
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
65c7a6eb-4901-fbd2-42cf-54c0e60e48dc     usb // SRC=FxUsbPipe.cpp MJ= MN=
#typev  FxUsbPipe_cpp253 13     "%0WDFUSBPIPE %10!p! continuous reader not queueing work item,WorkItemQueued = %11!d!, target state %12!s!"      //   GLOBALS=fxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::QueueWorkItemLocked
{
m_Pipe->GetHandle(), ItemPtr -- 10
m_WorkItemQueued, ItemLong -- 11
m_Pipe->m_State, ItemEnum(_WDF_IO_TARGET_STATE) -- 12
}
#typev  FxUsbPipe_cpp242 12     "%0Could not Queue workitem"      //   GLOBALS=fxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxUsbPipeContinuousReader::QueueWorkItemLocked
{
}
#typev  FxUsbPipe_cpp232 11     "%0WDFUSBPIPE %10!p! continuous reader queueing work item to recover from failed allocation"      //   GLOBALS=fxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::QueueWorkItemLocked
{
m_Pipe->GetHandle(), ItemPtr -- 10
}
#typev  FxUsbPipe_cpp376 17     "%0WDFUSBPIPE %10!p! continuous reader, buffer alloc failed, but not in started state"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::ResubmitRepeater
{
m_Pipe->GetHandle(), ItemPtr -- 10
}
#typev  FxUsbPipe_cpp361 16     "%0WDFUSBPIPE %10!p! continuous reader, buffer alloc failed, but there are %11!d! readers left out of a max of %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::ResubmitRepeater
{
m_Pipe->GetHandle(), ItemPtr -- 10
m_NumReaders - m_NumFailedReaders, ItemLong -- 11
m_NumReaders, ItemLong -- 12
}
#typev  FxUsbPipe_cpp345 15     "%0WDFUSBPIPE %10!p! continuous reader, format failed, %11!s!, repeater %12!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::ResubmitRepeater
{
m_Pipe->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
Repeater, ItemPtr -- 12
}
#typev  FxUsbPipe_cpp299 14     "%0WDFUSBPIPE %10!p! is being reset, continuous reader %11!p! FxRequest %12!p! PIRP %13!p! is deferred for later."      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::ResubmitRepeater
{
m_Pipe->GetHandle(), ItemPtr -- 10
Repeater, ItemPtr -- 11
Repeater->Request, ItemPtr -- 12
Repeater->RequestIrp, ItemPtr -- 13
}
#typev  FxUsbPipe_cpp500 20     "%0WDFUSBPIPE %10!p! continuous reader %11!p! FxRequest %12!p! PIRP %13!p! got asynchronously canceled"      //   GLOBALS=pPipe->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::_FxUsbPipeRequestComplete
{
pPipe->GetHandle(), ItemPtr -- 10
pRepeater, ItemPtr -- 11
pRepeater->Request, ItemPtr -- 12
pRepeater->RequestIrp, ItemPtr -- 13
}
#typev  FxUsbPipe_cpp462 19     "%0WDFUSBPIPE %10!p! continuous reader %11!p! FxRequest %12!p! PIRP %13!p! canceled"      //   GLOBALS=pPipe->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::_FxUsbPipeRequestComplete
{
pPipe->GetHandle(), ItemPtr -- 10
pRepeater, ItemPtr -- 11
pRepeater->Request, ItemPtr -- 12
pRepeater->RequestIrp, ItemPtr -- 13
}
#typev  FxUsbPipe_cpp436 18     "%0WDFUSBPIPE %10!p! continuous reader FxRequest %11!p! PIRP %12!p! returned with %13!s!"      //   GLOBALS=pPipe->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIOTARGET FUNC=FxUsbPipeContinuousReader::_FxUsbPipeRequestComplete
{
pPipe->GetHandle(), ItemPtr -- 10
pRepeater->Request, ItemPtr -- 11
pRepeater->RequestIrp, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbPipe_cpp129 10     "%0Could not allocate workitem: %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxUsbPipeContinuousReader::Config
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbPipe_cpp1446 27     "%0Continuous reader already initialized on WDFUSBPIPE %10!p! %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbPipe::InitContinuousReader
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
c380ba2a-592d-6ac5-b0d4-7d42c3969c40     usb // SRC=FxUsbInterface.cpp MJ= MN=
#typev  FxUsbInterface_cpp299 12     "%0Interface Number %10!d! does not have contiguous alternate settings,expected consecutive %11!d! settings, but alt setting %12!d! missing %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::CreateSettings
{
m_InterfaceNumber, ItemLong -- 10
m_NumSettings, ItemLong -- 11
i, ItemLong -- 12
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 13
}
#typev  FxUsbInterface_cpp276 11     "%0Interface Number %10!d! does not have contiguous alternate settings,expected %11!d! settings, found alt setting %12!d!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::CreateSettings
{
pDescriptor->bInterfaceNumber, ItemLong -- 10
m_NumSettings, ItemLong -- 11
pDescriptor->bAlternateSetting, ItemLong -- 12
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 13
}
#typev  FxUsbInterface_cpp247 10     "%0Could not allocate memory for %10!d! settings for bInterfaceNumber %11!d! (Protocol %12!d!, Class %13!d!, SubClass %14!d!), %15!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::CreateSettings
{
m_NumSettings, ItemLong -- 10
m_InterfaceNumber, ItemLong -- 11
m_Protocol, ItemLong -- 12
m_Class, ItemLong -- 13
m_SubClass, ItemLong -- 14
STATUS_INSUFFICIENT_RESOURCES, ItemNTSTATUS -- 15
}
#typev  FxUsbInterface_cpp597 18     "%0Commit pipe failed  %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::SelectSetting
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbInterface_cpp588 17     "%0Init pipe failed  %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::SelectSetting
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbInterface_cpp578 16     "%0Unable to allocate memory for the pipes %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::SelectSetting
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbInterface_cpp563 15     "%0Unable to allocate memory %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::SelectSetting
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbInterface_cpp518 14     "%0Urb header length 0x%10!x! is less than expected 0x%11!x!%12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::SelectSetting
{
Urb->UrbSelectInterface.Hdr.Length, ItemLong -- 10
interfaceStructSize, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbInterface_cpp424 13     "%0WDFUSBINTERFACE %10!p! has interface num %11!d!, select setting by descriptor specified interface num %12!d!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::SelectSettingByDescriptor
{
GetHandle(), ItemPtr -- 10
m_InterfaceNumber, ItemLong -- 11
InterfaceDescriptor->bInterfaceNumber, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbInterface_cpp970 19     "%0WDFUSBINTERFACE %10!p! not configured, cannot retrieve configured setting index"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbInterface::GetConfiguredSettingIndex
{
GetHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d1c4cb0-5250-769d-2bc3-f6349f48101a     usb // SRC=FxUsbDeviceAPI.cpp MJ= MN=
#typev  FxUsbDeviceAPI_cpp162 10     "%0Information size %10!d!, expected %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceRetrieveInformation
{
Information->Size, ItemLong -- 10
sizeof(WDF_USB_DEVICE_INFORMATION), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDeviceAPI_cpp505 13     "%0WDFUSBDEVICE %10!p!, WDFREQUEST %11!p!, WDFMEMORY %12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForString
{
UsbDevice, ItemPtr -- 10
Request, ItemPtr -- 11
Memory, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDeviceAPI_cpp475 12     "%0WDFMEMORY %10!p! length must be even number of WCHARs, but is %11!I64d! in length, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForString
{
Memory, ItemPtr -- 10
bufferSize, ItemLongLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDeviceAPI_cpp444 11     "%0WDFUSBDEVICE %10!p!, WDFREQUEST %11!p!, WDFMEMORY %12!p!, StringIndex %13!d!, LandID 0x%14!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForString
{
UsbDevice, ItemPtr -- 10
Request, ItemPtr -- 11
Memory, ItemPtr -- 12
StringIndex, ItemLong -- 13
LangID, ItemLong -- 14
}
#typev  FxUsbDeviceAPI_cpp970 28     "%0WDFUSBDEVICE %10!p!, Request %11!p!, Memory %12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForUrb
{
UsbDevice, ItemPtr -- 10
Request, ItemPtr -- 11
UrbMemory, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDeviceAPI_cpp951 27     "%0UrbMemory %10!p! buffer size, %11!I64d!, smaller then_URB_HEADER, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForUrb
{
UrbMemory, ItemPtr -- 10
pMemory->GetBufferSize(), ItemLongLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDeviceAPI_cpp923 26     "%0WDFUSBDEVICE %10!p!, Request %11!p!, Memory %12!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForUrb
{
UsbDevice, ItemPtr -- 10
Request, ItemPtr -- 11
UrbMemory, ItemPtr -- 12
}
#typev  FxUsbDeviceAPI_cpp1187 33     "%0format control request WDFUSBDEVICE %10!p!, WDFREQWUEST %11!p!, WDFMEMORY %12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForControlTransfer
{
UsbDevice, ItemPtr -- 10
Request, ItemPtr -- 11
TransferMemory, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDeviceAPI_cpp1140 32     "%0WDFUSBDEVICE %10!p!, WDFREQUEST %11!p!, WDFMEMORY %12!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceFormatRequestForControlTransfer
{
UsbDevice, ItemPtr -- 10
Request, ItemPtr -- 11
TransferMemory, ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceGetDeviceDescriptor
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceRetrieveConfigDescriptor
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceQueryString
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceQueryString
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceQueryString
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceQueryString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceAllocAndQueryString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d1c4cb0-5250-769d-2bc3-f6349f48101a     usb // SRC=FxUsbDeviceAPI.cpp MJ= MN=
#typev  FxUsbDeviceAPI_cpp562 15     "%0Params Type %10!d! not a valid value, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
Params->Size, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDeviceAPI_cpp721 22     "%0WDFUSBDEVICE %10!p! SettingPairs contains invalid SettingIndex for WDFUSBINTERFACE %11!p!. Setting index passed in: %12!d!, max index: %13!d!, returning %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
pUsbDevice->GetHandle(), ItemPtr -- 10
pair->UsbInterface, ItemPtr -- 11
pair->SettingIndex, ItemLong -- 12
pUsbInterface->GetNumSettings() - 1, ItemLong -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxUsbDeviceAPI_cpp683 21     "%0WDFUSBDEVICE %10!p! MultiInterface.NumberInterfaces %11!d! != %12!d! (reported num interfaces), %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
pUsbDevice->GetHandle(), ItemPtr -- 10
Params->Types.MultiInterface.NumberInterfaces, ItemLong -- 11
pUsbDevice->GetNumInterfaces(), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDeviceAPI_cpp672 20     "%0WDFUSBDEVICE %10!p! SettingPairs Array passed is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
pUsbDevice->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDeviceAPI_cpp616 18     "%0Either  InterfaceDescriptor is NULL or  NumInterfaceDescriptors is zero WDFUSBDEVICE %10!p! InterfaceDescriptor %11!p! NumInterfaceDescriptors 0x%12!x!%13!s! %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
UsbDevice, ItemPtr -- 10
Params->Types.Descriptor.InterfaceDescriptors, ItemPtr -- 11
Params->Types.Descriptor.NumInterfaceDescriptors, ItemLong -- 12
Params->Type, ItemEnum(_WdfUsbTargetDeviceSelectConfigType) -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxUsbDeviceAPI_cpp645 19     "%0Either URB passed in was NULL or the URB Function or Length was invalid  WDFUSBDEVICE %10!p! Urb 0x%11!p! %12!s! %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
UsbDevice, ItemPtr -- 10
Params->Types.Urb.Urb, ItemPtr -- 11
Params->Type, ItemEnum(_WdfUsbTargetDeviceSelectConfigType) -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbDeviceAPI_cpp598 17     "%0WDFUSBDEVICE %10!p! succeeding config operation %11!s! on zero interfaces immediately, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
UsbDevice, ItemPtr -- 10
Params->Type, ItemEnum(_WdfUsbTargetDeviceSelectConfigType) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDeviceAPI_cpp583 16     "%0WDFUSBDEVICE %10!p! number of interfaces found in the config descriptor does not match bNumInterfaces in config descriptor, failing config operation %11!s!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
UsbDevice, ItemPtr -- 10
Params->Type, ItemEnum(_WdfUsbTargetDeviceSelectConfigType) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDeviceAPI_cpp546 14     "%0Params size %10!d!, expected %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
Params->Size, ItemLong -- 10
sizeof(WDF_USB_DEVICE_SELECT_CONFIG_PARAMS), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceSelectConfig
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d1c4cb0-5250-769d-2bc3-f6349f48101a     usb // SRC=FxUsbDeviceAPI.cpp MJ= MN=
#typev  FxUsbDeviceAPI_cpp885 25     "%0Device %10!p!, Urb %11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
UsbDevice, ItemPtr -- 10
Urb, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbDeviceAPI_cpp877 24     "%0WDFUSBDEVICE %10!p!, WDFREQUEST %11!p! being submitted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
UsbDevice, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d1c4cb0-5250-769d-2bc3-f6349f48101a     usb // SRC=FxUsbDeviceAPI.cpp MJ= MN=
#typev  FxUsbDeviceAPI_cpp854 23     "%0WDFUSBDEVICE %10!p!, Urb %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSendUrbSynchronously
{
UsbDevice, ItemPtr -- 10
Urb, ItemPtr -- 11
}
#typev  FxUsbDeviceAPI_cpp1081 31     "%0WDFUSBDEVICE %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
UsbDevice, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbDeviceAPI_cpp1064 30     "%0WDFUSBDEVICE %10!p!, WDFREQUEST %11!p! being submitted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
UsbDevice, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d1c4cb0-5250-769d-2bc3-f6349f48101a     usb // SRC=FxUsbDeviceAPI.cpp MJ= MN=
#typev  FxUsbDeviceAPI_cpp1034 29     "%0WDFUSBDEVICE %10!p! control transfer sync"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceSendControlTransferSynchronously
{
UsbDevice, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceIsConnectedSynchronous
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceResetPortSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetDeviceCyclePortSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d1c4cb0-5250-769d-2bc3-f6349f48101a     usb // SRC=FxUsbDeviceAPI.cpp MJ= MN=
#typev  FxUsbDeviceAPI_cpp1394 34     "%0WDFUSBDEVICE %10!p! has %11!d! interfaces, index %12!d! requested, returning NULL handle"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetDeviceGetInterface
{
UsbDevice, ItemPtr -- 10
pUsbDevice->GetNumInterfaces(), ItemLong -- 11
InterfaceIndex, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
51335820-88c0-a4f1-720f-f5f5c8a6227b     usb // SRC=FxUsbPipeAPI.cpp MJ= MN=
#typev  FxUsbPipeAPI_cpp138 10     "%0WDFUSBPIPE %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeSetNoMaximumPacketSizeCheck
{
Pipe, ItemPtr -- 10
}
#typev  FxUsbPipeAPI_cpp163 11     "%0WDFUSBPIPE %10!p!"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeWriteSynchronously
{
Pipe, ItemPtr -- 10
}
#typev  FxUsbPipeAPI_cpp193 12     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p!, WDFMEMORY %12!p!"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForWrite
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
WriteMemory, ItemPtr -- 12
}
#typev  FxUsbPipeAPI_cpp224 13     "%0WDFUSBPIPE %10!p!"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeReadSynchronously
{
Pipe, ItemPtr -- 10
}
#typev  FxUsbPipeAPI_cpp255 14     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p!, WDFMEMORY %12!p!"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForRead
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
ReadMemory, ItemPtr -- 12
}
#typev  FxUsbPipeAPI_cpp385 22     "%0TransferLength %10!I64d! not a valid transer length (not integral of max packet size %11!d!) %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
Config->TransferLength, ItemLongLong -- 10
pUsbPipe->GetMaxPacketSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipeAPI_cpp375 21     "%0WDFUSBPIPE %10!p!, wrong direction for continuous reader, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
Pipe, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbPipeAPI_cpp363 20     "%0WDFUSBPIPE %10!p! type %11!s!, only bulk or interrupt pipes can be configured for continous readers, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
Pipe, ItemPtr -- 10
pUsbPipe->GetType(), ItemEnum(_WDF_USB_PIPE_TYPE) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipeAPI_cpp338 19     "%0HeaderLength + TransferLength + TrailerLength overflow %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbPipeAPI_cpp327 18     "%0HeaderLength + TransferLength overflow %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbPipeAPI_cpp317 17     "%0TransferLength of 0 not allowed %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbPipeAPI_cpp309 16     "%0NULL EvtUsbTargetPipeReadComplete not allowed %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbPipeAPI_cpp299 15     "%0Config %10!p! incorrect size %11!d!, expected %12!d! %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeConfigContinuousReader
{
Config, ItemPtr -- 10
Config->Size, ItemLong -- 11
sizeof(WDF_USB_CONTINUOUS_READER_CONFIG), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbPipeAPI_cpp491 28     "%0Pipe %10!p!, Request %11!p!, status %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForAbort
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipeAPI_cpp481 27     "%0Pipe %10!p!, Request %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForAbort
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
}
#typev  FxUsbPipeAPI_cpp598 34     "%0Pipe %10!p!, Request %11!p! = 0x%12!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForReset
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemLong -- 12
}
#typev  FxUsbPipeAPI_cpp588 33     "%0Pipe %10!p!, Request %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForReset
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
}
#typev  FxUsbPipeAPI_cpp750 40     "%0Pipe %10!p!, Request %11!p!, Memory %12!p!, status %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForUrb
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
UrbMemory, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxUsbPipeAPI_cpp731 39     "%0UrbMemory %10!p! buffer size, %11!I64d!, smaller then _URB_HEADER, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForUrb
{
UrbMemory, ItemPtr -- 10
pMemory->GetBufferSize(), ItemLongLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipeAPI_cpp705 38     "%0Pipe %10!p!, Request %11!p!, Memory %12!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeFormatRequestForUrb
{
Pipe, ItemPtr -- 10
Request, ItemPtr -- 11
UrbMemory, ItemPtr -- 12
}
#typev  FxUsbPipeAPI_cpp451 26     "%0WDFUSBPIPE %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
Pipe, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbPipeAPI_cpp443 25     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p! being submitted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
Pipe, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxUsbPipeAPI_cpp436 24     "%0Invalid request options"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
51335820-88c0-a4f1-720f-f5f5c8a6227b     usb // SRC=FxUsbPipeAPI.cpp MJ= MN=
#typev  FxUsbPipeAPI_cpp426 23     "%0Pipe %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeAbortSynchronously
{
Pipe, ItemPtr -- 10
}
#typev  FxUsbPipeAPI_cpp558 32     "%0WDFUSBPIPE %10!p! reset, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
Pipe, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbPipeAPI_cpp544 31     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p! being submitted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
Pipe, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxUsbPipeAPI_cpp536 30     "%0Invalid request options"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
51335820-88c0-a4f1-720f-f5f5c8a6227b     usb // SRC=FxUsbPipeAPI.cpp MJ= MN=
#typev  FxUsbPipeAPI_cpp526 29     "%0WDFUSBPIPE %10!p! reset"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeResetSynchronously
{
Pipe, ItemPtr -- 10
}
#typev  FxUsbPipeAPI_cpp667 37     "%0WDFUSBPIPE %10!p!, Urb %11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
Pipe, ItemPtr -- 10
Urb, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbPipeAPI_cpp659 36     "%0WDFUSBPIPE %10!p!, WDFREQUEST %11!p! being submitted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
Pipe, ItemPtr -- 10
request.m_TrueRequest->GetTraceObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f3ec7322-abd5-6180-d74f-26fd922c4359     usb // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
51335820-88c0-a4f1-720f-f5f5c8a6227b     usb // SRC=FxUsbPipeAPI.cpp MJ= MN=
#typev  FxUsbPipeAPI_cpp636 35     "%0WDFUSBPIPE %10!p!, Urb %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbTargetPipeSendUrbSynchronously
{
Pipe, ItemPtr -- 10
Urb, ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
7ea8db5a-4355-d8de-ad1f-2490bfb0d673     usb // SRC=FxUsbInterfaceAPI.cpp MJ= MN=
#typev  FxUsbInterfaceAPI_cpp265 13     "%0EndpointInfo Size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbInterfaceGetEndpointInformation
{
EndpointInfo->Size, ItemLong -- 10
sizeof(WDF_USB_PIPE_INFORMATION), ItemLong -- 11
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 12
}
#typev  FxUsbInterfaceAPI_cpp459 14     "%0PipeInfo Size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbInterfaceGetConfiguredPipe
{
PipeInfo->Size, ItemLong -- 10
sizeof(WDF_USB_PIPE_INFORMATION), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxUsbInterfaceAPI_cpp100 11     "%0InterfaceDescriptor passed in is NULL %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbInterfaceSelectSetting
{
status, ItemNTSTATUS -- 10
}
#typev  FxUsbInterfaceAPI_cpp126 12     "%0URB or URB fields passed in are invalid Urb 0x%10!p!  %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbInterfaceSelectSetting
{
Params->Types.Urb.Urb, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxUsbInterfaceAPI_cpp82 10     "%0Params size %10!d!, expected %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfUsbInterfaceSelectSetting
{
Params->Size, ItemLong -- 10
sizeof(WDF_USB_INTERFACE_SELECT_SETTING_PARAMS), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     usb // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfUsbInterfaceSelectSetting
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
c2beab54-e6a5-b666-25d2-53d4660021a2     usb // SRC=usbutil.cpp MJ= MN=
#typev  usbutil_cpp62 10     "%0FormatUrbRequest:  Target %10!p!, Request %11!p!, setting target failed, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIOTARGET FUNC=FxFormatUrbRequest
{
Target, ItemPtr -- 10
Request, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  usbutil_cpp119 11     "%0USB Configuration packet contains bad data, this is due to a broken device or driver"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbFindDescriptorType
{
}
#typev  usbutil_cpp247 12     "%0InterfaceList %10!p!, NumEndPoints 0x%11!x!, Integer overflow while calculating interface size, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxUsbCreateConfigRequest
{
InterfaceList, ItemPtr -- 10
pList->InterfaceDescriptor->bNumEndpoints, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cad0a843-b1e5-66e3-eb94-440b69559ff1     core // SRC=FxDriver.cpp MJ= MN=
#typev  FxDriver_cpp85 10     "%0FxDriver 0x%10!p! not disposed: this maybe a driver reference count problem with WDFDRIVER 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGDRIVER FUNC=FxDriver::~FxDriver
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
}
#typev  FxDriver_cpp165 11     "%0WDFDRIVER %10!p!, PDRIVER_OBJECT %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDriver::Unload
{
pDriver->GetHandle(), ItemPtr -- 10
DriverObject, ItemPtr -- 11
}
#typev  FxDriver_cpp624 18     "%0Exit, status %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxDriver::AddDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxDriver_cpp593 17     "%0Filter returned %10!s! without creating a WDFDEVICE, converting to STATUS_SUCCESS"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxDriver::AddDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxDriver_cpp584 16     "%0Driver did not create a device in EvtDriverAddDevice, status %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxDriver::AddDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxDriver_cpp561 15     "%0FxTraceInitializeW2k via AddDevice failed, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxDriver::AddDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxDriver_cpp539 14     "%0Enter AddDevice PDO %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxDriver::AddDevice
{
PhysicalDeviceObject, ItemPtr -- 10
}
#typev  FxDriver_cpp518 13     "%0Driver Object %10!p!, reg path %11!s! cannot be unloaded, no DriverUnload routine specified"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGDRIVER FUNC=FxDriver::Initialize
{
m_DriverObject, ItemPtr -- 10
&m_RegistryPath, ItemPWString -- 11
}
#typev  FxDriver_cpp495 12     "%0Failed to initialize tracing for Driver Object %10!p!, reg path %11!s!,  %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDRIVER FUNC=FxDriver::Initialize
{
m_DriverObject, ItemPtr -- 10
&m_RegistryPath, ItemPWString -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDriverGetRegistryPath
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d5bf6ff7-c176-4480-923a-2bbdd045efc5     core // SRC=FxDriverApi.cpp MJ= MN=
#typev  FxDriverApi_cpp154 12     "%0WdfDriverCreate can only be called one time per WDM PDRIVER_OBJECT %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDRIVER FUNC=imp_WdfDriverCreate
{
DriverObject, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDriverApi_cpp209 13     "%0Invalid Driver flags or EvtDriverDeviceAdd callback already addedSTATUS_INVALID_PARAMETER"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDRIVER FUNC=imp_WdfDriverCreate
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDriverCreate
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDriverCreate
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDriverCreate
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDriverCreate
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDriverCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d5bf6ff7-c176-4480-923a-2bbdd045efc5     core // SRC=FxDriverApi.cpp MJ= MN=
#typev  FxDriverApi_cpp127 11     "%0DriverInitFlags 0x%10!x! invalid, valid flags are 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDRIVER FUNC=imp_WdfDriverCreate
{
DriverConfig->DriverInitFlags, ItemLong -- 10
validFlags, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDriverApi_cpp113 10     "%0WDF_DRIVER_CONFIG got Size %10!d!, expected v1.1 size %11!d! or cur ver size %12!d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDRIVER FUNC=imp_WdfDriverCreate
{
DriverConfig->Size, ItemLong -- 10
sizeof(WDF_DRIVER_CONFIG_V1_1), ItemLong -- 11
sizeof(WDF_DRIVER_CONFIG), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDriverOpenParametersRegistryKey
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceMiniportCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDriverRetrieveVersionString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d5bf6ff7-c176-4480-923a-2bbdd045efc5     core // SRC=FxDriverApi.cpp MJ= MN=
#typev  FxDriverApi_cpp716 15     "%0IsVersionAvailable, current KMDF ver major %10!d!, minor %11!d!, caller asking about major %12!d!, minor %13!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGDRIVER FUNC=imp_WdfDriverIsVersionAvailable
{
__WDF_MAJOR_VERSION, ItemLong -- 10
__WDF_MINOR_VERSION, ItemLong -- 11
VersionAvailableParams->MajorVersion, ItemLong -- 12
VersionAvailableParams->MinorVersion, ItemLong -- 13
}
#typev  FxDriverApi_cpp701 14     "%0VersionAvailableParams Size 0x%10!x!, expected 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDRIVER FUNC=imp_WdfDriverIsVersionAvailable
{
VersionAvailableParams->Size, ItemLong -- 10
sizeof(WDF_DRIVER_VERSION_AVAILABLE_PARAMS), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDriverIsVersionAvailable
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d5bee12d-f3d5-3523-08d6-a905ce438286     core // SRC=FxDevice.cpp MJ= MN=
#typev  FxDevice_cpp2019 20     "%0Could not commit memory object, %10!s!"      //   GLOBALS=Globals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::_AllocAndQueryProperty
{
status, ItemNTSTATUS -- 10
}
#typev  FxDevice_cpp2007 19     "%0Could not query for full buffer, size %10!d!, for property %11!d!, %12!s!"      //   GLOBALS=Globals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::_AllocAndQueryProperty
{
length, ItemLong -- 10
DeviceProperty, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDevice_cpp1995 18     "%0Could not allocate WDFMEMORY, %10!s!"      //   GLOBALS=Globals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::_AllocAndQueryProperty
{
status, ItemNTSTATUS -- 10
}
#typev  FxDevice_cpp1982 17     "%0Could not retrieve property %10!d! length, %11!s!"      //   GLOBALS=Globals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::_AllocAndQueryProperty
{
DeviceProperty, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b5795e21-4f0f-0996-4319-8714498c4c3a     core // SRC=FxPoolInlines.hpp MJ= MN=
#typev  FxPoolInlines_hpp66 11     "%0Size overflow, could not add pool tracker, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxPoolInlines_hpp55 10     "%0Size overflow, could not add pool header, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::Initialize
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d5bee12d-f3d5-3523-08d6-a905ce438286     core // SRC=FxDevice.cpp MJ= MN=
#typev  FxDevice_cpp807 13     "%0Must set EvtDeviceRemoveAddedResources if EvtDeviceFilterAddResourceRequirements (%10!p!) is set"      //   GLOBALS=pGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxDevice::FdoInitialize
{
DeviceInit->Fdo.EventCallbacks.EvtDeviceFilterAddResourceRequirements, ItemPtr -- 10
}
#typev  FxDevice_cpp1405 14     "%0Deleting !devobj %10!p!, WDFDEVICE %11!p!, attached to !devobj %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGDEVICE FUNC=FxDevice::Destroy
{
m_DeviceObject, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_AttachedDevice, ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::_OpenKey
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d5bee12d-f3d5-3523-08d6-a905ce438286     core // SRC=FxDevice.cpp MJ= MN=
#typev  FxDevice_cpp178 10     "%0FxDevice 0x%10!p! not disposed: this maybe a driver reference count problem with WDFDEVICE %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGDEVICE FUNC=FxDevice::~FxDevice
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
}
#typev  FxDevice_cpp420 12     "%0WDFDEVICE %10!p!, !devobj %11!p! is a filter, converting %12!s! to STATUS_SUCCESS"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxDevice::DeleteDeviceFromFailedCreateNoDelete
{
GetObjectHandleUnchecked(), ItemPtr -- 10
GetDeviceObject(), ItemPtr -- 11
FailedStatus, ItemNTSTATUS -- 12
}
#typev  FxDevice_cpp408 11     "%0WDFDEVICE %10!p! !devobj %11!p! created, but EvtDriverDeviceAdd returned status %12!s! or failure in creation"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxDevice::DeleteDeviceFromFailedCreateNoDelete
{
GetObjectHandleUnchecked(), ItemPtr -- 10
GetDeviceObject(), ItemPtr -- 11
FailedStatus, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDevice::DeleteObject
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp590 14     "%0a field (DxState, IdleCaps, Enabled, or UserControlOfIdleSettings) is out range, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignS0IdleSettings
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceApi_cpp606 15     "%0value of field PowerUpIdleDeviceOnSystemWake is out of range, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignS0IdleSettings
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceApi_cpp616 16     "%0value of field PowerUpIdleDeviceOnSystemWake should be set only when IdleCaps is IdleCannotWakeFromS0, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignS0IdleSettings
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceApi_cpp573 13     "%0Expected Settings Size %10!d!, got %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignS0IdleSettings
{
sizeof(WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS), ItemLong -- 10
Settings->Size, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDeviceApi_cpp559 12     "%0Device 0x%10!p! is not the power policy owner, caller cannot set S0 idle settings %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfDeviceAssignS0IdleSettings
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp685 19     "%0a field (DxState, Enabled, or UserControlOfIdleSettings) is out range, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignSxWakeSettings
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceApi_cpp670 18     "%0Expected Settings Size %10!x!, got %11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignSxWakeSettings
{
sizeof(WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS), ItemLong -- 10
Settings->Size, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDeviceApi_cpp656 17     "%0Device 0x%10!p! is not the power policy owner, caller cannot set Sx wake settings %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfDeviceAssignSxWakeSettings
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp806 21     "%0WDFDEVICE 0x%10!p! DeviceState Size %11!d!, expected %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceGetDeviceState
{
Device, ItemPtr -- 10
DeviceState->Size, ItemLong -- 11
sizeof(WDF_DEVICE_STATE), ItemLong -- 12
}
#typev  FxDeviceApi_cpp881 23     "%0WDFDEVICE 0x%10!p! DeviceState WDF_TRI_STATE %11!s! value out of range, value is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetDeviceState
{
Device, ItemPtr -- 10
offsets[i].Name, ItemString -- 11
value, ItemLong -- 12
}
#typev  FxDeviceApi_cpp852 22     "%0WDFDEVICE 0x%10!p!, DeviceState Size %11!d!, expected %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetDeviceState
{
Device, ItemPtr -- 10
DeviceState->Size, ItemLong -- 11
sizeof(WDF_DEVICE_STATE), ItemLong -- 12
}
#typev  FxDeviceApi_cpp931 24     "%0WDFDEVICE 0x%10!p! FileType %11!d! specified is not in valid range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetSpecialFileSupport
{
Device, ItemPtr -- 10
FileType, ItemLong -- 11
}
#typev  FxDeviceApi_cpp1474 44     "%0NULL WDFDEVICE handle %10!p! or invalid %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceIndicateWakeStatus
{
Device, ItemPtr -- 10
WaitWakeStatus, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1500 46     "%0WDFDEVICE 0x%10!p!  Not the waitwake owner STATUS_INVALID_DEVICE_STATE"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceIndicateWakeStatus
{
Device, ItemPtr -- 10
}
#typev  FxDeviceApi_cpp1488 45     "%0WDFDEVICE 0x%10!p!  No request to complete STATUS_INVALID_DEVICE_REQUEST"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceIndicateWakeStatus
{
Device, ItemPtr -- 10
}
#typev  FxDeviceApi_cpp1565 47     "%0Invalid FailedAction %10!d!"      //   GLOBALS=pDevice->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetFailed
{
FailedAction, ItemLong -- 10
}
#typev  FxDeviceApi_cpp1572 48     "%0WDFDEVICE %10!p!, !devobj %11!p! SetFailed %12!s!"      //   GLOBALS=pDevice->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetFailed
{
Device, ItemPtr -- 10
pDevice->GetDeviceObject(), ItemPtr -- 11
FailedAction, ItemEnum(_WDF_DEVICE_FAILED_ACTION) -- 12
}
#typev  FxDeviceApi_cpp1650 51     "%0WdfDeviceResumeIdle does nothing if you are not the power policy owner for the stack"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceResumeIdle
{
}
#typev  FxDeviceApi_cpp1764 53     "%0WDFDEVICE 0x%10!p! PnpCapabilities WDF_TRI_STATE %11!s! value out of range, value is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPnpCapabilities
{
Device, ItemPtr -- 10
offsets[i].Name, ItemString -- 11
value, ItemLong -- 12
}
#typev  FxDeviceApi_cpp1735 52     "%0WDFDEVICE 0x%10!p! PnpCapabilities Size %11!d!, expected %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPnpCapabilities
{
Device, ItemPtr -- 10
PnpCapabilities->Size, ItemLong -- 11
sizeof(WDF_DEVICE_PNP_CAPABILITIES), ItemLong -- 12
}
#typev  FxDeviceApi_cpp1887 57     "%0WDFDEVICE 0x%10!p! PowerCapabilities DeviceWake %11!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
PowerCapabilities->DeviceWake, ItemLong -- 11
}
#typev  FxDeviceApi_cpp1900 58     "%0WDFDEVICE 0x%10!p! PowerCapabilities SystemWake %11!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
PowerCapabilities->SystemWake, ItemLong -- 11
}
#typev  FxDeviceApi_cpp1929 60     "%0WDFDEVICE 0x%10!p! PowerCapabilities IdealDxStateForSx %11!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
PowerCapabilities->IdealDxStateForSx, ItemLong -- 11
}
#typev  FxDeviceApi_cpp1874 56     "%0WDFDEVICE 0x%10!p! PowerCapabilities DeviceState is invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
}
#typev  FxDeviceApi_cpp1859 55     "%0WDFDEVICE 0x%10!p! PowerCapabilities WDF_TRI_STATE %11!s! value out of range, value is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
offsets[i].Name, ItemString -- 11
value, ItemLong -- 12
}
#typev  FxDeviceApi_cpp1912 59     "%0WDFDEVICE 0x%10!p! PowerCapabilities IdealDxStateForSx %11!d! can only be set by the power policy owner"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
PowerCapabilities->IdealDxStateForSx, ItemLong -- 11
}
#typev  FxDeviceApi_cpp1828 54     "%0WDFDEVICE 0x%10!p! PowerCapabilities Size %11!d!, expected %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetPowerCapabilities
{
Device, ItemPtr -- 10
PowerCapabilities->Size, ItemLong -- 11
sizeof(WDF_DEVICE_POWER_CAPABILITIES), ItemLong -- 12
}
#typev  FxDeviceApi_cpp2242 65     "%0Queue cannot be configured for automatic dispatchingafter the WDFDEVICE %10!p! is started, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfDeviceConfigureRequestDispatching
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp2226 64     "%0Queue cannot be configured for automatic dispatching after WdfControlDeviceFinishInitializingis called on the WDFDEVICE %10!p! is called %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfDeviceConfigureRequestDispatching
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp2210 63     "%0Input WDFQUEUE 0x%10!p! doesn't belong to the WDFDEVICE 0x%11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfDeviceConfigureRequestDispatching
{
Queue, ItemPtr -- 10
Device, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDeviceApi_cpp2193 62     "%0Invalid RequestType %10!s!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfDeviceConfigureRequestDispatching
{
RequestType, ItemEnum(_WDF_REQUEST_TYPE) -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceRetrieveDeviceName
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp385 11     "%0WDFDEVICE %10!p! couldn't creat duplicate buffer, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignMofResourceName
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp372 10     "%0WDFDEVICE %10!p! MofResourceName already assigned, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignMofResourceName
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceAssignMofResourceName
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceAssignMofResourceName
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceAssignMofResourceName
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceAssignMofResourceName
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAssignMofResourceName
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp768 20     "%0WDFDEVICE 0x%10!p!  Underlying PDO is NULL"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceOpenRegistryKey
{
Device, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceOpenRegistryKey
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp1025 26     "%0Device init: has device class or SDDL set, but does not have a name, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceApi_cpp1003 25     "%0WDFDEVICE 0x%10!p!   already createdSTATUS_INVALID_DEVICE_STATE"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreate
{
Device, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp1240 37     "%0WDFDEVICE %10!p!  create sybolic link failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1224 36     "%0WDFDEVICE %10!p! allocate buffer for symbolic name failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1203 35     "%0WDFDEVICE %10!p! IoGetDeviceProperty failed second time, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1183 34     "%0WDFDEVICE %10!p! could not allocate buffer for PDO name, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1171 33     "%0WDFDEVICE %10!p! PDO name length is zero, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1158 32     "%0WDFDEVICE %10!p! PDO name too long (%11!d!, max is %12!d!), %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
length, ItemLong -- 11
USHORT_MAX, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxDeviceApi_cpp1149 31     "%0WDFDEVICE %10!p! IoGetDeviceProperty failed %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1132 30     "%0WDFDEVICE %10!p! has not yet been reported to pnp, cannot call IoGetDeviceProperty in this state, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1117 29     "%0WDFDEVICE %10!p! has no device name (use WdfDeviceInitAssignName), %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1095 28     "%0WDFDEVICE %10!p! already has a symbolic link associated with it, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateSymbolicLink
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateSymbolicLink
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateSymbolicLink
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateSymbolicLink
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp1075 27     "%0WDFDEVICE %10!p!, SymbolicLinkName has no length, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateSymbolicLink
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1339 40     "%0exit WDFDEVICE %10!p!, Property %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceQueryProperty
{
Device, ItemPtr -- 10
DeviceProperty, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDeviceApi_cpp1326 39     "%0WDFDEVICE %10!p! has no PDO (not reported yet) %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceQueryProperty
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1311 38     "%0WDFDEVICE 0x%10!p! is not a PnP device %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceQueryProperty
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceQueryProperty
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp1442 43     "%0exit WDFDEVICE %10!p!, Property %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAllocAndQueryProperty
{
Device, ItemPtr -- 10
DeviceProperty, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDeviceApi_cpp1428 42     "%0WDFDEVICE %10!p! has no PDO (not reported yet), %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAllocAndQueryProperty
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceApi_cpp1413 41     "%0WDFDEVICE %10!p! is not a PnP device, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAllocAndQueryProperty
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAllocAndQueryProperty
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp1623 50     "%0WDFDEVICE %10!p! WdfDeviceStopIdle, WaitForD0 %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceStopIdle
{
Device, ItemPtr -- 10
WaitForD0, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxDeviceApi_cpp1614 49     "%0WDFDEVICE %10!p! WdfDeviceStopIdle does nothing if you are not the power policy owner for the stack, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceStopIdle
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceStopIdle
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0ca6aa50-d6cd-17d2-6a37-002e21f199f8     core // SRC=FxDeviceApi.cpp MJ= MN=
#typev  FxDeviceApi_cpp2119 61     "%0FxFileObject::_GetFileObjectFromWdm returned an error %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceGetFileObject
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceApi_cpp2311 66     "%0No default Queue configured for Device 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=imp_WdfDeviceGetDefaultQueue
{
Device, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5d89ba6b-d009-cde0-aaf5-645ac6fbc9a1     core // SRC=FxCallbackLock.hpp MJ= MN=
#typev  FxCallbackLock_hpp126 10     "%0Callback: Driver released the callback lock 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxCallbackLock::CheckOwnership
{
this, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
55df378a-b113-d5c1-fb1b-61078cb5ed00     core // SRC=FxCallbackSpinLock.hpp MJ= MN=
#typev  FxCallbackSpinLock_hpp111 10     "%0Recursive acquire of callback lock! 0x%10!p!"      //   GLOBALS=fxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGDEVICE FUNC=FxCallbackSpinLock::Lock
{
this, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ebe0a63d-4019-4b63-7afa-ff62092d88ae     core // SRC=FxCallbackMutexLock.hpp MJ= MN=
#typev  FxCallbackMutexLock_hpp113 10     "%0Recursive acquire of callback lock 0x%10!p!"      //   GLOBALS=fxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGDEVICE FUNC=FxCallbackMutexLock::Lock
{
this, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
84d873e4-122e-865a-2c15-dfeee0deb42a     core // SRC=FxVerifierLock.hpp MJ= MN=
#typev  FxVerifierLock_hpp439 12     "%0Failed to allocate verifier lock, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxCallbackSpinLock::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxVerifierLock_hpp439 12     "%0Failed to allocate verifier lock, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxCallbackMutexLock::Initialize
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5e945d2f-b2cb-cbbf-ea19-c5029c8b69f9     core // SRC=FxDeviceBase.cpp MJ= MN=
#typev  FxDeviceBase_cpp282 11     "%0WDFHANDLE %10!p! does not have a callbacks interface in its object tree(WDFDEVICE %11!p!)"      //   GLOBALS=pOrigParent->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGOBJECT FUNC=FxDeviceBase::_SearchForDevice
{
pOrigParent->GetObjectHandle(), ItemPtr -- 10
pDeviceBase->GetHandle(), ItemPtr -- 11
}
#typev  FxDeviceBase_cpp213 10     "%0WDFHANDLE %10!p! does not have a WDFDEVICE as an ancestor"      //   GLOBALS=Object->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGOBJECT FUNC=FxDeviceBase::_SearchForDevice
{
Object->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxDeviceBase_cpp430 15     "%0WDFDEVICE %10!p! failed to initialize (commit) a WDFIOTARGET, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDeviceBase::AllocateTarget
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceBase_cpp420 14     "%0WDFDEVICE %10!p! failed to initialize a WDFIOTARGET, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDeviceBase::AllocateTarget
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceBase_cpp410 13     "%0WDFDEVICE %10!p! failed to initialize (add) a WDFIOTARGET, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDeviceBase::AllocateTarget
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceBase_cpp400 12     "%0WDFDEVICE %10!p! could not allocate a WDFIOTARGET, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDeviceBase::AllocateTarget
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ff93bfe2-bb19-4140-9958-c7709b93142d     core // SRC=FxDeviceInit.cpp MJ= MN=
#typev  FxDeviceInit_cpp172 10     "%0DeviceName is NULL, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=WDFDEVICE_INIT::AssignName
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInit_cpp226 12     "%0WDFDRIVER 0x%10!p! couldn't create Security String object %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=WDFDEVICE_INIT::_AllocateControlDeviceInit
{
Driver, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceInit_cpp203 11     "%0WDFDRIVER 0x%10!p!  couldn't allocate WDFDEVICE_INIT"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=WDFDEVICE_INIT::_AllocateControlDeviceInit
{
Driver, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp66 10     "%0Out of range IoType %10!d!"      //   GLOBALS=DeviceInit->DriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetIoType
{
IoType, ItemLong -- 10
}
#typev  FxDeviceInitAPI_cpp306 12     "%0Invalid FileObjectConfig->AutoForwardCleanupClose value 0x%10!x!, expected WDF_TRI_STATE value"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetFileObjectConfig
{
FileObjectConfig->AutoForwardCleanupClose, ItemLong -- 10
}
#typev  FxDeviceInitAPI_cpp328 13     "%0Out of range FileObjectConfig->FileObjectClass %10!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetFileObjectConfig
{
FileObjectConfig->FileObjectClass, ItemLong -- 10
}
#typev  FxDeviceInitAPI_cpp347 14     "%0Invalid FileObjectConfig->FileObjectClass %10!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetFileObjectConfig
{
FileObjectConfig->FileObjectClass, ItemLong -- 10
}
#typev  FxDeviceInitAPI_cpp274 11     "%0Invalid FileObjectConfig Size %10!d!, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetFileObjectConfig
{
FileObjectConfig->Size, ItemLong -- 10
sizeof(WDF_FILEOBJECT_CONFIG), ItemLong -- 11
}
#typev  FxDeviceInitAPI_cpp516 16     "%0PnpPowerEventCallbacks size %10!d! is invalid, exptected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetPnpPowerEventCallbacks
{
PnpPowerEventCallbacks->Size, ItemLong -- 10
sizeof(WDF_PNPPOWER_EVENT_CALLBACKS), ItemLong -- 11
}
#typev  FxDeviceInitAPI_cpp576 18     "%0PowerPolicyEventCallbacks can have either EvtDeviceArmWakeFromSx or EvtDeviceArmWakeFromSxWithReason callback pointer, but not both"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetPowerPolicyEventCallbacks
{
}
#typev  FxDeviceInitAPI_cpp558 17     "%0PowerPolicyEventCallbacks size %10!d! is invalid, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitSetPowerPolicyEventCallbacks
{
PowerPolicyEventCallbacks->Size, ItemLong -- 10
sizeof(WDF_POWER_POLICY_EVENT_CALLBACKS), ItemLong -- 11
}
#typev  FxDeviceInitAPI_cpp1008 32     "%0Not a PWDFDEVICE_INIT for an FDO"      //   GLOBALS=DeviceInit->DriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitWdmGetPhysicalDevice
{
}
#typev  FxDeviceInitAPI_cpp1049 33     "%0Not a PWDFDEVICE_INIT for an FDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitOpenRegistryKey
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp2054 63     "%0WdfDeviceShutdown Flags 0x%10!x! are invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfControlDeviceInitSetShutdownNotification
{
Flags, ItemLong -- 10
}
#typev  FxDeviceInitAPI_cpp2047 62     "%0Not a PWDFDEVICE_INIT for a control device"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfControlDeviceInitSetShutdownNotification
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignName
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignName
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignName
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignName
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignName
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp458 15     "%0Couldn't create Security descriptor STATUS_INSUFFICIENT_RESOURCES"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignSDDLString
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignSDDLString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignSDDLString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignSDDLString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceInitAssignSDDLString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignSDDLString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp643 19     "%0Pnp State is invalid %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPnpStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp653 20     "%0CallbackTypes is invalid %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPnpStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp667 21     "%0Couldn't create object PnpStateCallbacks %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPnpStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPnpStateChangeCallback
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp721 22     "%0PowerState State is invalid %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp731 23     "%0CallbackTypes is invalid %10!s!STATUS_INVALID_PARAMETER"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp745 24     "%0Couldn't create object PowerStateCallbacks %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerStateChangeCallback
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp799 25     "%0PowerPolicyState State is invalid %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerPolicyStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp810 26     "%0CallbackTypes is invalid %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerPolicyStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp823 27     "%0Couldn't create object PowerPolicyStateCallbacks %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerPolicyStateChangeCallback
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitRegisterPowerPolicyStateChangeCallback
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp915 31     "%0Couldn't create object MinorFunctionsSTATUS_INSUFFICIENT_RESOURCES"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignWdmIrpPreprocessCallback
{
}
#typev  FxDeviceInitAPI_cpp901 30     "%0Already assigned MinorfunctionsSTATUS_INVALID_DEVICE_REQUEST"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignWdmIrpPreprocessCallback
{
}
#typev  FxDeviceInitAPI_cpp888 29     "%0Couldn't create object PreprocessInfoSTATUS_INSUFFICIENT_RESOURCES"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignWdmIrpPreprocessCallback
{
}
#typev  FxDeviceInitAPI_cpp876 28     "%0MajorFunction is invalidSTATUS_INVALID_PARAMETER"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceInitAssignWdmIrpPreprocessCallback
{
}
#typev  FxDeviceInitAPI_cpp1088 34     "%0Not a PWDFDEVICE_INIT for an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetFilter
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetFilter
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1156 35     "%0Not a PWDFDEVICE_INIT for an FDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitQueryProperty
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitQueryProperty
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1234 36     "%0Not a PWDFDEVICE_INIT for an FDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitAllocAndQueryProperty
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitAllocAndQueryProperty
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1295 39     "%0Must set EvtDeviceRemoveAddedResources if EvtDeviceFilterAddResourceRequirements (%10!p!) is set"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfFdoInitSetEventCallbacks
{
FdoEventCallbacks->EvtDeviceFilterAddResourceRequirements, ItemPtr -- 10
}
#typev  FxDeviceInitAPI_cpp1281 38     "%0FdoEventCallbacks size %10!d! is invalid, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetEventCallbacks
{
FdoEventCallbacks->Size, ItemLong -- 10
sizeof(WDF_FDO_EVENT_CALLBACKS), ItemLong -- 11
}
#typev  FxDeviceInitAPI_cpp1274 37     "%0Not a PWDFDEVICE_INIT for an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetEventCallbacks
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetEventCallbacks
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1339 40     "%0Not a PWDFDEVICE_INIT for an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetDefaultChildListConfig
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoInitSetDefaultChildListConfig
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1416 42     "%0Couldn't create WDFDEVICE_INIT object"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAllocate
{
}
#typev  FxDeviceInitAPI_cpp1406 41     "%0Parent device is not a FDO (must use WDFCHILDLIST to use a PDO as a parent)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAllocate
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAllocate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1463 44     "%0DispatchTable size %10!d! is invalid, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitSetEventCallbacks
{
DispatchTable->Size, ItemLong -- 10
sizeof(WDF_PDO_EVENT_CALLBACKS), ItemLong -- 11
}
#typev  FxDeviceInitAPI_cpp1456 43     "%0Not a PWDFDEVICE_INIT for a PDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitSetEventCallbacks
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitSetEventCallbacks
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1519 46     "%0Couldn't allocate DeviceID object, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignDeviceID
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1507 45     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignDeviceID
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignDeviceID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignDeviceID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignDeviceID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignDeviceID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignDeviceID
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1575 48     "%0Couldn't allocate InstanceID object, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignInstanceID
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1563 47     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignInstanceID
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignInstanceID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignInstanceID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignInstanceID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignInstanceID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignInstanceID
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1629 50     "%0Couldn't allocate String object %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddHardwareID
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1620 49     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddHardwareID
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddHardwareID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddHardwareID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddHardwareID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddHardwareID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddHardwareID
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1691 52     "%0Couldn't allocate String objectSTATUS_INSUFFICIENT_RESOURCES"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddCompatibleID
{
}
#typev  FxDeviceInitAPI_cpp1683 51     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddCompatibleID
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddCompatibleID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddCompatibleID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddCompatibleID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddCompatibleID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddCompatibleID
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1758 54     "%0Couldn't allocate ContainerID object, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignContainerID
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1745 53     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignContainerID
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignContainerID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignContainerID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignContainerID
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAssignContainerID
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignContainerID
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1852 58     "%0Couldn't allocate DeviceLocation string, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddDeviceText
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1839 57     "%0Couldn't allocate DeviceDescription string, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddDeviceText
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1824 56     "%0Couldn't allocate DeviceText object, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddDeviceText
{
status, ItemNTSTATUS -- 10
}
#typev  FxDeviceInitAPI_cpp1814 55     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddDeviceText
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfPdoInitAddDeviceText
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAddDeviceText
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1895 59     "%0Not a PWDFDEVICE_INIT for a PDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitSetDefaultLocale
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitSetDefaultLocale
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1932 60     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignRawDevice
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAssignRawDevice
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
945640c3-2c1e-3125-c043-69e85b71574f     core // SRC=FxDeviceInitAPI.cpp MJ= MN=
#typev  FxDeviceInitAPI_cpp1968 61     "%0Not a PWDFDEVICE_INIT for a PDO, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAllowForwardingRequestToParent
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoInitAllowForwardingRequestToParent
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfControlDeviceInitAllocate
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfControlDeviceInitAllocate
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfControlDeviceInitAllocate
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfControlDeviceInitAllocate
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfControlDeviceInitAllocate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
bb6b2404-54ad-6596-40bc-d0c8596fd77c     core // SRC=FxDeviceFdoAPI.cpp MJ= MN=
#typev  FxDeviceFdoAPI_cpp80 10     "%0WDFDEVICE 0x%10!p! is either legacy or is not a Fdo, %11!s!"      //   GLOBALS=pFdo->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoAddStaticChild
{
Fdo, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceFdoAPI_cpp96 11     "%0WDFDEVICE Child 0x%10!p! is either legacy or is not a PDO, %11!s!"      //   GLOBALS=pFdo->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoAddStaticChild
{
Child, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceFdoAPI_cpp157 12     "%0Invalid WDFDEVICE %10!p! is not an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoLockStaticChildListForIteration
{
Fdo, ItemPtr -- 10
}
#typev  FxDeviceFdoAPI_cpp228 13     "%0Invalid Flags 0x%10!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoRetrieveNextStaticChild
{
Flags, ItemLong -- 10
}
#typev  FxDeviceFdoAPI_cpp239 14     "%0WDFDEVICE %10!p! is not an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoRetrieveNextStaticChild
{
Fdo, ItemPtr -- 10
}
#typev  FxDeviceFdoAPI_cpp290 15     "%0WDFDEVICE %10!p! is not an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoUnlockStaticChildListFromIteration
{
Fdo, ItemPtr -- 10
}
#typev  FxDeviceFdoAPI_cpp383 16     "%0WDFDEVICE 0x%10!p! Device is either legacy or is not a Fdo %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoQueryForInterface
{
Fdo, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoQueryForInterface
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
bb6b2404-54ad-6596-40bc-d0c8596fd77c     core // SRC=FxDeviceFdoAPI.cpp MJ= MN=
#typev  FxDeviceFdoAPI_cpp439 17     "%0WDFDEVICE %10!p! is not an FDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoGetDefaultChildList
{
Fdo, ItemPtr -- 10
}
#typev  FxDeviceFdoAPI_cpp452 18     "%0Default child list for FDO %10!p! not configured, call WdfFdoInitSetDefaultChildListConfig to do so"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFdoGetDefaultChildList
{
Fdo, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
92ac2318-49eb-003d-395d-112d89338528     core // SRC=FxDevicePdoAPI.cpp MJ= MN=
#typev  FxDevicePdoAPI_cpp72 10     "%0%10!s!: Incorrect device handle supplied (0x%11!p!).  Device is not a PDO."      //   GLOBALS=(*ObjectGlobals) LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=GetPdoPackageFromDeviceHandle
{
FunctionName, ItemString -- 10
Device, ItemPtr -- 11
}
#typev  FxDevicePdoAPI_cpp158 12     "%0Can only eject PDOs, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoRequestEject
{
status, ItemNTSTATUS -- 10
}
#typev  FxDevicePdoAPI_cpp151 11     "%0PDO WDFDEVICE %10!p! not reported yet to pnp, cannot eject!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoRequestEject
{
Device, ItemPtr -- 10
}
#typev  FxDevicePdoAPI_cpp189 13     "%0Can only eject PDOs, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfPdoGetParent
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
648094e0-543a-bbaa-576f-f009e33b01b6     core // SRC=FxDeviceControlAPI.cpp MJ= MN=
#typev  FxDeviceControlAPI_cpp56 10     "%0WDFDEVICE %10!p! not a control device"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfControlFinishInitializing
{
Device, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cfdfc5d0-52a6-121a-5bc0-3c80098bb1e0     core // SRC=FxChildList.cpp MJ= MN=
#typev  FxChildList_cpp3049 59     "%0Could not add address description size to block size, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ComputeTotalDescriptionSize
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildList_cpp3038 58     "%0Could not add ID description size to block size, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ComputeTotalDescriptionSize
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildList_cpp3026 57     "%0Config->AddressDescriptionSize %10!d! too large, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ComputeTotalDescriptionSize
{
Config->AddressDescriptionSize, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxChildList_cpp3015 56     "%0Config->IdentificationDescriptionSize %10!d! too large%11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ComputeTotalDescriptionSize
{
Config->IdentificationDescriptionSize, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDeviceDescriptionEntry::IsDeviceRemoved
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cfdfc5d0-52a6-121a-5bc0-3c80098bb1e0     core // SRC=FxChildList.cpp MJ= MN=
#typev  FxChildList_cpp531 11     "%0Begin scan on WDFCHILDLIST %10!p!, scan count %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::BeginScan
{
GetHandle(), ItemPtr -- 10
m_ScanCount, ItemLong -- 11
}
#typev  FxChildList_cpp783 17     "%0Begin iteration on WDFCHILDLIST %10!p!, scan count %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::BeginIteration
{
GetHandle(), ItemPtr -- 10
m_ScanCount, ItemLong -- 11
}
#typev  FxChildList_cpp833 19     "%0WDFCHILDLIST %10!p! cannot retrieve next device if the list is not locked for iteration, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::GetNextDevice
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxChildList_cpp1286 21     "%0Requested reenumeration for PDO WDFDEVICE %10!p!, !devobj %11!p! no possible (pending mod %12!d!, currently present %13!d!)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ReenumerateEntryLocked
{
Entry->m_Pdo->GetHandle(), ItemPtr -- 10
Entry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
IsListEmpty(&Entry->m_ModificationLink), ItemLong -- 12
Entry->IsPresent(), ItemLong -- 13
}
#typev  FxChildList_cpp1267 20     "%0Inserting clone modification for PDO WDFDEVICE %10!p!, !devobj %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ReenumerateEntryLocked
{
Entry->m_Pdo->GetHandle(), ItemPtr -- 10
Entry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp1609 23     "%0clone successful (new entry is %10!p!), marking PDO WDFDEVICE %11!p!, !devobj %12!p! as missing"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::CloneEntryLocked
{
pClone, ItemPtr -- 10
Entry->m_Pdo->GetHandle(), ItemPtr -- 11
Entry->m_Pdo->GetDeviceObject(), ItemPtr -- 12
}
#typev  FxChildList_cpp1582 22     "%0attempting to clone PDO WDFDEVICE %10!p!, !devobj %11!p!, From QDR %12!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::CloneEntryLocked
{
Entry->m_Pdo->GetHandle(), ItemPtr -- 10
Entry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
FromQDR, ItemLong -- 12
}
#typev  FxChildList_cpp1666 24     "%0Not processing modifications on WDFCHILDLIST %10!p! (list state %11!d!, scan count %12!d!)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
GetObjectHandle(), ItemPtr -- 10
m_State, ItemLong -- 11
m_ScanCount, ItemLong -- 12
}
#typev  FxChildList_cpp1822 31     "%0end processing modifications on WDFCHILDLIST %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxChildList_cpp1784 30     "%0marking entry %10!p! as needing instantiation"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
pEntry, ItemPtr -- 10
}
#typev  FxChildList_cpp1751 28     "%0entry %10!p! never reported to pnp, mark for deletion"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
pEntry, ItemPtr -- 10
}
#typev  FxChildList_cpp1760 29     "%0committing PDO WDFDEVICE %10!p!, !devobj %11!p! as not present"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp1734 27     "%0processing remove on entry %10!p!, description state is %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
pEntry, ItemPtr -- 10
pEntry->m_DescriptionState, ItemListLong(DescriptionUnspecified,DescriptionPresentNeedsInstantiation,DescriptionInstantiatedHasObject,DescriptionReportedMissing,DescriptionNotPresent) -- 11
}
#typev  FxChildList_cpp1720 26     "%0entry %10!p!, mod state is %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
pEntry, ItemPtr -- 10
pEntry->m_ModificationState, ItemListLong(ModificationUnspecified,ModificationInsert,ModificationRemove,ModificationRemoveNotify,ModificationClone) -- 11
}
#typev  FxChildList_cpp1673 25     "%0Begin processing modifications on WDFCHILDLIST %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessModificationsLocked
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxChildList_cpp2214 33     "%0WDFDEVICE %10!p! !devobj %11!p! created, but EvtChildListCreateDevice returned status %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::CreateDevice
{
init.CreatedDevice->GetHandle(), ItemPtr -- 10
init.CreatedDevice->GetDeviceObject(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildList_cpp2161 32     "%0EvtChildListCreateDevice returned a successful status %10!s! but did not create a device object"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::CreateDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildList_cpp2663 49     "%0Freeing prior relations %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pPriorRelations, ItemPtr -- 10
}
#typev  FxChildList_cpp2600 47     "%0Reporting PDO WDFDEVICE %10!p! !devobj %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2591 46     "%0PDO created successfully, WDFDEVICE %10!p! !devobj %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2585 45     "%0Creating PDO device object from reported device"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
}
#typev  FxChildList_cpp2615 48     "%0PDO WDFDEVICE %10!p! !devobj %11!p! reported as missing to pnp"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2556 44     "%0WDFCHILDLIST %10!p! prior relations %11!p! contained %12!d! objects"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
GetHandle(), ItemPtr -- 10
pPriorRelations, ItemPtr -- 11
pPriorRelations->Count, ItemLong -- 12
}
#typev  FxChildList_cpp2517 42     "%0PDO WDFDEVICE %10!p! !devobj %11!p! is a statically enumerated PDO therefore can not be cloned and is being marked missing because of failure to allocate device relations. It will be surprise removed by pnp manager. Bus driver may continue to function normally but will lose this child PDO"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2504 41     "%0PDO WDFDEVICE %10!p! !devobj %11!p! being cloned because of the failure to allocate device relations"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2493 40     "%0PDO WDFDEVICE %10!p! !devobj %11!p! being marked as missing because of failure to allocate device relations and an already existing relations %12!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
pPriorRelations, ItemPtr -- 12
}
#typev  FxChildList_cpp2537 43     "%0PDO WDFDEVICE %10!p! !devobj %11!p! reported as missing to pnp (by using existing relations)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2449 39     "%0WDFCHILDLIST %10!p! retried %11!d! times to report relations, but failed each time"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
GetHandle(), ItemPtr -- 10
FX_CHILD_LIST_MAX_RETRIES, ItemLong -- 11
}
#typev  FxChildList_cpp2442 38     "%0WDFCHILDLIST %10!p! could not allocate relations required for reporting children as missing after max retries"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
GetHandle(), ItemPtr -- 10
}
#typev  FxChildList_cpp2424 37     "%0Could not allocate relations for %10!d! devices"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
totalCount, ItemLong -- 10
}
#typev  FxChildList_cpp2397 36     "%0Nothing to report on WDFCHILDLIST %10!p!, returning early"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
GetHandle(), ItemPtr -- 10
}
#typev  FxChildList_cpp2387 35     "%0PDO WDFDEVICE %10!p! !devobj %11!p! reported as missing to pnp"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp2326 34     "%0PDO WDFDEVICE %10!p! !devobj %11!p! in a not present state, need to report as missing"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::ProcessBusRelations
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxChildList::ProcessBusRelations
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxChildList::NotifyDeviceSurpriseRemove
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cfdfc5d0-52a6-121a-5bc0-3c80098bb1e0     core // SRC=FxChildList.cpp MJ= MN=
#typev  FxChildList_cpp2905 51     "%0Removing entry %10!p!, WDFDEVICE %11!p!, PDO %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::NotifyDeviceRemove
{
pEntry, ItemPtr -- 10
pEntry->m_Pdo->GetHandle(), ItemPtr -- 11
pEntry->m_Pdo->GetPhysicalDevice(), ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxChildList::NotifyDeviceRemove
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cfdfc5d0-52a6-121a-5bc0-3c80098bb1e0     core // SRC=FxChildList.cpp MJ= MN=
#typev  FxChildList_cpp2857 50     "%0WDFCHILDLIST %10!p!:  removing children"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxChildList::NotifyDeviceRemove
{
GetHandle(), ItemPtr -- 10
}
#typev  FxChildList_cpp2974 55     "%0Config->EvtChildListCreateDevice, NULL is not allowed, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ValidateConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildList_cpp2967 54     "%0Config->IdentificationDescriptionSize must be non zero, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ValidateConfig
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildList_cpp2960 53     "%0Config->Size incorrect, expected %10!d!, got %11!d!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ValidateConfig
{
sizeof(WDF_CHILD_LIST_CONFIG), ItemLong -- 10
Config->Size, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildList_cpp2953 52     "%0Invalid Config, NULL is not allowed, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_ValidateConfig
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDeviceDescriptionEntry::ProcessDeviceRemoved
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cfdfc5d0-52a6-121a-5bc0-3c80098bb1e0     core // SRC=FxChildList.cpp MJ= MN=
#typev  FxChildList_cpp338 10     "%0No memory for WDFCHILDLIST handle, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxChildList::_CreateAndInit
{
ntStatus, ItemNTSTATUS -- 10
}
#typev  FxChildList_cpp688 16     "%0marking PDO (entry %10!p!) which needs instantiation as not present"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::EndScan
{
pEntry, ItemPtr -- 10
}
#typev  FxChildList_cpp680 15     "%0marking PDO WDFDEVICE %10!p!, !devobj %11!p! as not present"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::EndScan
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp635 14     "%0clone of PDO WDFDEVICE %10!p!, !devobj %11!p! dropped because it is missing"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::EndScan
{
pEntry->m_Pdo->GetHandle(), ItemPtr -- 10
pEntry->m_Pdo->GetDeviceObject(), ItemPtr -- 11
}
#typev  FxChildList_cpp617 13     "%0entry %10!p! modified in last scan, mod state  %11!s!,desc state %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::EndScan
{
pEntry, ItemPtr -- 10
pEntry->m_ModificationState, ItemListLong(ModificationUnspecified,ModificationInsert,ModificationRemove,ModificationRemoveNotify,ModificationClone) -- 11
pEntry->m_DescriptionState, ItemListLong(DescriptionUnspecified,DescriptionPresentNeedsInstantiation,DescriptionInstantiatedHasObject,DescriptionReportedMissing,DescriptionNotPresent) -- 12
}
#typev  FxChildList_cpp595 12     "%0End scan on WDFCHILDLIST %10!p!, scan count %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::EndScan
{
GetHandle(), ItemPtr -- 10
m_ScanCount, ItemLong -- 11
}
#typev  FxChildList_cpp795 18     "%0end iteration on WDFCHILDLIST"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxChildList::EndIteration
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
6f17437e-5a33-26e9-122d-2cccfdb78145     core // SRC=FxChildListAPI.cpp MJ= MN=
#typev  FxChildListAPI_cpp143 13     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListGetDevice
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp218 18     "%0Exit: WDFCHILDLIST %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveAddressDescription
{
DeviceList, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxChildListAPI_cpp207 17     "%0description size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveAddressDescription
{
AddressDescription->AddressDescriptionSize, ItemLong -- 10
pList->GetAddressDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp195 16     "%0cannot retrieve an address description from a list which was not initialized to use them, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveAddressDescription
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildListAPI_cpp183 15     "%0identification description size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveAddressDescription
{
IdentificationDescription->IdentificationDescriptionSize, ItemLong -- 10
pList->GetIdentificationDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp173 14     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveAddressDescription
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp244 19     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListBeginScan
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp268 20     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListEndScan
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp309 23     "%0Iterator Flags 0x%10!x! not correct, valid mask 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListBeginIteration
{
Iterator->Flags, ItemLong -- 10
WdfRetrieveAllChildren, ItemLong -- 11
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp300 22     "%0Iterator Size %10!d! not correct, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListBeginIteration
{
Iterator->Size, ItemLong -- 10
sizeof(WDF_CHILD_LIST_ITERATOR), ItemLong -- 11
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp294 21     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListBeginIteration
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp411 29     "%0address description size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveNextDevice
{
Info->AddressDescription->AddressDescriptionSize, ItemLong -- 10
pList->GetAddressDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp399 28     "%0cannot retrieve an address description from a list which was not initialized to use them, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveNextDevice
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildListAPI_cpp385 27     "%0identification description size %10!d! incorrect, expected %11!d!%12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveNextDevice
{
Info->IdentificationDescription->IdentificationDescriptionSize, ItemLong -- 10
pList->GetIdentificationDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp373 26     "%0Invalid RetrieveInfo Size %10!d!, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveNextDevice
{
Info->Size, ItemLong -- 10
sizeof(WDF_CHILD_RETRIEVE_INFO), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp363 25     "%0Iterator Flags 0x%10!x! not correct, valid mask 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveNextDevice
{
Iterator->Flags, ItemLong -- 10
WdfRetrieveAllChildren, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp355 24     "%0Iterator Size %10!d! not correct, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrieveNextDevice
{
Iterator->Size, ItemLong -- 10
sizeof(WDF_CHILD_LIST_ITERATOR), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp460 32     "%0Iterator Flags 0x%10!x! not correct, valid mask 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListEndIteration
{
Iterator->Flags, ItemLong -- 10
WdfRetrieveAllChildren, ItemLong -- 11
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp451 31     "%0Iterator Size %10!d! not correct, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListEndIteration
{
Iterator->Size, ItemLong -- 10
sizeof(WDF_CHILD_LIST_ITERATOR), ItemLong -- 11
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp445 30     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListEndIteration
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp554 38     "%0Exit: WDFCHILDLIST %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListAddOrUpdateChildDescriptionAsPresent
{
DeviceList, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxChildListAPI_cpp543 37     "%0identification description size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListAddOrUpdateChildDescriptionAsPresent
{
IdentificationDescription->IdentificationDescriptionSize, ItemLong -- 10
pList->GetIdentificationDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp529 36     "%0Must provide a valid AddressDescription because the WDFCHILDLIST 0x%10!p! is configured with AddressDescriptionSize, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListAddOrUpdateChildDescriptionAsPresent
{
DeviceList, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxChildListAPI_cpp516 35     "%0address description size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListAddOrUpdateChildDescriptionAsPresent
{
AddressDescription->AddressDescriptionSize, ItemLong -- 10
pList->GetAddressDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp505 34     "%0cannot retrieve an address description from a list which was not initialized to use them, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListAddOrUpdateChildDescriptionAsPresent
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildListAPI_cpp496 33     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListAddOrUpdateChildDescriptionAsPresent
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp602 41     "%0Exit: WDFCHILDLIST %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListUpdateChildDescriptionAsMissing
{
DeviceList, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxChildListAPI_cpp591 40     "%0identification description size %10!d! incorrect, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListUpdateChildDescriptionAsMissing
{
IdentificationDescription->IdentificationDescriptionSize, ItemLong -- 10
pList->GetIdentificationDescriptionSize(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp584 39     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListUpdateChildDescriptionAsMissing
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp632 43     "%0Exit: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListUpdateAllChildDescriptionsAsPresent
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp627 42     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListUpdateAllChildDescriptionsAsPresent
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp116 12     "%0Could not convert object to handle, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxChildListAPI_cpp81 11     "%0WDFDEVICE 0x%10!p! Config is invalid"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListCreate
{
Device, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfChildListCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
6f17437e-5a33-26e9-122d-2cccfdb78145     core // SRC=FxChildListAPI.cpp MJ= MN=
#typev  FxChildListAPI_cpp64 10     "%0Enter, WDFDEVICE %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListCreate
{
Device, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp726 50     "%0Exit: WDFCHILDLIST %10!p!, WDFDEVICE Pdo %11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
DeviceList, ItemPtr -- 10
handle, ItemPtr -- 11
RetrieveInfo->Status, ItemEnum(_WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS) -- 12
}
#typev  FxChildListAPI_cpp704 49     "%0address description size %10!d! incorrect, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
pAddr->AddressDescriptionSize, ItemLong -- 10
pList->GetAddressDescriptionSize(), ItemLong -- 11
}
#typev  FxChildListAPI_cpp696 48     "%0cannot retrieve an address description from a list which was not initialized to use them, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 10
}
#typev  FxChildListAPI_cpp684 47     "%0identification description size %10!d! incorrect, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
pId->IdentificationDescriptionSize, ItemLong -- 10
pList->GetIdentificationDescriptionSize(), ItemLong -- 11
}
#typev  FxChildListAPI_cpp676 46     "%0Invalid ID Description, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 10
}
#typev  FxChildListAPI_cpp666 45     "%0Invalid RetrieveInfo Size %10!x!, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
RetrieveInfo->Size, ItemLong -- 10
sizeof(WDF_CHILD_RETRIEVE_INFO), ItemLong -- 11
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 12
}
#typev  FxChildListAPI_cpp660 44     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListRetrievePdo
{
DeviceList, ItemPtr -- 10
}
#typev  FxChildListAPI_cpp794 54     "%0PDO WDFDEVICE %10!p! not reported yet to pnp, cannot eject!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfChildListRequestChildEject
{
device->GetHandle(), ItemPtr -- 10
}
#typev  FxChildListAPI_cpp777 53     "%0found: WDFCHILDLIST %10!p!, WDFDEVICE PDO %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListRequestChildEject
{
DeviceList, ItemPtr -- 10
device == NULL ? NULL : device->GetHandle(), ItemPtr -- 11
}
#typev  FxChildListAPI_cpp762 52     "%0identification description size 0x%10!x! incorrect, expected 0x%11!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfChildListRequestChildEject
{
IdentificationDescription->IdentificationDescriptionSize, ItemLong -- 10
pList->GetIdentificationDescriptionSize(), ItemLong -- 11
}
#typev  FxChildListAPI_cpp755 51     "%0Enter: WDFCHILDLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=imp_WdfChildListRequestChildEject
{
DeviceList, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
7944a04a-afe4-1f55-2872-6203beec82e7     core // SRC=FxMemoryBufferAPI.cpp MJ= MN=
#typev  FxMemoryBufferAPI_cpp257 11     "%0Zero bytes to copy not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfMemoryCopyToBuffer
{
status, ItemNTSTATUS -- 10
}
#typev  FxMemoryBufferAPI_cpp335 12     "%0Zero bytes to copy not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfMemoryCopyFromBuffer
{
status, ItemNTSTATUS -- 10
}
#typev  FxMemoryBufferAPI_cpp117 10     "%0BufferSize == 0 not allowed,  %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfMemoryCreate
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfMemoryCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfMemoryCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ac570fc0-1f69-3a0b-ca12-25eeb8b9ca99     core // SRC=FxMemoryBufferPreallocatedAPI.cpp MJ= MN=
#typev  FxMemoryBufferPreallocatedAPI_cpp104 10     "%0Zero BufferSize not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfMemoryCreatePreallocated
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfMemoryCreatePreallocated
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ac570fc0-1f69-3a0b-ca12-25eeb8b9ca99     core // SRC=FxMemoryBufferPreallocatedAPI.cpp MJ= MN=
#typev  FxMemoryBufferPreallocatedAPI_cpp163 11     "%0Zero BufferSize not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfMemoryAssignBuffer
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
104b2560-a5f9-dab4-2a29-6aac9a3744f5     core // SRC=FxMemoryObject.cpp MJ= MN=
#typev  FxMemoryObject_cpp119 10     "%0Target WDFMEMORY 0x%10!p! is ReadOnly"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=IFxMemory::CopyFromPtr
{
GetHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b5795e21-4f0f-0996-4319-8714498c4c3a     core // SRC=FxPoolInlines.hpp MJ= MN=
#typev  FxPoolInlines_hpp66 11     "%0Size overflow, could not add pool tracker, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxLookasideList::InitializeLookaside
{
status, ItemNTSTATUS -- 10
}
#typev  FxPoolInlines_hpp55 10     "%0Size overflow, could not add pool header, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxLookasideList::InitializeLookaside
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
2c37bbcb-f01a-5f6c-d239-ae0deab7b9a6     core // SRC=FxLookasideListAPI.cpp MJ= MN=
#typev  FxLookasideListAPI_cpp184 11     "%0Lookaside Attributes ancestor WDFDEVICE %10!p! (from ParentObject %11!p!)  is not the same as Memory Attributes ancestor WDFDEVICE %12!p! (from ParentObject %13!p!), %14!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfLookasideListCreate
{
pLookasideDB->GetHandle(), ItemPtr -- 10
LookasideAttributes->ParentObject, ItemPtr -- 11
pMemoryDB->GetHandle(), ItemPtr -- 12
MemoryAttributes->ParentObject, ItemPtr -- 13
status, ItemNTSTATUS -- 14
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfLookasideListCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
2c37bbcb-f01a-5f6c-d239-ae0deab7b9a6     core // SRC=FxLookasideListAPI.cpp MJ= MN=
#typev  FxLookasideListAPI_cpp129 10     "%0Zero BufferSize not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfLookasideListCreate
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfLookasideListCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfLookasideListCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b5795e21-4f0f-0996-4319-8714498c4c3a     core // SRC=FxPoolInlines.hpp MJ= MN=
#typev  FxPoolInlines_hpp66 11     "%0Size overflow, could not add pool tracker, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPagedLookasideListFromPool::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxPoolInlines_hpp55 10     "%0Size overflow, could not add pool header, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPagedLookasideListFromPool::Initialize
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
7eef5b63-7893-14a0-3195-d4d27490ddc7     core // SRC=FxIrpQueue.cpp MJ= MN=
#typev  FxIrpQueue_cpp881 10     "%0Irp 0x%10!p! on Queue 0x%11!p! Cancelled"      //   GLOBALS=p->m_LockObject->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxIrpQueue::_WdmCancelRoutineInternal
{
Irp, ItemPtr -- 10
p, ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d5a1144-319e-b5ec-556c-e141df711575     core // SRC=FxRequest.cpp MJ= MN=
#typev  FxRequest_cpp262 13     "%0Irp %10!p! Ownership %11!s! FxRequest %12!p!, status %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxRequest::_Create
{
Irp, ItemPtr -- 10
Ownership, ItemEnum(FxRequestIrpOwnership) -- 11
*Request, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp243 12     "%0Handle create failed %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp1027 24     "%0WDFREQUEST %10!p! cannot send and forget a create request which has a WDFFILEOBJECT created for it, it must have a completion routine and be post processsed"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::PreProcessSendAndForget
{
GetHandle(), ItemPtr -- 10
}
#typev  FxRequest_cpp1000 23     "%0WDFREQUEST %10!p! cannot send and forget will not execute completion routine %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::PreProcessSendAndForget
{
GetHandle(), ItemPtr -- 10
m_CompletionRoutine.m_Completion, ItemPtr -- 11
}
#typev  FxRequest_cpp2214 57     "%0WDFREQUEST 0x%10!p! has already been completed"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::SetCompletionState
{
GetHandle(), ItemPtr -- 10
}
#typev  FxRequest_cpp2448 60     "%0WDFREQUEST 0x%10!p! not on IrpQueue"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::RemoveFromIrpQueue
{
GetHandle(), ItemPtr -- 10
}
#typev  FxRequest_cpp2599 61     "%0Driver is trying to reuse WDFREQUEST 0x%10!p! while it is still active on WDFIOTARGET 0x%11!p!."      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::Reuse
{
GetTraceObjectHandle(), ItemPtr -- 10
GetTarget()->GetHandle(), ItemPtr -- 11
}
#typev  FxRequest_cpp2834 62     "%0Attempt to release an IRP reference without adding one first WDFREQUEST 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ReleaseIrpReference
{
GetHandle(), ItemPtr -- 10
}
#typev  FxRequest_cpp2971 67     "%0Exception is raised for Address 0x%10!p!, Length %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForRead
{
Buffer, ItemPtr -- 10
Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp2962 66     "%0Failed to allocate MDL %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForRead
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp2943 65     "%0Attempt to access user mode memory from the wrong process Irp->Tail.Overlay.Thread 0x%10!p!, PsGetCurrentThread 0x%11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForRead
{
thread, ItemPtr -- 10
PsGetCurrentThread(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp2910 64     "%0WDFREQUEST %10!p! has already been completed or has no PIRP assignment, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForRead
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp2897 63     "%0Length of zero not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForRead
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp3159 72     "%0Exception is raised for Address 0x%10!p!, Length %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForWrite
{
Buffer, ItemPtr -- 10
Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp3150 71     "%0Failed to allocate MDL %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForWrite
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp3132 70     "%0Attempt to access user mode memory from the wrong process Irp->Tail.Overlay.Thread 0x%10!p!, PsGetCurrentThread 0x%11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForWrite
{
thread, ItemPtr -- 10
PsGetCurrentThread(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp3100 69     "%0WDFREQUEST %10!p! has already been completed or has no PIRP assignment, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForWrite
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3087 68     "%0Length of zero not allowed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::ProbeAndLockForWrite
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp3387 74     "%0WDFREQUEST 0x%10!p! has been used as a TagRequest in WdfIoQueueFindRequest. A TagRequest cannot be used until it is retrieved by WdfIoQueueRetrieveFoundRequest"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierVerifyRequestIsDriverOwned
{
GetHandle(), ItemPtr -- 10
}
#typev  FxRequest_cpp3378 73     "%0WDFREQUEST 0x%10!p! is not owned by the driver, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierVerifyRequestIsDriverOwned
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3419 75     "%0WDFREQUEST 0x%10!p! is not cancelable, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierVerifyRequestIsCancelable
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3447 76     "%0WDFREQUEST 0x%10!p! should be unmarked cancelable by calling WdfRequestUnmarkCancelable, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierVerifyRequestIsNotCancelable
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3476 77     "%0This call is valid only in EvtIoInCallerContext callback, WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierVerifyRequestIsInCallerContext
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3504 78     "%0This call is valid only in EvtIoStop callback, WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxRequest::VerifierVerifyRequestIsInEvtIoStopContext
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3532 79     "%0WDFREQUEST 0x%10!p! is already completed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierVerifyRequestIsNotCompleted
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3567 80     "%0Request 0x%10!p! is not returned by WdfIoQueueFindRequest, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxRequest::VerifierVerifyRequestIsTagRequest
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp3592 81     "%0Request 0x%10!p! was not allocated for an incoming IRP, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxRequest::VerifierVerifyRequestIsAllocatedFromIo
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp191 11     "%0Could not commit FxRequest %10!s!"      //   GLOBALS=Device->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::_CreateForPackage
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp155 10     "%0Memory allocation failed %10!s!"      //   GLOBALS=Device->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::_CreateForPackage
{
STATUS_INSUFFICIENT_RESOURCES, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp525 15     "%0WDFREQUEST %10!p!, MJ 0x%11!x!, Information 0x%12!I64x! is greater then buffer length 0x%13!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierValidateCompletedRequest
{
GetHandle(), ItemPtr -- 10
stack->MajorFunction, ItemLong -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
length, ItemLong -- 13
}
#typev  FxRequest_cpp439 14     "%0Completing Cancelable WDFREQUEST %10!p!.  This results in a race condition in the device driver that can cause double completions.  Call WdfRequestUnmarkCancelable before WdfRequestComplete.  If WdfRequestUnmarkCancelable returns STATUS_CANCELLED, do not complete the request until the EvtIoCancel handler is called.  The straightforward way to ensure this is to complete a canceled request from the EvIoCancel callback."      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::VerifierValidateCompletedRequest
{
GetHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b46a3fe3-72fd-4697-d134-b17aed43a023     core // SRC=FxIoQueue.hpp MJ= MN=
#typev  FxIoQueue_hpp592 11     "%0WDFREQUEST 0x%10!p! is on a cancellation list for WDFQUEUE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxRequest::PostProcessCompletion
{
Request->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_hpp592 11     "%0WDFREQUEST 0x%10!p! is on a cancellation list for WDFQUEUE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxRequest::PostProcessCompletionForReserved
{
Request->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0d5a1144-319e-b5ec-556c-e141df711575     core // SRC=FxRequest.cpp MJ= MN=
#typev  FxRequest_cpp1343 30     "%0Unrecognized Major Function 0x%10!x! on WDFDEVICE 0x%11!p! WDFREQUEST 0x%12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
stack->MajorFunction, ItemLong -- 10
GetDevice()->GetHandle(), ItemPtr -- 11
GetHandle(), ItemPtr -- 12
}
#typev  FxRequest_cpp1405 33     "%0WDFREQUEST 0x%10!p! could not get a system address for PMDL 0x%11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
GetHandle(), ItemPtr -- 10
pMdl, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp1377 32     "%0WDFREQUEST 0x%10!p!, direct io device, PMDL is NULL, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1357 31     "%0WDFREQUEST 0x%10!p! length is zero, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1317 29     "%0Driver must use METHOD_BUFFERED or METHOD_xx_DIRECT I/O for this call, or use WdfDeviceInitSetIoInCallerContextCallback to probe and lock user mode memory %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp1309 28     "%0Attempt to get UserMode Buffer Pointer for METHOD_NEITHER DeviceControl 0x%10!x!, WDFDEVICE 0x%11!p!, WDFREQUEST 0x%12!p!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
stack->Parameters.DeviceIoControl.IoControlCode, ItemLong -- 10
GetDevice()->GetHandle(), ItemPtr -- 11
GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp1283 27     "%0WDFREQUEST %10!p! InputBufferLength length is zero, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1257 26     "%0Driver must use buffered or direct I/O for this call, or use WdfDeviceInitSetIoInCallerContextCallback to probe and lock user mode memory"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
}
#typev  FxRequest_cpp1251 25     "%0Attempt to get UserMode Buffer Pointer for WDFDEVICE 0x%10!p!, WDFREQUEST 0x%11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMemoryObject
{
GetDevice()->GetHandle(), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp1653 38     "%0WDFREQUEST 0x%10!p! could not get a system address for PMDL0x%11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMemoryObject
{
GetHandle(), ItemPtr -- 10
pMdl, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp1625 37     "%0WDFREQUEST 0x%10!p!, METHOD_IN_DIRECT IOCTL PMDL is NULL, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMemoryObject
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1602 36     "%0Driver must use METHOD_BUFFERED or METHOD_xx_DIRECT I/O for this call, or use WdfDeviceInitSetIoInCallerContextCallback to probe and lock user mode memory"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMemoryObject
{
}
#typev  FxRequest_cpp1594 35     "%0Attempt to get UserMode Buffer Pointer for METHOD_NEITHER DeviceControl 0x%10!x!, WDFDEVICE 0x%11!p!, WDFREQUEST 0x%12!p!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMemoryObject
{
stack->Parameters.DeviceIoControl.IoControlCode, ItemLong -- 10
GetDevice()->GetObjectHandle(), ItemPtr -- 11
GetObjectHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp1552 34     "%0WDFREQUEST 0x%10!p! IOCTL output buffer length is zero, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMemoryObject
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1899 47     "%0WDFREQUEST 0x%10!p!, SystemBuffer length is 0, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1893 46     "%0WDFREQUEST 0x%10!p!, SystemBuffer is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1927 48     "%0Could not allocate MDL for buffer 0x%10!p! Length %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
pBuffer, ItemPtr -- 10
length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp1766 40     "%0Driver must use METHOD_BUFFERED or METHOD_xx_DIRECT I/O for this call, or use WdfDeviceInitSetIoInCallerContextCallback to probe and lock user mode memory"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
}
#typev  FxRequest_cpp1759 39     "%0Attempt to get UserMode MDL for METHOD_NEITHER DeviceControl 0x%10!x!, WDFDEVICE 0x%11!p!, WDFREQUEST 0x%12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
stack->Parameters.DeviceIoControl.IoControlCode, ItemLong -- 10
GetDevice()->GetHandle(), ItemPtr -- 11
GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp1869 45     "%0Unrecognized I/O Type %10!d! on WDFDEVICE 0x%11!p!, WDFREQUEST 0x%12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
ioType, ItemLong -- 10
GetDevice()->GetHandle(), ItemPtr -- 11
GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp1854 44     "%0Driver must use buffered or direct I/O for this call, or use WdfDeviceInitSetIoInCallerContextCallback to probe and lock user mode memory"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
}
#typev  FxRequest_cpp1848 43     "%0Attempt to get UserMode Buffer Pointer for WDFDEVICE 0x%10!p!, WDFREQUEST 0x%11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
GetDevice()->GetHandle(), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp1832 42     "%0WDFREQUEST 0x%10!p! for a direct io device, PMDL is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp1806 41     "%0WDFREQUEST %10!p! no Automatic MDL mapping for buffered requestmajor function 0x%11!x! available for WDFDEVICE 0x%12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetMdl
{
GetHandle(), ItemPtr -- 10
stack->MajorFunction, ItemLong -- 11
GetDevice()->GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp2139 55     "%0WDFREQUEST 0x%10!p!, SystemBuffer length is 0, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp2133 54     "%0WDFREQUEST 0x%10!p!, SystemBuffer is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp2168 56     "%0WDFREQUEST %10!p! could not allocate MDL for buffer 0x%11!p! Length %12!d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
GetHandle(), ItemPtr -- 10
pBuffer, ItemPtr -- 11
length, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp2066 50     "%0WDFREQUEST 0x%10!p!, METHOD_IN_DIRECT IOCTL, PMDL is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp2088 51     "%0WDFREQUEST 0x%10!p!, METHOD_OUT_DIRECT IOCTL, PMDL is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequest_cpp2110 53     "%0Driver must use METHOD_BUFFERED or METHOD_xx_DIRECT I/O for this call, or use WdfDeviceInitSetIoInCallerContextCallback to probe and lock user mode memory"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
}
#typev  FxRequest_cpp2103 52     "%0Attempt to get UserMode Buffer Pointer for METHOD_NEITHER DeviceControl 0x%10!x!, WDFDEVICE 0x%11!p!, WDFREQUEST 0x%12!p!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
stack->Parameters.DeviceIoControl.IoControlCode, ItemLong -- 10
GetDevice()->GetHandle(), ItemPtr -- 11
GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequest_cpp2036 49     "%0WDFREQUEST %10!p! (MajorFunction is 0x%11!x!) this call is only valid for IOCTLs, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::GetDeviceControlOutputMdl
{
GetHandle(), ItemPtr -- 10
stack->MajorFunction, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp2273 58     "%0Already in FxIrpQueue 0x%10!p! WDFREQUEST 0x%11!p! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::InsertTailIrpQueue
{
IrpQueue, ItemPtr -- 10
GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequest_cpp2348 59     "%0Already in Queue 0x%10!p! WDFREQUEST 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::InsertHeadIrpQueue
{
IrpQueue, ItemPtr -- 10
GetHandle(), ItemPtr -- 11
}
#typev  FxRequest_cpp816 22     "%0IOCTL output WDFMEMORY 0x%10!p!, buffer %11!p!, PMDL %12!p!, length %13!I64d! bytes"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
m_OutputBuffer.GetHandle(), ItemPtr -- 10
m_OutputBuffer.GetBuffer(), ItemPtr -- 11
m_OutputBuffer.GetMdl(), ItemPtr -- 12
m_OutputBuffer.GetBufferSize(), ItemLongLong -- 13
}
#typev  FxRequest_cpp807 21     "%0WDFMEMORY 0x%10!p!, buffer %11!p!, PMDL %12!p!, length %13!I64d! bytes"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
m_SystemBuffer.GetHandle(), ItemPtr -- 10
m_SystemBuffer.GetBuffer(), ItemPtr -- 11
m_SystemBuffer.GetMdl(), ItemPtr -- 12
m_SystemBuffer.GetBufferSize(), ItemLongLong -- 13
}
#typev  FxRequest_cpp791 20     "%0WDFREQUEST 0x%10!p!, PIRP 0x%11!p!, Major Function 0x%12!x!,  completed with outstanding references on WDFMEMORY 0x%13!p! or 0x%14!p! retrieved from this request"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
GetObjectHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetMajorFunction(), ItemLong -- 12
((m_RequestBaseFlags & FxRequestBaseSystemMdlMapped) ||               (m_RequestBaseStaticFlags & FxRequestBaseStaticSystemBufferValid)) ?                  m_SystemBuffer.GetHandle() : NULL, ItemPtr -- 13
((m_RequestBaseFlags & FxRequestBaseOutputMdlMapped) ||               (m_RequestBaseStaticFlags & FxRequestBaseStaticOutputBufferValid)) ?                  m_OutputBuffer.GetHandle() : NULL, ItemPtr -- 14
}
#typev  FxRequest_cpp687 19     "%0... to %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
Status, ItemNTSTATUS -- 10
}
#typev  FxRequest_cpp680 18     "%0Unknown WDF NTSTATUS 0x%10!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
Status, ItemLong -- 10
}
#typev  FxRequest_cpp661 17     "%0Converting WDF NTSTATUS value 0x%10!x!..."      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
Status, ItemLong -- 10
}
#typev  FxRequest_cpp630 16     "%0Driver that handled WDFREQUEST 0x%10!p! is requesting data to   be written back to the UserBuffer by returing a non zero value  in the Irp 0x%11!p! Information field even though the OutputBufferLength  is zero"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=FxRequest::CompleteInternal
{
GetObjectHandle(), ItemPtr -- 10
pIrp, ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp250 13     "%0ReuseParams Flags 0x%10!x!, valid mask 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestReuse
{
ReuseParams->Flags, ItemLong -- 10
(ULONG) ~WDF_REQUEST_REUSE_VALID_FLAGS, ItemLong -- 11
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 12
}
#typev  FxRequestApi_cpp242 12     "%0ReuseParams Size %10!d!, expected %11!d! %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestReuse
{
ReuseParams->Size, ItemLong -- 10
sizeof(WDF_REQUEST_REUSE_PARAMS), ItemLong -- 11
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 12
}
#typev  FxRequestApi_cpp712 19     "%0This call is not valid on the Read request, you should call WdfRequestRetrieveOutputMemory to get the Memory for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveInputMemory
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp827 21     "%0This call is not valid on the Write request, you should call WdfRequestRetrieveInputMemory to get the Memory for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveOutputMemory
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp976 24     "%0WDFREQUEST 0x%10!p! buffer size %11!I64d! is less than RequiredLength %12!I64d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveInputBuffer
{
Request, ItemPtr -- 10
length, ItemLongLong -- 11
RequiredLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequestApi_cpp961 23     "%0This call is not valid on the read request, you should call WdfRequestRetrieveOutputBuffer to get the buffer for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveInputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1129 27     "%0WDFREQUEST 0x%10!p! buffer size %11!I64d! is less than RequiredLength %12!I64d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveOutputBuffer
{
Request, ItemPtr -- 10
length, ItemLongLong -- 11
RequiredLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequestApi_cpp1107 26     "%0This call is not valid on write request, you should call WdfRequestRetrieveInputBuffer to get the buffer for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveOutputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1639 41     "%0This call is not valid on the Read request, you should call WdfRequestRetrieveOutputMdl to get the Mdl for WFDREQUEST 0x%10!p!,  %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveInputWdmMdl
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1740 43     "%0This call is not valid on the Write request, you should call WdfRequestRetrieveInputMemory to get the Memory for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveOutputWdmMdl
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp2114 50     "%0Enter: WDFREQUEST %10!p! to be cancelled"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestCancelSentRequest
{
Request, ItemPtr -- 10
}
#typev  FxRequestApi_cpp2396 57     "%0Params size %10!d! incorrect, expected %11!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestGetParameters
{
Parameters->Size, ItemLong -- 10
sizeof(WDF_REQUEST_PARAMETERS), ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
959a65ca-cef5-d1c3-3f7f-9ad2e83f10b9     core // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp534 10     "%0WdfRequestGetCompletionParams will not return valid information if the request is not formatted using WdfIoTargetFormatxxx DDIs"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestGetCompletionParams
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp2445 59     "%0Params Size 0x%10!x!, expected 0x%11!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestGetCompletionParams
{
Params->Size, ItemLong -- 10
sizeof(WDF_REQUEST_COMPLETION_PARAMS), ItemLong -- 11
}
#typev  FxRequestApi_cpp2512 61     "%0WDFREQUEST is already completed 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestWdmGetIrp
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp3027 71     "%0WDFREQUEST %10!p! doesn't belong to any queue %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestForwardToIoQueue
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp3136 74     "%0WDFREQUEST %10!p! doesn't belong to any queue %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestForwardToParentDeviceIoQueue
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp3126 73     "%0ForwardOptions %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRequestForwardToParentDeviceIoQueue
{
ForwardOptions, ItemPtr -- 10
ForwardOptions->Flags, ItemLong -- 11
WDF_REQUEST_FORWARD_OPTION_SEND_AND_FORGET, ItemLong -- 12
}
#typev  FxRequestApi_cpp3114 72     "%0ForwardOptions %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRequestForwardToParentDeviceIoQueue
{
ForwardOptions, ItemPtr -- 10
sizeof(WDF_REQUEST_FORWARD_OPTIONS), ItemLong -- 11
ForwardOptions->Size, ItemLong -- 12
}
#typev  FxRequestApi_cpp3196 76     "%0WDFREQUEST %10!p! doesn't belong to any queue %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRequeue
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp3258 78     "%0WDFREQUEST %10!p! doesn't belong to any queue"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestMarkCancelable
{
Request, ItemPtr -- 10
}
#typev  FxRequestApi_cpp3331 80     "%0WDFREQUEST %10!p! doesn't belong to any queue %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestMarkCancelableEx
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp3392 82     "%0WDFREQUEST %10!p! doesn't belong to any queue %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestUnmarkCancelable
{
Request, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
959a65ca-cef5-d1c3-3f7f-9ad2e83f10b9     core // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestComplete
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
#typev  FxRequest_hpp825 12     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestCompleteWithPriorityBoost
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestCompleteWithInformation
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp1339 33     "%0Error: This call is valid only on method-neither ioctl and write WDFREQUEST %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserInputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1319 32     "%0WDFREQUEST 0x%10!p! buffer size %11!d! is less than RequiredLength %12!I64d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserInputBuffer
{
Request, ItemPtr -- 10
irpStack->Parameters.Write.Length, ItemLong -- 11
RequiredLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequestApi_cpp1295 31     "%0WDFREQUEST %10!p! buffer size %11!d! is less than RequiredLength %12!I64d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserInputBuffer
{
Request, ItemPtr -- 10
irpStack->Parameters.DeviceIoControl.InputBufferLength, ItemLong -- 11
RequiredLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequestApi_cpp1278 30     "%0This call is not valid on internal-ioctl request, you should call safer WdfRequestRetrieveInputBuffer to get the buffer for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserInputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1266 29     "%0This call is not valid on read request, you should call WdfRequestRetrieveUnsafeUserOutputBuffer to get the buffer for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserInputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRequestRetrieveUnsafeUserInputBuffer
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp1542 39     "%0Error: This call is valid only on method-neither ioctl and read WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserOutputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1522 38     "%0WDFREQUEST 0x%10!p! buffer size %11!d! is less than RequiredLength %12!I64d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserOutputBuffer
{
Request, ItemPtr -- 10
irpStack->Parameters.Read.Length, ItemLong -- 11
RequiredLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequestApi_cpp1498 37     "%0WDFREQUEST 0x%10!p! buffer size %11!d! is less than RequiredLength %12!I64d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserOutputBuffer
{
Request, ItemPtr -- 10
irpStack->Parameters.DeviceIoControl.OutputBufferLength, ItemLong -- 11
RequiredLength, ItemLongLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRequestApi_cpp1481 36     "%0This call is not valid on an internal IOCTL request, you should call safer WdfRequestRetrieveOutputBuffer to get the buffer for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserOutputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1468 35     "%0This call is not valid on Write request, you should call WdfRequestRetrieveUnsafeUserInputBuffer to get the buffer for WDFREQUEST 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestRetrieveUnsafeUserOutputBuffer
{
Request, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRequestRetrieveUnsafeUserOutputBuffer
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp1965 46     "%0WDFREQUEST %10!p! is a WDFQUEUE presented request with no completion routine, %11!s!"      //   GLOBALS=WDFREQUEST_FXREQUEST(Request)->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfRequestSend
{
WDFREQUEST_FXREQUEST(Request)->GetHandle(), ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1905 45     "%0Cannot send-and-forget WDFREQUEST 0x%10!p! with formatted IO context, %11!s!"      //   GLOBALS=WDFREQUEST_FXREQUEST(Request)->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfRequestSend
{
WDFREQUEST_FXREQUEST(Request)->GetHandle(), ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxRequestApi_cpp1889 44     "%0WDFREQUEST %10!p! must be a WDFQUEUE presented request"      //   GLOBALS=WDFREQUEST_FXREQUEST(Request)->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=imp_WdfRequestSend
{
WDFREQUEST_FXREQUEST(Request)->GetHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
6f7247f4-ed63-18aa-d458-b47a6399b1c6     core // SRC=FxRequestValidateFunctions.hpp MJ= MN=
#typev  FxRequestValidateFunctions_hpp82 12     "%0Options %10!p!, if WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET (0x%11!x!) is set, no other Flags 0x%12!x! can be set"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRequestSend
{
Options, ItemPtr -- 10
WDF_REQUEST_SEND_OPTION_SEND_AND_FORGET, ItemLong -- 11
Options->Flags, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp68 11     "%0Options %10!p! Flags 0x%11!x! invalid, valid mask is 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRequestSend
{
Options, ItemPtr -- 10
Options->Flags, ItemLong -- 11
WDF_REQUEST_SEND_OPTIONS_VALID_FLAGS, ItemLong -- 12
}
#typev  FxRequestValidateFunctions_hpp56 10     "%0Options %10!p! Size incorrect, expected %11!d!, got %12!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRequestSend
{
Options, ItemPtr -- 10
sizeof(WDF_REQUEST_SEND_OPTIONS), ItemLong -- 11
Options->Size, ItemLong -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp2628 63     "%0GetFileobject failed with %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestGetFileObject
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequestApi_cpp2733 65     "%0ProbeAndLockForRead failed with %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestProbeAndLockUserBufferForRead
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRequestProbeAndLockUserBufferForRead
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp2832 67     "%0ProbeAndLockForWrite failed with %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestProbeAndLockUserBufferForWrite
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRequestProbeAndLockUserBufferForWrite
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
deded80b-d813-7fee-cc50-62d8e6603942     core // SRC=FxRequestApi.cpp MJ= MN=
#typev  FxRequestApi_cpp2945 70     "%0Getting queue handle for Create request is not allowed for WDFREQUEST 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfRequestGetIoQueue
{
pRequest, ItemPtr -- 10
}
#typev  FxRequestApi_cpp2932 69     "%0WDFREQUEST %10!p! doesn't belong to any queue"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGREQUEST FUNC=imp_WdfRequestGetIoQueue
{
Request, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a27c2423-809b-5c75-69d7-b23c77e0f4e8     core // SRC=FxRequestBase.cpp MJ= MN=
#typev  FxRequestBase_cpp465 17     "%0Could not cancel request %10!p!, already completed"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::Cancel
{
this, ItemPtr -- 10
}
#typev  FxRequestBase_cpp456 16     "%0Request %10!p!, PIRP %11!p!, completed synchronously in cancel call, completing request on target %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::Cancel
{
this, ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Target, ItemPtr -- 12
}
#typev  FxRequestBase_cpp438 15     "%0Request %10!p!, PIRP %11!p!, cancel result %12!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::Cancel
{
this, ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
result, ItemLong -- 12
}
#typev  FxRequestBase_cpp400 14     "%0Request %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::Cancel
{
this, ItemPtr -- 10
}
#typev  FxRequestBase_cpp640 19     "%0Request %10!p!, canceled timer successfully"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::CancelTimer
{
this, ItemPtr -- 10
}
#typev  FxRequestBase_cpp630 18     "%0Request %10!p!, did not cancel timer"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::CancelTimer
{
this, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
84d873e4-122e-865a-2c15-dfeee0deb42a     core // SRC=FxVerifierLock.hpp MJ= MN=
#typev  FxVerifierLock_hpp474 13     "%0Failed to allocate verifier lock, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxNonPagedObject::FxNonPagedObject
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a27c2423-809b-5c75-69d7-b23c77e0f4e8     core // SRC=FxRequestBase.cpp MJ= MN=
#typev  FxRequestBase_cpp219 13     "%0Freeing irp %10!p! from WDFREQUEST %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxRequestBase::ValidateTarget
{
pOldIrp, ItemPtr -- 10
GetTraceObjectHandle(), ItemPtr -- 11
}
#typev  FxRequestBase_cpp187 11     "%0Could not allocate irp for WDFREQUEST %10!p! for WDFIOTARGET %11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxRequestBase::ValidateTarget
{
GetTraceObjectHandle(), ItemPtr -- 10
Target->GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequestBase_cpp212 12     "%0Cannot reallocate PIRP for WDFREQUEST %10!p! using WDFIOTARGET %11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxRequestBase::ValidateTarget
{
GetTraceObjectHandle(), ItemPtr -- 10
Target->GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRequestBase_cpp172 10     "%0WDFIOTARGET %10!p! is closed, cannot validate, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIOTARGET FUNC=FxRequestBase::ValidateTarget
{
Target->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
8eddbdaf-06e4-4c4b-e6ad-30daf40cc384     core // SRC=FxSyncRequest.cpp MJ= MN=
#typev  FxSyncRequest_cpp186 12     "%0SyncRequest %10!p!, signaling event %11!p! on SelfDestruct"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxSyncRequest::SelfDestruct
{
this, ItemPtr -- 10
m_DestroyedEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxSyncRequest_cpp157 11     "%0Request %10!p!, wait on event %11!p! done"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxSyncRequest::~FxSyncRequest
{
this, ItemPtr -- 10
m_DestroyedEvent.GetEvent(), ItemPtr -- 11
}
#typev  FxSyncRequest_cpp151 10     "%0Request %10!p!, waiting on event %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxSyncRequest::~FxSyncRequest
{
this, ItemPtr -- 10
m_DestroyedEvent.GetEvent(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
58af8ac2-074e-aafa-79a2-3f65e7b49093     core // SRC=tracing.cpp MJ= MN=
#typev  tracing_cpp525 11     "%0FxIFR has been started with a size override:  size 0x%10!x! bytes, # Pages %11!d!.  An extended IFR size may not be written to a minidump!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGDRIVER FUNC=FxIFRStart
{
size, ItemLong -- 10
size/PAGE_SIZE, ItemLong -- 11
}
#typev  tracing_cpp521 10     "%0FxIFR logging started"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDRIVER FUNC=FxIFRStart
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b6747dd9-92bd-2dd0-973d-0662dc3617d9     core // SRC=FxSystemThread.cpp MJ= MN=
#typev  FxSystemThread_cpp169 12     "%0Could not create system thread %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxSystemThread::CreateThread
{
status, ItemNTSTATUS -- 10
}
#typev  FxSystemThread_cpp87 11     "%0WDFDEVICE 0x%10!p!, !devobj %11!p!, could not initialize power thread, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxSystemThread::_CreateAndInit
{
Device, ItemPtr -- 10
DeviceObject, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxSystemThread_cpp75 10     "%0WDFDEVICE 0x%10!p! !devobj %11!p! could not allocate a thread for handling power requests %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxSystemThread::_CreateAndInit
{
Device, ItemPtr -- 10
DeviceObject, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
37b0b202-397b-4045-77c2-bd2e96f7f679     core // SRC=FxDpc.cpp MJ= MN=
#typev  FxDpc_cpp68 10     "%0Destroy WDFDPC %10!p! destroyed without calling WdfObjectDelete, or by Framework processing DeviceRemove.  Possible reference count problem?"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDpc::~FxDpc
{
GetObjectHandleUnchecked(), ItemPtr -- 10
}
#typev  FxDpc_cpp202 11     "%0ParentObject %10!p! can not automatically synchronize callbacks with a DPC since it is configured for passive level callback constraints. Set AutomaticSerialization to FALSE. %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxDpc::Initialize
{
Attributes->ParentObject, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
e4b90dff-39d3-be7d-57b7-3b90800c815f     core // SRC=FxDpcApi.cpp MJ= MN=
#typev  FxDpcApi_cpp108 10     "%0WDF_DPC_CONFIG got Size %10!d!, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDpcCreate
{
Config->Size, ItemLong -- 10
sizeof(WDF_DPC_CONFIG), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp100 12     "%0ParentObject required in WDF_OBJECT_ATTRIBUTES %10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDpcCreate
{
Attributes, ItemPtr -- 10
STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 11
}
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDpcCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp78 10     "%0WDF_OBJECT_ATTRIBUTES required, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDpcCreate
{
(ULONG) STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDpcCancel
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
42d2daa7-ba12-8bfb-3881-162a0e349063     core // SRC=FxTimer.cpp MJ= MN=
#typev  FxTimer_cpp76 10     "%0WDFTIMER %10!p! destroyed without calling WdfObjectDelete, or by Framework processing DeviceRemove. Possible reference count problem?"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::~FxTimer
{
GetObjectHandleUnchecked(), ItemPtr -- 10
}
#typev  FxTimer_cpp504 15     "%0WDFTIMER 0x%10!p! is been stopped by PRKTHREAD 0x%11!p!. Ignoring the request to start timer"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Start
{
GetHandle(), ItemPtr -- 10
m_StopThread, ItemPtr -- 11
}
#typev  FxTimer_cpp497 14     "%0Calling WdfTimerStart when the timer object %10!p! is running down will lead to a crash"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Start
{
GetHandle(), ItemPtr -- 10
}
#typev  FxTimer_cpp630 18     "%0Detected multiple calls to WdfTimerStop for WDFTIMER 0x%10!p!, stop in progress on PRKTHREAD 0x%11!p!, current PRKTHREAD 0x%12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Stop
{
GetHandle(), ItemPtr -- 10
m_StopThread, ItemPtr -- 11
KeGetCurrentThread(), ItemPtr -- 12
}
#typev  FxTimer_cpp611 17     "%0WdfTimerStop(Wait==TRUE) called at IRQL > PASSIVE_LEVEL, current IRQL = 0x%10!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Stop
{
KeGetCurrentIrql(), ItemLong -- 10
}
#typev  FxTimer_cpp600 16     "%0Calling WdfTimerStop from within the WDFTIMER %10!p! callback will lead to deadlock, PRKTHREAD %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Stop
{
GetHandle(), ItemPtr -- 10
m_CallbackThread, ItemPtr -- 11
}
#typev  FxTimer_cpp425 13     "%0Deleting WDFTIMER %10!p! from with in the callback will lead to deadlock, PRKTHREAD %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::FlushAndRundown
{
GetHandle(), ItemPtr -- 10
m_CallbackThread, ItemPtr -- 11
}
#typev  FxTimer_cpp222 12     "%0Could not allocate workitem: %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxTimer_cpp202 11     "%0ParentObject %10!p! cannot automatically synchronize callbacks with a Timer since it is configured for passive level callback constraints. Set AutomaticSerialization to FALSE. %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTimer::Initialize
{
Attributes->ParentObject, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
60f8d981-450e-a358-c9d4-18dcfc910c03     core // SRC=FxTimerApi.cpp MJ= MN=
#typev  FxTimerApi_cpp150 13     "%0Passive level periodic timer is not supported. Use one shot timer and queue the next timer from the callback or use a dedicated thread, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxTimerApi_cpp130 12     "%0TolerableDelay value %10!u! cannot be greater than MAXLONG, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerCreate
{
Config->TolerableDelay, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxTimerApi_cpp118 11     "%0Period value %10!u! for a periodic timer cannot be greater than MAXLONG, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerCreate
{
Config->Period, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxTimerApi_cpp107 10     "%0PWDF_TIMER_CONFIG Size %10!d!, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerCreate
{
Config->Size, ItemLong -- 10
sizeof(WDF_TIMER_CONFIG), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp100 12     "%0ParentObject required in WDF_OBJECT_ATTRIBUTES %10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerCreate
{
Attributes, ItemPtr -- 10
STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 11
}
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfTimerCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp78 10     "%0WDF_OBJECT_ATTRIBUTES required, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerCreate
{
(ULONG) STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfTimerStop
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5b00dd93-8018-5038-ad69-e6dd239756c8     core // SRC=FxWorkItem.cpp MJ= MN=
#typev  FxWorkItem_cpp212 12     "%0Could not allocate IoWorkItem, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWorkItem::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxWorkItem_cpp194 11     "%0ParentObject %10!p! cannot automatically synchronize callbacks with a WorkItem since it is not configured for passive level callback constraints.  Use a WDFDPC instead or set AutomaticSerialization to FALSE.%11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWorkItem::Initialize
{
Attributes->ParentObject, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWorkItem_cpp75 10     "%0WDFWORKITEM %10!p! destroyed without calling WdfObjectDelete, or by Framework processing DeviceRemove.  Possible reference count problem?"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWorkItem::~FxWorkItem
{
GetObjectHandleUnchecked(), ItemPtr -- 10
}
#typev  FxWorkItem_cpp286 14     "%0WDFWORKITEM 0x%10!p! is already deleted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWorkItem::Enqueue
{
GetHandle(), ItemPtr -- 10
}
#typev  FxWorkItem_cpp280 13     "%0Previously queued WDFWORKITEM 0x%10!p! is already pending. Ignoring the request to queue again"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDEVICE FUNC=FxWorkItem::Enqueue
{
GetHandle(), ItemPtr -- 10
}
#typev  FxWorkItem_cpp483 15     "%0Calling WdfWorkItemFlush from within the WDFWORKITEM %10!p! callback will lead to deadlock, PRKTHREAD %11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWorkItem::FlushAndWait
{
GetHandle(), ItemPtr -- 10
m_WorkItemThread, ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ecc01234-13cd-c113-4081-6a99b3a87a89     core // SRC=FxSystemWorkItem.cpp MJ= MN=
#typev  FxSystemWorkItem_cpp101 10     "%0WorkItem destroyed without calling FxSystemWorkItem::Delete, or by Framework processing DeviceRemove. Possible reference count problem?"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxSystemWorkItem::~FxSystemWorkItem
{
}
#typev  FxSystemWorkItem_cpp135 11     "%0Could not allocate IoWorkItem, insufficient resources"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxSystemWorkItem::Initialize
{
}
#typev  FxSystemWorkItem_cpp196 13     "%0WorkItem 0x%10!p! is already deleted"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxSystemWorkItem::EnqueueWorker
{
this, ItemPtr -- 10
}
#typev  FxSystemWorkItem_cpp182 12     "%0WorkItem 0x%10!p! already enqueued IoWorkItem 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxSystemWorkItem::EnqueueWorker
{
this, ItemPtr -- 10
m_WorkItem, ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
c7adec82-0934-846a-a311-0700e385a0f3     core // SRC=FxWorkItemApi.cpp MJ= MN=
#typev  FxWorkItemApi_cpp123 11     "%0Supplied EvtWorkItemFunc == NULL, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWorkItemCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxWorkItemApi_cpp112 10     "%0WDF_WORKITEM_CONFIG Size got %10!d!, expected %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWorkItemCreate
{
Config->Size, ItemLong -- 10
sizeof(WDF_WORKITEM_CONFIG), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     core // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp100 12     "%0ParentObject required in WDF_OBJECT_ATTRIBUTES %10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWorkItemCreate
{
Attributes, ItemPtr -- 10
STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 11
}
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfWorkItemCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp78 10     "%0WDF_OBJECT_ATTRIBUTES required, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWorkItemCreate
{
(ULONG) STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWorkItemFlush
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
e91ec691-1727-5a9c-91bc-d9d59cb346d0     core // SRC=FxFileObject.cpp MJ= MN=
#typev  FxFileObject_cpp424 18     "%0Did a different PFILE_OBJECT get passed to the request than was to IRP_MJ_CREATE?"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxFileObject::_GetFileObjectFromWdm
{
}
#typev  FxFileObject_cpp420 17     "%0Could not locate WDFFILEOBJECT for PFILE_OBJECT 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxFileObject::_GetFileObjectFromWdm
{
pWdmFileObject, ItemPtr -- 10
}
#typev  FxFileObject_cpp406 16     "%0Since this is a serial port device, framework is using a workaround to allow this"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGDEVICE FUNC=FxFileObject::_GetFileObjectFromWdm
{
}
#typev  FxFileObject_cpp401 15     "%0The PFILE_OBJECT 0x%10!p! in this request (cleanup/close) is different from the one specified in create request 0x%11!p!.This is bad!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGDEVICE FUNC=FxFileObject::_GetFileObjectFromWdm
{
pWdmFileObject, ItemPtr -- 10
((f != NULL) ? f->m_FileObject : NULL), ItemPtr -- 11
}
#typev  FxFileObject_cpp323 14     "%0NULL passed for PFILE_OBJECT when FileObject support is requested in an I/O request"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxFileObject::_GetFileObjectFromWdm
{
}
#typev  FxFileObject_cpp110 10     "%0WdfFileObjectWdfCanUseFsContexts is specified, but the Create IRP %10!p! doesn't have a fileObject"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxFileObject::_CreateFileObject
{
Irp, ItemPtr -- 10
}
#typev  FxFileObject_cpp249 13     "%0Did a different PFILE_OBJECT get passed to IRP_MJ_CLOSE than did to IRP_MJ_CREATE?"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxFileObject::_DestroyFileObject
{
}
#typev  FxFileObject_cpp245 12     "%0Could not find WDFFILEOBJECT for PFILE_OBJECT 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxFileObject::_DestroyFileObject
{
pWdmFileObject, ItemPtr -- 10
}
#typev  FxFileObject_cpp212 11     "%0PFILE_OBJECT in close IRP is NULL, *Possible Leak of FxFileObject*"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxFileObject::_DestroyFileObject
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     core // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfFileObjectGetFileName
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
46a562da-596f-94b8-07d3-2d22cf020b43     core // SRC=FxDisposeList.cpp MJ= MN=
#typev  FxDisposeList_cpp103 10     "%0Could not allocate workitem: %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxDisposeList::Initialize
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
c72baec1-823d-58bd-fb98-b49c3c63381c     general // SRC=FxPkgGeneral.cpp MJ= MN=
#typev  FxPkgGeneral_cpp1098 22     "%0Unable to acquire remove lock while handling the close IRP 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::AcquireRemoveLockForClose
{
Irp, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp220 11     "%0WdfSynchronizationScopeDevice or WdfSynchronizationScopeInheritFromParent allowed only if the parent WDFDEVICE 0x%10!p!, ExecutionLevel is passive"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPkgGeneral::ConfigureConstraints
{
m_Device->GetHandle(), ItemPtr -- 10
}
#typev  FxPkgGeneral_cpp185 10     "%0WdfSynchronizationScopeQueue is not allowed on FileObject"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPkgGeneral::ConfigureConstraints
{
}
#typev  FxPkgGeneral_cpp332 12     "%0Unable to create an internal queue for creates for WDFDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::PostCreateDeviceInitialize
{
m_Device->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp385 14     "%0Another WDFQUEUE 0x%10!p! is already configured for auto dispatching create request, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::ConfigureForwarding
{
m_DriverCreatedQueue->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp371 13     "%0Must have EvtIoDefault registered to receive WdfRequestTypeCreate requests for WDFQUEUE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::ConfigureForwarding
{
TargetQueue->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp659 21     "%0Couldn't forward request to the WDFQUEUE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::OnCreate
{
m_DefaultQueueForCreates->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp641 20     "%0WDFDEVICE 0x%10!p! cannot handle create request at or above dispatch-level, fail the Irp: 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::OnCreate
{
m_Device->GetObjectHandle(), ItemPtr -- 10
Irp, ItemPtr -- 11
}
#typev  FxPkgGeneral_cpp627 19     "%0Couldn't forward request to the WDFQUEUE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::OnCreate
{
m_DriverCreatedQueue->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp597 18     "%0Could not create request for WDFDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::OnCreate
{
m_Device->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp545 17     "%0Could not create WDFFILEOBJECT for WDFDEVICE 0x%10!p!, failing IRP_MJ_CREATE %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::OnCreate
{
m_Device->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgGeneral_cpp524 16     "%0Exclusive WDFDEVICE 0x%10!p!, only one open handle is allowed"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgGeneral::OnCreate
{
m_Device->GetHandle(), ItemPtr -- 10
}
#typev  FxPkgGeneral_cpp430 15     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! %12!s! IRP 0x%13!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxPkgGeneral::Dispatch
{
m_Device->GetHandle(), ItemPtr -- 10
m_Device->GetDeviceObject(), ItemPtr -- 11
irpStack->MajorFunction, ItemListByte(IRP_MJ_CREATE,IRP_MJ_CREATE_NAMED_PIPE,IRP_MJ_CLOSE,IRP_MJ_READ,IRP_MJ_WRITE,IRP_MJ_QUERY_INFORMATION,IRP_MJ_SET_INFORMATION,IRP_MJ_QUERY_EA,IRP_MJ_SET_EA,IRP_MJ_FLUSH_BUFFERS,IRP_MJ_QUERY_VOLUME_INFORMATION,IRP_MJ_SET_VOLUME_INFORMATION,IRP_MJ_DIRECTORY_CONTROL,IRP_MJ_FILE_SYSTEM_CONTROL,IRP_MJ_DEVICE_CONTROL,IRP_MJ_INTERNAL_DEVICE_CONTROL,IRP_MJ_SHUTDOWN,IRP_MJ_LOCK_CONTROL,IRP_MJ_CLEANUP,IRP_MJ_CREATE_MAILSLOT,IRP_MJ_QUERY_SECURITY,IRP_MJ_SET_SECURITY,IRP_MJ_POWER,IRP_MJ_SYSTEM_CONTROL,IRP_MJ_DEVICE_CHANGE,IRP_MJ_QUERY_QUOTA,IRP_MJ_SET_QUOTA,IRP_MJ_PNP) -- 12
Irp, ItemPtr -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b08d780f-dac6-1796-1fec-bf92340e06bb     io // SRC=FxPkgIo.cpp MJ= MN=
#typev  FxPkgIo_cpp82 11     "%0Destroyed FxPkgIo 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxPkgIo::~FxPkgIo
{
this, ItemPtr -- 10
}
#typev  FxPkgIo_cpp754 24     "%0I/O Package already has a default queue. SetFilter must be called before creating a default queue %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::SetFilter
{
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 10
}
#typev  FxPkgIo_cpp70 10     "%0Constructed FxPkgIo 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxPkgIo::FxPkgIo
{
this, ItemPtr -- 10
}
#typev  FxPkgIo_cpp329 15     "%0Default Queue Already Configured for FxPkgIo 0x%10!p!, WDFDEVICE 0x%11!p! %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::InitializeDefaultQueue
{
this, ItemPtr -- 10
Device->GetHandle(), ItemPtr -- 11
STATUS_UNSUCCESSFUL, ItemNTSTATUS -- 12
}
#typev  FxPkgIo_cpp510 18     "%0Cannot send-and-forget WDFREQUEST 0x%10!p! with formatted IO context for filter WDFDEVICE 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::EnqueueRequest
{
pRequest->GetObjectHandle(), ItemPtr -- 10
Device->GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgIo_cpp425 17     "%0No queue configured for WDFDEVICE 0x%10!p!, failing WDFREQUEST 0x%11!p! %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::EnqueueRequest
{
Device->GetHandle(), ItemPtr -- 10
pRequest->GetObjectHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgIo_cpp381 16     "%0WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxPkgIo::EnqueueRequest
{
pRequest->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxPkgIo_cpp606 21     "%0%10!s! is already configured forWDFQUEUE 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::ConfigureForwarding
{
RequestType, ItemEnum(_WDF_REQUEST_TYPE) -- 10
TargetQueue->GetObjectHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgIo_cpp592 20     "%0Default WDFQUEUE 0x%10!p! cannot be configured to dispatch specific type of request, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::ConfigureForwarding
{
TargetQueue->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgIo_cpp576 19     "%0Must have EvtIoDefault or %10!s! specific dispatch event registered for WDFQUEUE 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::ConfigureForwarding
{
RequestType, ItemEnum(_WDF_REQUEST_TYPE) -- 10
TargetQueue->GetObjectHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgIo_cpp673 23     "%0Attributes->ParentObject 0x%10!p! ancestor is WDFDEVICE %11!p!, but not the same WDFDEVICE 0x%12!p! passed to WdfIoQueueCreate, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::CreateQueue
{
QueueAttributes->ParentObject, ItemPtr -- 10
pSearchDevice->GetHandle(), ItemPtr -- 11
m_Device->GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxPkgIo_cpp662 22     "%0QueueAttributes->ParentObject 0x%10!p! must have WDFDEVICE as an eventual ancestor, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::CreateQueue
{
QueueAttributes->ParentObject, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgIo_cpp813 25     "%0Perform %10!s! for all queues of WDFDEIVCE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIO FUNC=FxPkgIo::StopProcessingForPower
{
Action, ItemEnum(FxIoStopProcessingForPowerAction) -- 10
m_Device->GetHandle(), ItemPtr -- 11
}
#typev  FxPkgIo_cpp894 26     "%0Power resume all queues of WDFDEVICE 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIO FUNC=FxPkgIo::ResumeProcessingForPower
{
m_Device->GetHandle(), ItemPtr -- 10
}
#typev  FxPkgIo_cpp964 27     "%0Restart queues from purged state for WDFDEVICE 0x%10!p! due to device restart"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIO FUNC=FxPkgIo::ResetStateForRestart
{
m_Device->GetHandle(), ItemPtr -- 10
}
#typev  FxPkgIo_cpp211 14     "%0Could not create WDFREQUEST, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::Dispatch
{
Status, ItemNTSTATUS -- 10
}
#typev  FxPkgIo_cpp130 13     "%0No queue configured for WDFDEVICE 0x%10!p!, failing IRP 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::Dispatch
{
m_Device->GetHandle(), ItemPtr -- 10
Irp, ItemPtr -- 11
Status, ItemNTSTATUS -- 12
}
#typev  FxPkgIo_cpp106 12     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! %12!s!, IRP_MN %13!x!, IRP 0x%14!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxPkgIo::Dispatch
{
m_Device->GetHandle(), ItemPtr -- 10
m_Device->GetDeviceObject(), ItemPtr -- 11
irpStack->MajorFunction, ItemListByte(IRP_MJ_CREATE,IRP_MJ_CREATE_NAMED_PIPE,IRP_MJ_CLOSE,IRP_MJ_READ,IRP_MJ_WRITE,IRP_MJ_QUERY_INFORMATION,IRP_MJ_SET_INFORMATION,IRP_MJ_QUERY_EA,IRP_MJ_SET_EA,IRP_MJ_FLUSH_BUFFERS,IRP_MJ_QUERY_VOLUME_INFORMATION,IRP_MJ_SET_VOLUME_INFORMATION,IRP_MJ_DIRECTORY_CONTROL,IRP_MJ_FILE_SYSTEM_CONTROL,IRP_MJ_DEVICE_CONTROL,IRP_MJ_INTERNAL_DEVICE_CONTROL,IRP_MJ_SHUTDOWN,IRP_MJ_LOCK_CONTROL,IRP_MJ_CLEANUP,IRP_MJ_CREATE_MAILSLOT,IRP_MJ_QUERY_SECURITY,IRP_MJ_SET_SECURITY,IRP_MJ_POWER,IRP_MJ_SYSTEM_CONTROL,IRP_MJ_DEVICE_CHANGE,IRP_MJ_QUERY_QUOTA,IRP_MJ_SET_QUOTA,IRP_MJ_PNP) -- 12
irpStack->MinorFunction, ItemLong -- 13
Irp, ItemPtr -- 14
}
#typev  FxPkgIo_cpp1028 28     "%0Currently framework allow flushing of queues by fileobject on cleanup only at PASSIVE_LEVEL"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgIo::FlushAllQueuesByFileObject
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp5401 94     "%0Dispatching requests from worker thread"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::_DeferredDispatchThreadThunk
{
}
#typev  FxIoQueue_cpp636 18     "%0WDFQUEUE 0x%10!p! Synchronization scope is set to device but the Device ExecutionLevel: 0x%11!x! doesn't match Queue ExecutionLevel: 0x%12!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ConfigureConstraints
{
GetObjectHandle(), ItemPtr -- 10
ParentLevel, ItemLong -- 11
m_ExecutionLevel, ItemLong -- 12
}
#typev  FxIoQueue_cpp769 19     "%0Invalid WDFQUEUE 0x%10!p! state"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::SetState
{
GetObjectHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::GetRequest
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp942 25     "%0Zero length WDFREQUEST 0x%10!p! completed automatically by WDFQUEUE 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::GetRequest
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::GetRequest
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp927 24     "%0Zero length WDFREQUEST 0x%10!p! completed automatically by WDFQUEUE 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::GetRequest
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp895 23     "%0WDFQUEUE 0x%10!p! is stopped, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::GetRequest
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp883 22     "%0WDFQUEUE 0x%10!p! is powered off, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::GetRequest
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp869 21     "%0Cannot be called on a parallel WDFQUEUE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::GetRequest
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp850 20     "%0Driver called WdfIoQueueRetrieveNextRequest on a sequential WDFQUEUE 0x%10!p! with no outstanding requests. This can cause a race with automatically dispatched requests. Call WdfIoQueueRetrieveNextRequest before completing the current request(s)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::GetRequest
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp1065 26     "%0FindRequest is allowed only on a manaul queue 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::PeekRequest
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::InsertNewRequestLocked
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp2235 41     "%0Presentation lock for WDFQUEUE 0x%10!p! is already held, deferring to dpc or workitem"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=FxIoQueue::CanThreadDispatchEventsLocked
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp2201 40     "%0Current thread 0x%10!p! is not at the passive-level %11!s!, posting to worker thread for WDFQUEUE 0x%12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=FxIoQueue::CanThreadDispatchEventsLocked
{
PsGetCurrentThread(), ItemPtr -- 10
PreviousIrql, ItemListByte(Low,APC,DPC) -- 11
GetObjectHandle(), ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::DispatchRequestToDriver
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp2900 54     "%0Driver has no event callback for %10!s!, completing WDFREQUEST 0x%11!p! with %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
irpStack->MajorFunction, ItemEnum(_WDF_REQUEST_TYPE) -- 10
pRequest, ItemPtr -- 11
Status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp2876 53     "%0Zero length WDFREQUEST 0x%10!p! completed automatically by WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::DispatchRequestToDriver
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::DispatchRequestToDriver
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp2854 52     "%0Zero length WDFREQUEST 0x%10!p! completed automatically by WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp2839 51     "%0Calling driver EvtIoDefault for WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
}
#typev  FxIoQueue_cpp2819 50     "%0Calling driver EvtIoInternalDeviceControl for WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
}
#typev  FxIoQueue_cpp2802 49     "%0Calling driver EvtIoDeviceControl for WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
}
#typev  FxIoQueue_cpp2788 48     "%0Calling driver EvtIoWrite for WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
pRequest->GetObjectHandle(), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::DispatchRequestToDriver
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp2769 47     "%0Zero length WDFREQUEST 0x%10!p! completed automatically by WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp2750 46     "%0Calling driver EvtIoRead for WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::DispatchRequestToDriver
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp2732 45     "%0Zero length WDFREQUEST 0x%10!p! completed automatically by WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchRequestToDriver
{
hRequest, ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::CancelForQueue
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp3645 69     "%0WDFREQUEST 0x%10!p! was cancelled while on WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=FxIoQueue::CancelForQueue
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3801 71     "%0WDFREQUEST 0x%10!p! is already on list, FxRequest::m_ListEntry is busy!, WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::CancelForDriver
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3793 70     "%0WDFREQUEST 0x%10!p! was cancelled in driver for WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=FxIoQueue::CancelForDriver
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3954 72     "%0WDFQUEUE 0x%10!p! is idle, calling driver callback"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessIdleComplete
{
GetHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4005 73     "%0WDFQUEUE 0x%10!p! is purged, calling driver callback"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPurgeComplete
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4069 74     "%0ReadyNotify notify method is NULL on WDFQUEUE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessReadyNotify
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4126 75     "%0Calling CancelRoutine routine for WDFREQUEST 0x%10!p! on WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessCancelledRequests
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp4210 76     "%0Calling CanceledOnQueue routine for WDFREQUEST 0x%10!p! on WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessCancelledRequestsOnQueue
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp4870 91     "%0Acknowledging WDFREQUEST %10!p! on WDFQUEUE %11!p! %12!s! requeue option"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessAcknowledgedRequests
{
Request->GetObjectHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
(requeue ? 'with' : 'without'), ItemString -- 12
}
#typev  FxIoQueue_cpp5660 100     "%0Failure from m_IoReservedResourcesAllocate callback %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::AllocateReservedRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp5637 99     "%0Failure to allocate request %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::AllocateReservedRequest
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp388 17     "%0EvtIoDefault 0x%10!p!, EvtIoRead 0x%11!p!, EvtIoWrite 0x%12!p!, EvtIoDeviceControl 0x%13!p! for WDFQUEUE 0x%14!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::Initialize
{
pConfig->EvtIoDefault, ItemPtr -- 10
pConfig->EvtIoRead, ItemPtr -- 11
pConfig->EvtIoWrite, ItemPtr -- 12
pConfig->EvtIoDeviceControl, ItemPtr -- 13
GetObjectHandle(), ItemPtr -- 14
}
#typev  FxIoQueue_cpp334 16     "%0Could not allocate workitem: %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::Initialize
{
Status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp306 15     "%0Cannot have  NumberOfPresentedRequests other than 0 on a Sequential or manual WDFQUEUE 0x%10!p!.Make Sure you set NumberOfPresentedRequests to 0, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::Initialize
{
GetObjectHandle(), ItemPtr -- 10
Status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp288 14     "%0Cannot set io callback events on a manual WDFQUEUE 0x%10!p! %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::Initialize
{
GetObjectHandle(), ItemPtr -- 10
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp267 13     "%0Invalid dispatch type specified %10!d!, Queue 0x%11!p! %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::Initialize
{
pConfig->DispatchType, ItemLong -- 10
GetObjectHandle(), ItemPtr -- 11
STATUS_INVALID_PARAMETER, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp258 12     "%0At least one of EvtIoDefault|EvtIoRead|EvtIoWrite|EvtIoDeviceControl|EvtIoInternalDeviceControl must be set %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::Initialize
{
STATUS_WDF_NO_CALLBACK, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp4818 90     "%0Power Resume: WDFQUEUE 0x%10!p! is now powered on and I/O has resumed"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4807 89     "%0Power Resume: Driver has no callback for EvtIoResume registered on WDFQUEUE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4789 88     "%0Power Resume, Notifying Driver, WDFQUEUE 0x%10!p!, WDFREQUEST 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
pRequest->GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp4740 87     "%0Power Resume: Driver has no power paused requests on WDFQUEUE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4720 86     "%0Power Resume: Driver has power paused requests on WDFQUEUE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4698 85     "%0Power Stop: Driver has acknowledged all in-flight requests, but WDFQUEUE 0x%10!p! has outstanding callbacks"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4679 84     "%0Power Stop: WDFQUEUE 0x%10!p! is now powered off with no in-flight requests"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4657 83     "%0Power Stop: Waiting for Driver to complete or acknowledge in-flight requests on WDFQUEUE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4574 82     "%0Power Purge Notifying Driver WDFQUEUE 0x%10!p!, WDFREQUEST 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
pRequest->GetHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp4497 81     "%0Power Stop Notifying Driver, WDFQUEUE 0x%10!p!, WDFREQUEST 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
pRequest->GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp4440 80     "%0Power purge: WDFQUEUE 0x%10!p! is purging without in-flight requests"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4420 79     "%0Power Stop: WDFQUEUE 0x%10!p! is purging with in-flight requests"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4398 78     "%0Power Stop: WDFQUEUE 0x%10!p! is powering off without in-flight requests"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp4376 77     "%0Power Stop: WDFQUEUE 0x%10!p! is powering off with in-flight requests"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::ProcessPowerEvents
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp5595 98     "%0Configure forward progress policy on WDFQUEUE %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::AssignForwardProgressPolicy
{
GetHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp5538 97     "%0Could not allocate memory for forward progress context %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::AssignForwardProgressPolicy
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp5523 96     "%0Setting Forward progress policy on non-top level queue %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::AssignForwardProgressPolicy
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp5752 102     "%0Forward action on WDFQUEUE %10!p! says that framework should fail the Irp %11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::GetReservedRequest
{
GetHandle(), ItemPtr -- 10
Irp, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp5731 101     "%0EvtIoExamineIrp callback on WDFQUEUE %10!p! returned an invalid action %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::GetReservedRequest
{
GetHandle(), ItemPtr -- 10
action, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp2528 44     "%0WDFQUEUE 0x%10!p! not in dispatching state, current state is %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchEvents
{
GetObjectHandle(), ItemPtr -- 10
m_QueueState, ItemEnum(_WDF_IO_QUEUE_STATE) -- 11
}
#typev  FxIoQueue_cpp2463 43     "%0WDFQUEUE 0x%10!p! Power Transition State %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchEvents
{
GetObjectHandle(), ItemPtr -- 10
m_PowerState, ItemListLong(FxIoQueuePowerInvalid,FxIoQueuePowerOn,FxIoQueuePowerOff,FxIoQueuePowerStartingTransition,FxIoQueuePowerStopping,FxIoQueuePowerStoppingNotifyingDriver,FxIoQueuePowerStoppingDriverNotified,FxIoQueuePowerPurge,FxIoQueuePowerPurgeNotifyingDriver,FxIoQueuePowerPurgeDriverNotified,FxIoQueuePowerRestarting,FxIoQueuePowerRestartingNotifyingDriver,FxIoQueuePowerRestartingDriverNotified,FxIoQueuePowerLast) -- 11
}
#typev  FxIoQueue_cpp2364 42     "%0Thread %10!p! is processing WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::DispatchEvents
{
PsGetCurrentThread(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3033 58     "%0WDFQUEUE 0x%10!p! should be stopped before clearing ReadyNotify callback 0x%11!p! registered, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ReadyNotify
{
GetObjectHandle(), ItemPtr -- 10
&m_ReadyNotify, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp3018 57     "%0WDFQUEUE 0x%10!p! does not have a ReadyNotify to cancel, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ReadyNotify
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp2996 56     "%0WDFQUEUE 0x%10!p! already has a ReadyNotify callback 0x%11!p!registered, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ReadyNotify
{
GetObjectHandle(), ItemPtr -- 10
&m_ReadyNotify, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp2972 55     "%0WDFQUEUE 0x%10!p! is not a Manual queue, ReadyNotify is only valid on a manual Queue, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ReadyNotify
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp3135 60     "%0WDFQUEUE 0x%10!p! already has a IdleComplete callback registered 0x%11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::QueueIdle
{
GetObjectHandle(), ItemPtr -- 10
m_IdleComplete.Method, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp3115 59     "%0WDFQUEUE 0x%10!p! is already deleted, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::QueueIdle
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp3199 61     "%0Waiting for %10!d! requests to complete on WDFQUEUE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueueIdleSynchronously
{
m_DriverIoCount, ItemLong -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3359 66     "%0All driver cancellable requests cancelled  in WDFQUEUE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueuePurge
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp3317 64     "%0All WDFQUEUE 0x%10!p! requests cancelled"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueuePurge
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp3326 65     "%0Cancelling WDFREQUEST 0x%10!p!, WDFQUEUE 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGIO FUNC=FxIoQueue::QueuePurge
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3287 63     "%0WDFQUEUE 0x%10!p! already has a PurgeComplete callback registered 0x%11!p! %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::QueuePurge
{
GetObjectHandle(), ItemPtr -- 10
m_PurgeComplete.Method, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp3267 62     "%0WDFQUEUE 0x%10!p! is already deleted %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::QueuePurge
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp3437 67     "%0Waiting for %10!d! requests to complete on WDFQUEUE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueuePurgeSynchronously
{
(m_DriverIoCount + m_Queue.GetRequestCount()), ItemLong -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp3497 68     "%0Waiting for %10!d! requests to complete on WDFQUEUE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueueDrainSynchronously
{
(m_DriverIoCount + m_Queue.GetRequestCount()), ItemLong -- 10
GetObjectHandle(), ItemPtr -- 11
}
#typev  FxIoQueue_cpp5032 92     "%0Waiting for all threads to stop dispatching requests so that WDFQUEUE 0x%10!p! can be powered off"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::StartPowerTransitionOff
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp5163 93     "%0Waiting for all inflight requests to be acknowledged  on WDFQUEUE 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::StopProcessingForPower
{
GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp1579 35     "%0WDFREQUEST 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::Requeue
{
pRequest->GetHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp1547 34     "%0Requeue is allowed only for a manual queue, WDFREQUEST 0x%10!p! %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::Requeue
{
pRequest, ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp1880 37     "%0Queuing WDFREQUEST 0x%10!p! on WDFQUEUE 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueueRequest
{
pRequest->GetHandle(), ItemPtr -- 10
GetObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
716083e0-36de-939a-9b31-3d4e07168e9b     io // SRC=FxRequest.hpp MJ= MN=
#typev  FxRequest_hpp778 11     "%0Completing WDFREQUEST 0x%10!p! for IRP 0x%11!p! with Information 0x%12!I64x!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGREQUEST FUNC=FxIoQueue::QueueRequest
{
GetHandle(), ItemPtr -- 10
m_Irp.GetIrp(), ItemPtr -- 11
m_Irp.GetInformation(), ItemLongLongX -- 12
Status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
3d3ed8b1-004f-68e3-66c4-3730efdecd25     io // SRC=FxIoQueue.cpp MJ= MN=
#typev  FxIoQueue_cpp1858 36     "%0WDFQUEUE 0x%10!p! is not accepting requests, state is %11!s!, completing WDFREQUEST 0x%12!p! %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::QueueRequest
{
GetObjectHandle(), ItemPtr -- 10
m_QueueState, ItemEnum(_WDF_IO_QUEUE_STATE) -- 11
pRequest->GetHandle(), ItemPtr -- 12
STATUS_INVALID_DEVICE_STATE, ItemNTSTATUS -- 13
}
#typev  FxIoQueue_cpp1946 38     "%0WDFQUEUE 0x%10!p! is not accepting requests state is %11!s!, WDFREQUEST 0x%12!p! %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGIO FUNC=FxIoQueue::QueueRequestFromForward
{
GetObjectHandle(), ItemPtr -- 10
m_QueueState, ItemEnum(_WDF_IO_QUEUE_STATE) -- 11
pRequest->GetHandle(), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxIoQueue_cpp5432 95     "%0Dispatching requests from DPC"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxIoQueue::_DeferredDispatchDpcThunk
{
}
#typev  FxIoQueue_cpp190 11     "%0Could not configure queue: %10!s!"      //   GLOBALS=DriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp179 10     "%0Memory allocation failed: %10!s!"      //   GLOBALS=DriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueue_cpp1379 31     "%0WdfPdoInitSetForwardRequestToParent not called on WDFDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequestToParent
{
m_Device->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp1355 30     "%0Cannot forward reserved WDFREQUEST 0x%10!p! to a parent WDFDEVICE 0x%11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequestToParent
{
Request->GetHandle(), ItemPtr -- 10
DestQueue->m_Device->GetObjectHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueue_cpp1343 29     "%0Cannot forward a request to a different WDFDEVICE 0x%10!p! which is not the parent, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequestToParent
{
DestQueue->m_Device->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp1334 28     "%0Cannot forward a request to the same WDFQUEUE 0x%10!p! %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequestToParent
{
GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp1312 27     "%0No parent device for WDFQUEUE 0x%10!p! Device, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequestToParent
{
DestQueue->m_Device->GetObjectHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueue_cpp1499 33     "%0Cannot forward a request to a different WDFDEVICE 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequest
{
pDestQueue->m_Device->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueue_cpp1489 32     "%0Cannot forward a request to the same WDFQUEUE 0x%10!p! %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxIoQueue::ForwardRequest
{
GetObjectHandle(), ItemPtr -- 10
STATUS_INVALID_DEVICE_REQUEST, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
983c5b7e-69ea-bede-cb2a-239decfe3454     io // SRC=FxIoQueueApi.cpp MJ= MN=
#typev  FxIoQueueApi_cpp230 16     "%0Created WDFQUEUE 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=imp_WdfIoQueueCreate
{
pQueue->GetObjectHandle(), ItemPtr -- 10
}
#typev  FxIoQueueApi_cpp218 15     "%0Create failed for FxPkgIo 0x%10!p!, WDFDEVICE 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueCreate
{
pPkgIo, ItemPtr -- 10
Device, ItemPtr -- 11
}
#typev  FxIoQueueApi_cpp198 14     "%0Queue Creation failed for WDFDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueCreate
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueueApi_cpp183 13     "%0Default queue can only be created before the WDFDEVICE 0x%10!p! is started, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoQueueCreate
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxIoQueueApi_cpp168 12     "%0Default queue can only be created before WdfControlDeviceFinishInitializingon the WDFDEVICE %10!p! is called %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoQueueCreate
{
Device, ItemPtr -- 10
STATUS_INVALID_DEVICE_STATE, ItemNTSTATUS -- 11
}
#typev  FxIoQueueApi_cpp143 11     "%0Parameter to receive WDFQUEUE handle is not optional for non default queue %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueCreate
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueueApi_cpp129 10     "%0WDF_IO_QUEUE_CONFIG Size 0x%10!x!, expected for v1.7 size 0x%11!x! or current version size 0x%12!x!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueCreate
{
Config->Size, ItemLong -- 10
sizeof(WDF_IO_QUEUE_CONFIG_V1_7), ItemLong -- 11
sizeof(WDF_IO_QUEUE_CONFIG), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     io // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoQueueStopSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
983c5b7e-69ea-bede-cb2a-239decfe3454     io // SRC=FxIoQueueApi.cpp MJ= MN=
#typev  FxIoQueueApi_cpp896 17     "%0Invalid WDF_REQUEST_PARAMETERS size %10!d! %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueFindRequest
{
Parameters->Size, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     io // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoQueueDrainSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoQueuePurgeSynchronously
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
983c5b7e-69ea-bede-cb2a-239decfe3454     io // SRC=FxIoQueueApi.cpp MJ= MN=
#typev  FxIoQueueApi_cpp1247 21     "%0Need to have more than  0 reserved Requests %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueAssignForwardProgressPolicy
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueueApi_cpp1228 20     "%0Examine callback can't be null for WdfIoForwardProgressReservedPolicyUseExamine  %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueAssignForwardProgressPolicy
{
status, ItemNTSTATUS -- 10
}
#typev  FxIoQueueApi_cpp1214 19     "%0WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY Size 0x%10!x!, expected 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueAssignForwardProgressPolicy
{
ForwardProgressPolicy->Size, ItemLong -- 10
sizeof(WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxIoQueueApi_cpp1202 18     "%0Queue is already configured for forward progress %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=imp_WdfIoQueueAssignForwardProgressPolicy
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     io // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfIoQueueAssignForwardProgressPolicy
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
6d573ea1-5c9b-4a40-8a7f-7e038486f288     wmi // SRC=FxWmiIrpHandler.cpp MJ= MN=
#typev  FxWmiIrpHandler_cpp147 10     "%0could not register WMI with OS, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::Register
{
status, ItemNTSTATUS -- 10
}
#typev  FxWmiIrpHandler_cpp371 12     "%0IoWMIRegistrationControl DevObj %10!p!, Action %11!d!, failed, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxWmiIrpHandler::UpdateGuids
{
GetDevice()->GetDeviceObject(), ItemPtr -- 10
action, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiIrpHandler_cpp1906 23     "%0Converting %10!s! to %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::CompleteWmiRequest
{
Status, ItemNTSTATUS -- 10
STATUS_WMI_SET_FAILURE, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
6d573ea1-5c9b-4a40-8a7f-7e038486f288     wmi // SRC=FxWmiIrpHandler.cpp MJ= MN=
#typev  FxWmiIrpHandler_cpp2107 26     "%0WIN2K:  Deleting internal tracing WDM devobj 0x%10!p!, FxDevice 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxWmiTracingIrpHandler::CleanupWin2kTracing
{
m_Device->GetDeviceObject(), ItemPtr -- 10
m_Device, ItemPtr -- 11
}
#typev  FxWmiIrpHandler_cpp2098 25     "%0WIN2K:  cleanup internal tracing WDM devobj 0x%10!p!, FxDevice 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxWmiTracingIrpHandler::CleanupWin2kTracing
{
m_Device->GetDeviceObject(), ItemPtr -- 10
m_Device, ItemPtr -- 11
}
#typev  FxWmiIrpHandler_cpp2080 24     "%0WIN2K:  cleanup external tracing WDM devobj 0x%10!p!, FxDevice 0x%11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxWmiTracingIrpHandler::CleanupWin2kTracing
{
m_Device->GetDeviceObject(), ItemPtr -- 10
m_Device, ItemPtr -- 11
}
#typev  FxWmiIrpHandler_cpp198 11     "%0failure deregistering WMI with OS, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::Deregister
{
status, ItemNTSTATUS -- 10
}
#typev  FxWmiIrpHandler_cpp652 14     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! IRP_MJ_SYSTEM_CONTROL, %12!s! IRP 0x%13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGIO FUNC=FxWmiIrpHandler::Dispatch
{
m_Device->GetHandle(), ItemPtr -- 10
m_Device->GetDeviceObject(), ItemPtr -- 11
minor, ItemListByte(IRP_MN_QUERY_ALL_DATA,IRP_MN_QUERY_SINGLE_INSTANCE,IRP_MN_CHANGE_SINGLE_INSTANCE,IRP_MN_CHANGE_SINGLE_ITEM,IRP_MN_ENABLE_EVENTS,IRP_MN_DISABLE_EVENTS,IRP_MN_ENABLE_COLLECTION,IRP_MN_DISABLE_COLLECTION,IRP_MN_REGINFO,IRP_MN_EXECUTE_METHOD,IRP_MN_Reserved_0a,IRP_MN_REGINFO_EX) -- 12
Irp, ItemPtr -- 13
}
#typev  FxWmiIrpHandler_cpp1210 22     "%0WDFWMIPROVIDER %10!p! QueryAllData returning %11!s!, buffer used 0x%12!x!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
bufferUsed, ItemLong -- 12
}
#typev  FxWmiIrpHandler_cpp1181 20     "%0WDFWMIPROVIDER %10!p! QueryAllData returning %11!s!, requesting buffer size of 0x%12!x!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
bufferUsed, ItemLong -- 12
}
#typev  FxWmiIrpHandler_cpp1202 21     "%0WDFWMIPROVIDER %10!p! QueryAllData returning %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiIrpHandler_cpp1130 19     "%0WDFWMIPROVIDER %10!p!, arithmetic overflow in computing buffer consumed(%11!d!+%12!d!), %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
bufferUsed, ItemLong -- 11
adjustedSize, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxWmiIrpHandler_cpp1110 18     "%0WDFWMIPROVIDER %10!p!, arithmetic overflow in computing block offset, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiIrpHandler_cpp1053 17     "%0WDFWMIINSTNACE %10!p! queried, returned a buffer size of %11!d!,but it could not be rounded up, %12!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
pInstance->GetHandle(), ItemPtr -- 10
tmpSize, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiIrpHandler_cpp912 16     "%0WDFWMIPROVIDER %10!p! QueryAllData, num instances %11!d!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
instanceCount, ItemLong -- 11
}
#typev  FxWmiIrpHandler_cpp903 15     "%0Failing QueryAllData since no instances found for WDFWMIPROVIDER %10!p!, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxWmiIrpHandler::_QueryAllData
{
Provider->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiIrpHandler_cpp459 13     "%0WMI Guid already registered by client driver"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxWmiIrpHandler::AddPowerPolicyProviderAndInstance
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
dbdf3ba1-163b-5a3e-da5a-1da9c100b3ce     wmi // SRC=FxWmiInstance.cpp MJ= MN=
#typev  FxWmiInstance_cpp119 10     "%0WDFWMIINSTANCE %10!p! insufficient resources to fire event,%11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstance::FireEvent
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiInstance_cpp298 17     "%0could not allocate memory for WDFWMIINSTANCE, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxWmiInstance_cpp215 12     "%0UseContextForQuery set, i.e. a read only instance, but EvtWmiInstanceSetInstance %10!p! or EvtWmiInstanceSetItem %11!p! is set, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
WmiInstanceConfig->EvtWmiInstanceSetInstance, ItemPtr -- 10
WmiInstanceConfig->EvtWmiInstanceSetItem, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiInstance_cpp233 13     "%0UseContextForQuery set, but InstanceAttributes %10!p! is null or there is no associated type, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
InstanceAttributes, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiInstance_cpp281 16     "%0context size %10!I64d! is less then the WDFWMIPROVIDER %11!p! min size of %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
contextSize, ItemLongLong -- 10
Provider->GetHandle(), ItemPtr -- 11
Provider->GetMinInstanceBufferSize(), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxWmiInstance_cpp267 15     "%0context size %10!I64d! can be %11!d! large, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
contextSize, ItemLongLong -- 10
ULONG_MAX, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiInstance_cpp249 14     "%0Overlfow adding contextSize %10!I64d! with size override %11!I64d!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
contextSize, ItemLongLong -- 10
InstanceAttributes->ContextSizeOverride, ItemLongLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiInstance_cpp185 11     "%0WDFWMIPROVIDER %10!p! is event only and UseContextForQuery (%11!d!) is TRUE, or a callback (query instance %12!p!, set instance %13!p!, set item %14!p!, executue method %15!p!) is not NULL, %16!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::_Create
{
Provider->GetHandle(), ItemPtr -- 10
WmiInstanceConfig->UseContextForQuery, ItemLong -- 11
WmiInstanceConfig->EvtWmiInstanceQueryInstance, ItemPtr -- 12
WmiInstanceConfig->EvtWmiInstanceSetInstance, ItemPtr -- 13
WmiInstanceConfig->EvtWmiInstanceSetItem, ItemPtr -- 14
WmiInstanceConfig->EvtWmiInstanceExecuteMethod, ItemPtr -- 15
status, ItemNTSTATUS -- 16
}
#typev  FxWmiInstance_cpp471 23     "%0WDFWMIINSTANCE %10!p! was queried with no query callback and supports execute method (%11!p!), zero bytes returned"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiInstanceExternal::QueryInstance
{
GetHandle(), ItemPtr -- 10
m_ExecuteMethodCallback.m_Method, ItemPtr -- 11
}
#typev  FxWmiInstance_cpp459 22     "%0This is a break in the contract.  Minimum instance size should only be used for fixed sized instances"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiInstanceExternal::QueryInstance
{
}
#typev  FxWmiInstance_cpp453 21     "%0WDFWMIINSTANCE %10!p! returned %11!s!, but it specified a minimum instance size %12!d! in its WDFWMIPROVIDER %13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiInstanceExternal::QueryInstance
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
m_Provider->GetMinInstanceBufferSize(), ItemLong -- 12
m_Provider->GetHandle(), ItemPtr -- 13
}
#typev  FxWmiInstance_cpp431 20     "%0WDFWMIINSTANCE %10!p! was queried with buffer size %11!d!,  but returned %12!d! bytes and %13!s!, should return !NT_SUCCESS in this case"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiInstanceExternal::QueryInstance
{
GetHandle(), ItemPtr -- 10
OutBufferSize, ItemLong -- 11
*BufferUsed, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxWmiInstance_cpp415 19     "%0WDFWMIINSTANCE %10!p! was queried and returned %11!s!, which is not an allowed return value"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiInstanceExternal::QueryInstance
{
GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiInstance_cpp383 18     "%0WDFWMIINSTANCE %10!p! query instance using context for query, query buffer length %11!d!, context length %12!d!, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiInstanceExternal::QueryInstance
{
GetHandle(), ItemPtr -- 10
OutBufferSize, ItemLong -- 11
m_ContextLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a1b7bd9f-f60a-70db-0dcc-70cf190ead35     wmi // SRC=FxWmiProvider.cpp MJ= MN=
#typev  FxWmiProvider_cpp206 15     "%0Could not allocate memory for a WDFWMIPROVIDER, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiProvider::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxWmiProvider_cpp190 14     "%0WmiProvider Guid filed is all zeros, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiProvider::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxWmiProvider_cpp172 13     "%0EvtWmiProviderFunctionControl can only be set if Flags 0x%10!x! has WdfWmiProviderTracing (%11!d!) or WdfWmiProviderExpensive (%12!d!) bit values set, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiProvider::_Create
{
WmiProviderConfig->Flags, ItemLong -- 10
WdfWmiProviderTracing, ItemLong -- 11
WdfWmiProviderExpensive, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxWmiProvider_cpp149 12     "%0WdfWmiProviderTracing must be the only flag set, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiProvider::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxWmiProvider_cpp137 11     "%0Invalid flag(s) set, Flags 0x%10!x!, valid mask 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiProvider::_Create
{
WmiProviderConfig->Flags, ItemLong -- 10
WdfWmiProviderValidFlags, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiProvider_cpp126 10     "%0WmiProviderConfig Size 0x%10!x!, expected size 0x%11!x!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWmiProvider::_Create
{
WmiProviderConfig->Size, ItemLong -- 10
sizeof(WDF_WMI_PROVIDER_CONFIG), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxWmiProvider_cpp308 17     "%0WMI is being cleanedup, WDFWMIINSTANCE %10!p! add failing, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGDEVICE FUNC=FxWmiProvider::AddInstanceLocked
{
Instance->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiProvider_cpp267 16     "%0WDFWMIINSTANCE %10!p! already added, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiProvider::AddInstanceLocked
{
Instance->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiProvider_cpp355 18     "%0WDFWMIINSTANCE %10!p! cannot be added to tracing WDFWMIPROVIDER %11!p!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxWmiProvider::AddInstance
{
Instance->GetHandle(), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b2b29a77-cf72-2f74-58d7-683d895f9a80     wmi // SRC=FxWmiAPI.cpp MJ= MN=
#typev  FxWmiAPI_cpp79 10     "%0WMI Guid already registered by framework"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWmiProviderCreate
{
}
#typev  FxWmiAPI_cpp189 14     "%0WMI Guid already registered by framework"      //   GLOBALS=GetFxDriverGlobals(DriverGlobals) LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWmiInstanceCreate
{
}
#typev  FxWmiAPI_cpp145 13     "%0InstanceConfig %10!p! Provider %11!p! and ProviderConfig %12!p! are both not NULL, only one can be, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWmiInstanceCreate
{
InstanceConfig, ItemPtr -- 10
InstanceConfig->Provider, ItemPtr -- 11
InstanceConfig->ProviderConfig, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxWmiAPI_cpp134 12     "%0InstanceConfig %10!p! Provider and ProviderConfig are both NULL, only one can be, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWmiInstanceCreate
{
InstanceConfig, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxWmiAPI_cpp123 11     "%0Expected InstanceConfig Size %10!d!, got %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWmiInstanceCreate
{
InstanceConfig->Size, ItemLong -- 10
sizeof(*InstanceConfig), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     wmi // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWmiInstanceFireEvent
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cbeeb758-d3b0-8a61-0d57-e13597d7a610     support // SRC=FxStringAPI.cpp MJ= MN=
#typev  FxStringAPI_cpp107 10     "%0Could not allocate WDFSTRING handle, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfStringCreate
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfStringCreate
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfStringCreate
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfStringCreate
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfStringCreate
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfStringCreate
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfStringCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfStringGetUnicodeString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a2e3d651-1f37-b133-3ea5-0e74ac2f68f6     support // SRC=fxcollectionapi.cpp MJ= MN=
#typev  fxcollectionapi_cpp95 11     "%0Could not create collection object: STATUS_INSUFFICIENT_RESOURCES"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfCollectionCreate
{
}
#typev  fxcollectionapi_cpp87 10     "%0Could not create collection object: %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfCollectionCreate
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfCollectionCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a2e3d651-1f37-b133-3ea5-0e74ac2f68f6     support // SRC=fxcollectionapi.cpp MJ= MN=
#typev  fxcollectionapi_cpp210 12     "%0Index %10!d! is not valid in WDFCOLLECTION %11!p! (count is %12!d!), %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfCollectionRemoveItem
{
Index, ItemLong -- 10
Collection, ItemPtr -- 11
pCollection->Count(), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  fxcollectionapi_cpp267 13     "%0WDFOBJECT %10!p! not in WDFCOLLECTION %11!p!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfCollectionRemove
{
Item, ItemPtr -- 10
Collection, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cde9d453-777f-9b8c-13ea-7bedfea68ca4     support // SRC=FxDeviceInterfaceAPI.cpp MJ= MN=
#typev  FxDeviceInterfaceAPI_cpp125 12     "%0WDFDEVICE %10!p!, DeviceInterface object initialization failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceInterfaceAPI_cpp112 11     "%0WDFDEVICE %10!p! DeviceInterface object creation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxDeviceInterfaceAPI_cpp99 10     "%0WDFDEVICE %10!p! is not a PNP device, device interface creation not allowed %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceCreateDeviceInterface
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceCreateDeviceInterface
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cde9d453-777f-9b8c-13ea-7bedfea68ca4     support // SRC=FxDeviceInterfaceAPI.cpp MJ= MN=
#typev  FxDeviceInterfaceAPI_cpp222 13     "%0WDFDEVICE %10!p! is not a PNP device, device interfaces not allowed"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceSetDeviceInterfaceState
{
Device, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceSetDeviceInterfaceState
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceSetDeviceInterfaceState
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceSetDeviceInterfaceState
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceSetDeviceInterfaceState
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceSetDeviceInterfaceState
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
cde9d453-777f-9b8c-13ea-7bedfea68ca4     support // SRC=FxDeviceInterfaceAPI.cpp MJ= MN=
#typev  FxDeviceInterfaceAPI_cpp341 14     "%0WDFDEVICE %10!p! is not a PNP device, device interface creation not allowed %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceRetrieveDeviceInterfaceString
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceRetrieveDeviceInterfaceString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceRetrieveDeviceInterfaceString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceRetrieveDeviceInterfaceString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfDeviceRetrieveDeviceInterfaceString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceRetrieveDeviceInterfaceString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
ed2a2306-740c-1311-0307-957dc3b52840     support // SRC=FxQueryInterfaceAPI.cpp MJ= MN=
#typev  FxQueryInterfaceAPI_cpp184 16     "%0WDFDEVICE %10!p!, interface allocation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxQueryInterfaceAPI_cpp167 15     "%0WDFDEVICE %10!p!, object creation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxQueryInterfaceAPI_cpp147 14     "%0WDFDEVICE %10!p!, Interface size %11!d! < sizeof(INTERFACE) (%12!d!), %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
pInterface->Size, ItemLong -- 11
sizeof(INTERFACE), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxQueryInterfaceAPI_cpp131 13     "%0WDFDEVICE %10!p!, ImportInterface is TRUE and EvtDeviceProcessQueryInterfaceRequest is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxQueryInterfaceAPI_cpp113 12     "%0WDFDEVICE %10!p!,  SendQueryToParentStack is FALSE and InterfaceConfig->ImportInterface is FALSE, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxQueryInterfaceAPI_cpp90 11     "%0SendQueryToParentStack TRUE, but WDFDEVICE %10!p! not a PDO, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxQueryInterfaceAPI_cpp75 10     "%0WDFDEVICE %10!p!, WDF_QUERY_INTERFACE_CONFIG Size %11!d!, expected %12!d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfDeviceAddQueryInterface
{
Device, ItemPtr -- 10
InterfaceConfig->Size, ItemLong -- 11
sizeof(WDF_QUERY_INTERFACE_CONFIG), ItemLong -- 12
status, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfDeviceAddQueryInterface
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfWaitLockCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfWaitLockAcquire
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
2a40ff65-f93f-d20a-8fb7-3fa088d8b892     support // SRC=FxResourceAPI.cpp MJ= MN=
#typev  FxResourceAPI_cpp368 10     "%0WDFIORESLIST %10!p!, could not remove list at index %11!d! (not found), list item count is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoResourceRequirementsListRemove
{
RequirementsList, ItemPtr -- 10
Index, ItemLong -- 11
pList->Count(), ItemLong -- 12
}
#typev  FxResourceAPI_cpp417 11     "%0WDFIORESREQLIST %10!p!: Removes not allowed"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoResourceRequirementsListRemoveByIoResList
{
RequirementsList, ItemPtr -- 10
}
#typev  FxResourceAPI_cpp570 12     "%0Removes not allowed on WDFIORESLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxIoResourceListInsertDescriptor
{
ResourceList, ItemPtr -- 10
}
#typev  FxResourceAPI_cpp738 13     "%0WDFIORESREQLIST %10!p!, cannot update item at index %11!d!, item not found, list item count is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoResourceListUpdateDescriptor
{
ResourceList, ItemPtr -- 10
Index, ItemLong -- 11
pList->Count(), ItemLong -- 12
}
#typev  FxResourceAPI_cpp884 14     "%0WDFIORESLIST %10!p!, could not remove item at index %11!d! (not found), list item count is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoResourceListRemove
{
ResourceList, ItemPtr -- 10
Index, ItemLong -- 11
pList->Count(), ItemLong -- 12
}
#typev  FxResourceAPI_cpp934 15     "%0Removes not allowed on WDFIORESLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfIoResourceListRemoveByDescriptor
{
ResourceList, ItemPtr -- 10
}
#typev  FxResourceAPI_cpp1235 16     "%0WDFCMRESLIST %10!p!, could not remove list at index %11!d! (not found), list item count is %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfCmResourceListRemove
{
List, ItemPtr -- 10
Index, ItemLong -- 11
pList->Count(), ItemLong -- 12
}
#typev  FxResourceAPI_cpp1286 17     "%0Removes not allowed on WDFCMRESLIST %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfCmResourceListRemoveByDescriptor
{
List, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp146 11     "%0new WDFKEY object open failed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryOpenKey
{
status, ItemNTSTATUS -- 10
}
#typev  FxRegistryAPI_cpp130 10     "%0Could not allocate memory for a WDFKEY, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryOpenKey
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryOpenKey
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryOpenKey
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryOpenKey
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryOpenKey
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryOpenKey
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryOpenKey
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp264 13     "%0Registry key creation failed, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryCreateKey
{
status, ItemNTSTATUS -- 10
}
#typev  FxRegistryAPI_cpp244 12     "%0Could not allocate memory for WDFKEY, %10!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryCreateKey
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryCreateKey
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryCreateKey
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryCreateKey
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryCreateKey
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryCreateKey
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryCreateKey
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryClose
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryRemoveKey
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryRemoveValue
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryRemoveValue
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryRemoveValue
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryRemoveValue
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryRemoveValue
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp453 14     "%0WDFKEY %10!p! QueryValue failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryValue
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryValue
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryValue
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryValue
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryValue
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryQueryValue
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp565 17     "%0WDFKEY %10!p! QueryPartial failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMemory
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp558 16     "%0WDFKEY %10!p! WDFMEMORY object create failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMemory
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp526 15     "%0WDFKEY %10!p! KEY_VALUE_PARTIAL_INFORMATION allocation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMemory
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMemory
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMemory
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMemory
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMemory
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryQueryMemory
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp727 21     "%0WDFKEY %10!p!: WDFSTRING creation failed: %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMultiString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp699 20     "%0WDFKEY %10!p!, WDFCOLLECTION %11!p!, collection add failed %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMultiString
{
Key, ItemPtr -- 10
Collection, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRegistryAPI_cpp650 19     "%0WDFKEY %10!p! KEY_VALUE_PARTIAL_INFORMATION allocation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMultiString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp635 18     "%0WDFKEY %10!p! QueryPartial failed: %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryMultiString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMultiString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMultiString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMultiString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryMultiString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryQueryMultiString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp817 22     "%0WDFKEY %10!p! KEY_VALUE_PARTIAL_INFORMATION allocation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryQueryUnicodeString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp998 26     "%0WDFKEY %10!p! QueryPartial failed, Length %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryString
{
Key, ItemPtr -- 10
dataLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxRegistryAPI_cpp991 25     "%0WDFKEY %10!p! QueryPartial failed, Length %11!d! > max %12!d!, %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryString
{
Key, ItemPtr -- 10
dataLength, ItemLong -- 11
USHORT_MAX, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxRegistryAPI_cpp938 24     "%0WDFKEY %10!p! KEY_VALUE_PARTIAL_INFORMATION allocation failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp928 23     "%0WDFKEY %10!p!, QueryPartial failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryQueryString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1049 27     "%0WDFKEY %10!p!, QueryULong, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryQueryULong
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryULong
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryULong
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryULong
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryQueryULong
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryQueryULong
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1101 28     "%0WDFKEY %10!p! SetValue, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignValue
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignValue
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignValue
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignValue
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignValue
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryAssignValue
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1192 31     "%0WDFKEY handle %10!p! SetValue, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignMemory
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp1165 29     "%0WDFKEY %10!p!, WDFMEMORY %11!p! Offsets overflowed, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignMemory
{
Key, ItemPtr -- 10
Memory, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMemory
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMemory
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMemory
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMemory
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryAssignMemory
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1238 32     "%0WDFKEY %10!p! SetValue, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignULong
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignULong
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignULong
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignULong
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignULong
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryAssignULong
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1322 34     "%0WDFKEY %10!p! set value failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp1303 33     "%0WDFKEY %10!p! allocate temporary buffer failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignUnicodeString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryAssignUnicodeString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1379 35     "%0WDFKEY handle %10!p! SetValue, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryAssignString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4758f622-4ad6-05da-b974-f97aad1ae19f     support // SRC=FxRegistryAPI.cpp MJ= MN=
#typev  FxRegistryAPI_cpp1472 39     "%0WDFKEY %10!p! SetValue, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignMultiString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp1460 38     "%0WDFKEY %10!p! allocate for query buffer failed, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignMultiString
{
Key, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRegistryAPI_cpp1448 37     "%0WDFKEY %10!p!,  WDFCOLLECTION %11!p! contains non string objects, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfRegistryAssignMultiString
{
Key, ItemPtr -- 10
StringsCollection, ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp151 16     "%0UNICODE_STRING %10!p!, Length %11!d! > MaximumLength %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMultiString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
String->MaximumLength, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_hpp142 15     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! > 0, Buffer is NULL, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMultiString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp133 14     "%0UNICODE_STRING %10!p!, MaximumLength %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMultiString
{
String, ItemPtr -- 10
String->MaximumLength, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_hpp124 13     "%0UNICODE_STRING %10!p!, Length %11!d! is odd, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfRegistryAssignMultiString
{
String, ItemPtr -- 10
String->Length, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
018de058-6970-dc88-72ac-3ac61555ea00     support // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfRegistryAssignMultiString
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
8f1e8249-8ed6-6357-86c9-4d3191206244     support // SRC=FxRequestBuffer.cpp MJ= MN=
#typev  FxRequestBuffer_cpp78 12     "%0Buffer is NULL, but a length (0x%10!x!) is specified"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
Descriptor->u.BufferType.Length, ItemLong -- 10
}
#typev  FxRequestBuffer_cpp71 11     "%0A NULL Buffer is not allowed"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
}
#typev  FxRequestBuffer_cpp103 14     "%0MDL is NULL, but a length (0x%10!x!) is specified"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
Descriptor->u.MdlType.BufferLength, ItemLong -- 10
}
#typev  FxRequestBuffer_cpp96 13     "%0A NULL MDL is not allowed"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
}
#typev  FxRequestBuffer_cpp139 16     "%0Memory offset values are not valid %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
status, ItemNTSTATUS -- 10
}
#typev  FxRequestBuffer_cpp123 15     "%0A NULL WDFMEMORY handle is not allowed"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
}
#typev  FxRequestBuffer_cpp54 10     "%0A NULL Descriptor is not allowed"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::ValidateMemoryDescriptor
{
}
#typev  FxRequestBuffer_cpp349 17     "%0Couldn't allocate memory for MDL of length 0x%10!x! %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::GetOrAllocateMdl
{
length, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestBuffer_cpp358 18     "%0Couldn't lock pages for MDL 0x%10!p! %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::GetOrAllocateMdl
{
*Mdl, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxRequestBuffer_cpp410 19     "%0Couldn't allocate memory for MDL of length 0x%10!x! %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxRequestBuffer::GetOrAllocateMdl
{
length, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
911d6b03-e0ff-a096-2847-4a5d6ff906f7     support // SRC=FxResourceCollection.cpp MJ= MN=
#typev  FxResourceCollection_cpp688 12     "%0Integer overflow occured when computing size of IO_RESOURCE_REQUIREMENTS_LIST"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxIoResReqList::CreateWdmList
{
}
#typev  FxResourceCollection_cpp55 10     "%0Removes not allowed on handle %10!p!, remove at index %11!d!failed"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxResourceCollection::RemoveAndDelete
{
GetObjectHandle(), ItemPtr -- 10
Index, ItemLong -- 11
}
#typev  FxResourceCollection_cpp127 11     "%0Adds not allowed on handle %10!p!, add at index %11!d!failed"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxResourceCollection::AddAt
{
GetObjectHandle(), ItemPtr -- 10
Index, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b2b80e5c-1848-60f9-ef0b-fa5200221684     support // SRC=FxSpinLock.cpp MJ= MN=
#typev  FxSpinLock_cpp108 11     "%0WDFSPINLOCK 0x%10!p! not owned by thread 0x%11!p!, owned by thread 0x%12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=FxSpinLock::ReleaseLock
{
GetObjectHandle(), ItemPtr -- 10
KeGetCurrentThread(), ItemPtr -- 11
pHistory->OwningThread, ItemPtr -- 12
}
#typev  FxSpinLock_cpp102 10     "%0WDFSPINLOCK %10!p! being released by thread 0x%11!p!, but was never acquired!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=FxSpinLock::ReleaseLock
{
GetObjectHandle(), ItemPtr -- 10
KeGetCurrentThread(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     support // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfSpinLockCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
dc84f771-2019-dc22-dadf-e3976ba27578     support // SRC=FxSpinLockAPI.cpp MJ= MN=
#typev  FxSpinLockAPI_cpp128 10     "%0WDFSPINLOCK %10!p! is associated with an interrupt, cannot be used for normal sync operations"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfSpinLockAcquire
{
SpinLock, ItemPtr -- 10
}
#typev  FxSpinLockAPI_cpp163 11     "%0WDFSPINLOCK %10!p! is associated with an interrupt, cannot be used for normal sync operations"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=imp_WdfSpinLockRelease
{
SpinLock, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
5468cbb0-72ad-6d27-1491-42d88b3ca287     verifier // SRC=verifier.cpp MJ= MN=
#typev  verifier_cpp496 10     "%0Attempting to get context type %10!s! from WDFOBJECT 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGDEVICE FUNC=VfWdfObjectGetTypedContext
{
pGivenName, ItemString -- 10
Handle, ItemPtr -- 11
}
#typev  verifier_cpp547 11     "%0Attributes %10!p! ContextTypeInfo is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGHANDLE FUNC=VfAllocateContext
{
Attributes, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  verifier_cpp636 13     "%0WDFHANDLE %10!p! failed to add context, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGHANDLE FUNC=VfAddContextToHandle
{
Handle, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  verifier_cpp617 12     "%0WDFHANDLE %10!p! cannot have contexts added to it, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGHANDLE FUNC=VfAddContextToHandle
{
Handle, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
862af6b1-6a3a-4bdb-9ec4-dc7220a42d39     WdfCore // SRC=FxTagTracker.hpp MJ= MN=
#typev  FxTagTracker_hpp161 11     "%0Failed to allocate tag tracker, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxObject::AllocateTagTracker
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
47f60883-01f9-85a5-fc9d-1be7dcd4b026     WdfCore // SRC=FxObject.hpp MJ= MN=
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::AddChildObjectInternal
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::RemoveChildObjectInternal
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4171e494-5123-2f62-df84-0b36226c2e4c     WdfCore // SRC=FxObject.cpp MJ= MN=
#typev  FxObject_cpp139 10     "%0Handle %10!s! %11!p! (raw object %12!p!) was freed using WdfObjectDereference(), not WdfObjectDelete()"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGOBJECT FUNC=FxObject::~FxObject
{
pHandleName, ItemString -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
this, ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
47f60883-01f9-85a5-fc9d-1be7dcd4b026     WdfCore // SRC=FxObject.hpp MJ= MN=
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::~FxObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::FinalRelease
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::AssignParentObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::QueueDeferredDisposeLocked
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DeletedAndDisposedWorkerLocked
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DeleteEarlyDisposedObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::ParentDeleteEvent
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::PerformDisposingDisposeChildrenLocked
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::PerformDisposingDisposeChildrenLocked
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::PerformEarlyDisposeWorkerAndUnlock
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::EarlyDispose
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::PerformEarlyDispose
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::PerformEarlyDispose
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DisposeChildrenWorker
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DisposeChildrenWorker
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DisposeChildrenWorker
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DeferredDisposeWorkItem
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DeleteWorkerAndUnlock
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DeleteObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp401 10     "%0Object %10!p!, WDFOBJECT %11!p! transitioning from %12!s! to %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGOBJECT FUNC=FxObject::DeleteObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
NewState, ItemEnum(FxObjectState) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::DeleteObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
#typev  FxObject_hpp972 11     "%0Object %10!p!, WDFOBJECT %11!p!, state %12!s! dropping event %13!s!"      //   GLOBALS=m_Globals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGOBJECT FUNC=FxObject::DeleteObject
{
this, ItemPtr -- 10
GetObjectHandleUnchecked(), ItemPtr -- 11
m_ObjectState, ItemEnum(FxObjectState) -- 12
Event, ItemEnum(FxObjectDroppedEvent) -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b106fc70-6ae2-f3af-294a-abb65913fa8e     WdfCore // SRC=FxObjectAPI.cpp MJ= MN=
#typev  FxObjectAPI_cpp205 10     "%0Invalid to call on WDFOBJECT 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfObjectAcquireLock
{
Object, ItemPtr -- 10
}
#typev  FxObjectAPI_cpp260 11     "%0Invalid to call on WDFOBJECT 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfObjectReleaseLock
{
Object, ItemPtr -- 10
}
#typev  FxObjectAPI_cpp299 12     "%0Attempt to Delete an Object Which does not allow WdfDeleteObject Handle 0x%10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfObjectDelete
{
Object, ItemPtr -- 10
STATUS_CANNOT_DELETE, ItemNTSTATUS -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
baec2b6c-16e6-c04f-395a-51b9f2ce4da2     WdfCore // SRC=fxtagtracker.cpp MJ= MN=
#typev  fxtagtracker_cpp182 10     "%0releasing tag %10!p! on object %11!p! that was not acquired, !wdftagtracker %12!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTagTracker::UpdateTagHistory
{
Tag, ItemPtr -- 10
m_OwningObject, ItemPtr -- 11
this, ItemPtr -- 12
}
#typev  fxtagtracker_cpp279 13     "%0Possibly Abandonded ref on object %10!p! tag %11!p! (%12!s! @ %13!d!).  Is benign unless there are other outstanding leaked references."      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGDEVICE FUNC=FxTagTracker::CheckForAbandondedTags
{
m_OwningObject, ItemPtr -- 10
current->Tag, ItemPtr -- 11
current->File, ItemString -- 12
current->Line, ItemLong -- 13
}
#typev  fxtagtracker_cpp259 12     "%0Abandonded ref on object %10!p! tag %11!p! (%12!s! @ %13!d!)"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTagTracker::CheckForAbandondedTags
{
m_OwningObject, ItemPtr -- 10
current->Tag, ItemPtr -- 11
current->File, ItemString -- 12
current->Line, ItemLong -- 13
}
#typev  fxtagtracker_cpp234 11     "%0Dropped references on a tag tracker, show references with: !wdftagtracker %10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxTagTracker::CheckForAbandondedTags
{
this, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
10dd18a7-c4b7-4923-5428-7fab669f24ae     WdfCore // SRC=HandleAPI.cpp MJ= MN=
#typev  HandleAPI_cpp111 10     "%0Size overflow, Object size 0x%10!x!, extra object size 0x%11!x!, ContextTypeInfo size 0x%12!I64x!, ContextSizeOverride 0x%13!I64x!, %14!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGOBJECT FUNC=FxCalculateObjectTotalSize
{
RawObjectSize, ItemLong -- 10
ExtraSize, ItemLong -- 11
(Attributes != NULL) ? Attributes->ContextTypeInfo->ContextSize : 0, ItemLongLongX -- 12
(Attributes != NULL) ? Attributes->ContextSizeOverride : 0, ItemLongLongX -- 13
status, ItemNTSTATUS -- 14
}
#typev  HandleAPI_cpp340 11     "%0Object Type Mismatch, Handle 0x%10!p!, Type 0x%11!x!, Obj 0x%12!p!, SB 0x%13!x!"      //   GLOBALS=Object->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxObjectHandleGetPtrQI
{
Handle, ItemPtr -- 10
Type, ItemLong -- 11
Object, ItemPtr -- 12
Object->GetType(), ItemLong -- 13
}
#typev  HandleAPI_cpp433 13     "%0Attributes %10!p! ContextTypeInfo is NULL, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGHANDLE FUNC=imp_WdfObjectAllocateContext
{
Attributes, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  HandleAPI_cpp414 12     "%0WDFHANDLE %10!p! cannot have contexts added to it, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGHANDLE FUNC=imp_WdfObjectAllocateContext
{
Handle, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  HandleAPI_cpp549 14     "%0Attempting to get context type %10!s! from WDFOBJECT 0x%11!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGHANDLE FUNC=imp_WdfObjectGetTypedContextWorker
{
pGivenName, ItemString -- 10
Handle, ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
49dea60a-b6c1-cf53-a4a8-d80dfa589515     WdfCore // SRC=wdfpool.cpp MJ= MN=
#typev  wdfpool_cpp304 13     "%0overflow: header + pool request (%10!I64d!)"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPOOL FUNC=FxPoolAllocator
{
Size, ItemLongLong -- 10
}
#typev  wdfpool_cpp215 12     "%0overflow: allocation tracker (%10!d!) + header (%11!d!) + pool request (%12!I64d!)"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPOOL FUNC=FxPoolAllocator
{
sizeof(FX_POOL_TRACKER), ItemLong -- 10
FX_POOL_HEADER_SIZE, ItemLong -- 11
Size, ItemLongLong -- 12
}
#typev  wdfpool_cpp163 11     "%0Allocation Fail Count exceeded"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPOOL FUNC=FxPoolAllocator
{
}
#typev  wdfpool_cpp144 10     "%0Invalid Allocation Size of 0 requested"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPOOL FUNC=FxPoolAllocator
{
}
#typev  wdfpool_cpp535 16     "%0FX_POOL 0x%10!p! leaked non-paged memory alloc 0x%11!p! (tracking block %12!p!)"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPoolDump
{
Pool, ItemPtr -- 10
pTracker+1, ItemPtr -- 11
pTracker, ItemPtr -- 12
}
#typev  wdfpool_cpp513 15     "%0FX_POOL 0x%10!p! leaked paged memory alloc 0x%11!p! (tracking block %12!p!)"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPoolDump
{
Pool, ItemPtr -- 10
pTracker + 1, ItemPtr -- 11
pTracker, ItemPtr -- 12
}
#typev  wdfpool_cpp487 14     "%0FxPoolDump: NonPagedBytes %10!I64d!, PagedBytes %11!I64d!, NonPagedAllocations %12!d!, PagedAllocations %13!d!,PeakNonPagedBytes %14!I64d!, PeakPagedBytes %15!I64d!,FxPoolDump: PeakNonPagedAllocations %16!d!, PeakPagedAllocations %17!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxPoolDump
{
Pool->NonPagedBytes, ItemLongLong -- 10
Pool->PagedBytes, ItemLongLong -- 11
Pool->NonPagedAllocations, ItemLong -- 12
Pool->PagedAllocations, ItemLong -- 13
Pool->PeakNonPagedBytes, ItemLongLong -- 14
Pool->PeakPagedBytes, ItemLongLong -- 15
Pool->PeakNonPagedAllocations, ItemLong -- 16
Pool->PeakPagedAllocations, ItemLong -- 17
}
#typev  wdfpool_cpp573 17     "%0Initializing Pool 0x%10!p!, Tracking %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPOOL FUNC=FxPoolInitialize
{
Pool, ItemPtr -- 10
FxDriverGlobals->IsPoolTrackingOn(), ItemLong -- 11
}
#typev  wdfpool_cpp651 20     "%0Destroying Pool 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPOOL FUNC=FxPoolDestroy
{
Pool, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b46ba98b-c9f9-ccca-6294-131d92fd9cd8     WdfCore // SRC=FxVerifierBugcheck.cpp MJ= MN=
#typev  FxVerifierBugcheck_cpp95 10     "%0NULL Required Parameter Passed to a DDI
FxDriverGlobals 0x%10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGERROR FUNC=FxVerifierNullBugCheck
{
FxDriverGlobals, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
6627d29a-147c-7a09-6323-d8009611c7f7     WdfCore // SRC=globals.cpp MJ= MN=
#typev  globals_cpp810 11     "%0Initialize globals for %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGDRIVER FUNC=FxInitialize
{
RegistryPath, ItemPWString -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
26e648ec-e877-f028-5c1d-a4ba8ba90098     WdfCore // SRC=FxUserObject.cpp MJ= MN=
#typev  FxUserObject_cpp79 11     "%0FxObject::Commit failed %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGOBJECT FUNC=FxUserObject::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  FxUserObject_cpp68 10     "%0Memory allocation failed"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGOBJECT FUNC=FxUserObject::_Create
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9b51dd29-c0e5-200b-ef41-8d41eecb59c3     WdfCore // SRC=FxUserObjectApi.cpp MJ= MN=
#typev  FxUserObjectApi_cpp134 10     "%0Created UserObject Handle 0x%10!p!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGUSEROBJECT FUNC=imp_WdfObjectCreate
{
handle, ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
06256c0f-48e3-6f74-feed-af811f9a4e95     WdfCore // SRC=FxValidateFunctions.hpp MJ= MN=
#typev  FxValidateFunctions_hpp90 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=imp_WdfObjectCreate
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9ed819dd-608f-8090-156b-6e2994e343ad     WdfCore // SRC=FxVerifierLock.cpp MJ= MN=
#typev  FxVerifierLock_cpp647 20     "%0Object Type 0x%10!x! does not have a lock order defined in fx\inc\FxVerifierLock.hpp"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::InitializeLockOrder
{
ObjectType, ItemLong -- 10
}
#typev  FxVerifierLock_cpp721 21     "%0Thread 0x%10!p! does not have an entry"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::GetThreadTableEntry
{
curThread, ItemPtr -- 10
}
#typev  FxVerifierLock_cpp889 25     "%0OldEntry Thread 0x%10!p! not Current! 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::ReleaseOrReplaceThreadTableEntry
{
pLock, ItemPtr -- 10
curThread, ItemPtr -- 11
}
#typev  FxVerifierLock_cpp976 26     "%0No Memory to allocate thread table"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::AllocateThreadTable
{
}
#typev  FxVerifierLock_cpp1049 30     "%0Object 0x%10!p!, ObjectType 0x%11!x!, LockLevel 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::DumpDetails
{
next->m_ParentObject, ItemPtr -- 10
next->m_ParentObject->GetType(), ItemLong -- 11
next->m_Order, ItemLong -- 12
}
#typev  FxVerifierLock_cpp1044 29     "%0List of Already Acquired Locks and Objects:"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::DumpDetails
{
}
#typev  FxVerifierLock_cpp1037 28     "%0Highest Lock Currently held is level 0x%10!x! for Object 0x%11!p!, ObjectType 0x%12!x!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::DumpDetails
{
next->m_Order, ItemLong -- 10
next->m_ParentObject, ItemPtr -- 11
next->m_ParentObject->GetType(), ItemLong -- 12
}
#typev  FxVerifierLock_cpp1028 27     "%0Thread 0x%10!p! Attempted to acquire lock on Object 0x%11!p!, ObjectType 0x%12!x!, at Level 0x%13!x! out of sequence."      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::DumpDetails
{
curThread, ItemPtr -- 10
Lock->m_ParentObject, ItemPtr -- 11
Lock->m_ParentObject->GetType(), ItemLong -- 12
Lock->m_Order, ItemLong -- 13
}
#typev  FxVerifierLock_cpp191 11     "%0Thread 0x%10!p! already owns lock 0x%11!p! for object 0x%12!p!, WDFOBJECT 0x%13!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_FATAL FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Lock
{
curThread, ItemPtr -- 10
this, ItemPtr -- 11
m_ParentObject, ItemPtr -- 12
m_ParentObject->GetObjectHandle(), ItemPtr -- 13
}
#typev  FxVerifierLock_cpp578 19     "%0Record entry for VerifierLock 0x%10!p! is missing on list 0x%11!p! for Thread 0x%12!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
this, ItemPtr -- 10
perThreadList, ItemPtr -- 11
m_OwningThread, ItemPtr -- 12
}
#typev  FxVerifierLock_cpp501 18     "%0Record entry for VerifierLock 0x%10!p! is missing on list 0x%11!p! for Thread 0x%12!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
this, ItemPtr -- 10
perThreadList, ItemPtr -- 11
m_OwningThread, ItemPtr -- 12
}
#typev  FxVerifierLock_cpp404 17     "%0this 0x%10!p!, perThreadList 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
this, ItemPtr -- 10
perThreadList, ItemPtr -- 11
}
#typev  FxVerifierLock_cpp401 16     "%0Thread has entry, but no locks recorded as held for dispatch!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
}
#typev  FxVerifierLock_cpp383 15     "%0this 0x%10!p!, perThreadList 0x%11!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
this, ItemPtr -- 10
perThreadList, ItemPtr -- 11
}
#typev  FxVerifierLock_cpp380 14     "%0Thread has entry, but no locks recorded as held for passive!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
}
#typev  FxVerifierLock_cpp348 13     "%0Unlock:  Can't get per thread entry for thread %10!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
curThread, ItemPtr -- 10
}
#typev  FxVerifierLock_cpp332 12     "%0Thread 0x%10!p! Is Attempting to release a Lock 0x%11!p! for Object 0x%12!p! it does not own!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxVerifierLock::Unlock
{
curThread, ItemPtr -- 10
this, ItemPtr -- 11
m_ParentObject, ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
4a25592a-8cae-c35c-6091-a285ae14baaa     WdfCore // SRC=FxValidateFunctions.cpp MJ= MN=
#typev  FxValidateFunctions_cpp162 18     "%0Attributes %10!p! execution level set to %11!d!, out of range, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ExecutionLevel, ItemLong -- 11
STATUS_WDF_OBJECT_ATTRIBUTES_INVALID, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_cpp172 19     "%0Attributes %10!p! synchronization scope set to %11!d!, out of range, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->SynchronizationScope, ItemLong -- 11
STATUS_WDF_OBJECT_ATTRIBUTES_INVALID, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_cpp207 21     "%0Attributes %10!p! does not allow execution level to be set, but was set to %11!s!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ExecutionLevel, ItemEnum(_WDF_EXECUTION_LEVEL) -- 11
STATUS_WDF_EXECUTION_LEVEL_INVALID, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_cpp189 20     "%0Attributes %10!p! does not allow synchronization scope too be set, but was set to %11!s!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->SynchronizationScope, ItemEnum(_WDF_SYNCHRONIZATION_SCOPE) -- 11
STATUS_WDF_SYNCHRONIZATION_SCOPE_INVALID, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_cpp151 17     "%0ParentObject required in WDF_OBJECT_ATTRIBUTES %10!p!, %11!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 11
}
#typev  FxValidateFunctions_cpp140 16     "%0Attributes %10!p! does not allow a parent object to be set, set to %11!p!, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ParentObject, ItemPtr -- 11
STATUS_WDF_PARENT_ASSIGNMENT_NOT_ALLOWED, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_cpp126 15     "%0Attributes %10!p! ContextSizeOverride %11!I64d! < ContextTypeInfo->ContextSize %12!I64d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ContextSizeOverride, ItemLongLong -- 11
Attributes->ContextTypeInfo->ContextSize, ItemLongLong -- 12
STATUS_WDF_OBJECT_ATTRIBUTES_INVALID, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_cpp115 14     "%0Attributes %10!p! ContextSizeOverride of %11!I64d! specified, but no type information, %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ContextSizeOverride, ItemLongLong -- 11
STATUS_WDF_OBJECT_ATTRIBUTES_INVALID, ItemNTSTATUS -- 12
}
#typev  FxValidateFunctions_cpp98 13     "%0Attributes %10!p! ContextTypeInfo %11!p! ContextSize %12!I64d! is not zero, but ContextName is NULL, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ContextTypeInfo, ItemPtr -- 11
Attributes->ContextTypeInfo->ContextSize, ItemLongLong -- 12
STATUS_WDF_OBJECT_ATTRIBUTES_INVALID, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_cpp82 12     "%0Attributes %10!p! ContextTypeInfo %11!p! Size %12!d! incorrect, expected %13!d!, %14!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
Attributes->ContextTypeInfo, ItemPtr -- 11
Attributes->ContextTypeInfo->Size, ItemLong -- 12
sizeof(WDF_OBJECT_CONTEXT_TYPE_INFO), ItemLong -- 13
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 14
}
#typev  FxValidateFunctions_cpp68 11     "%0Attributes %10!p! Size incorrect, expected %11!d!, got %12!d!, %13!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGAPIERROR FUNC=FxValidateObjectAttributes
{
Attributes, ItemPtr -- 10
sizeof(WDF_OBJECT_ATTRIBUTES), ItemLong -- 11
Attributes->Size, ItemLong -- 12
STATUS_INFO_LENGTH_MISMATCH, ItemNTSTATUS -- 13
}
#typev  FxValidateFunctions_cpp52 10     "%0WDF_OBJECT_ATTRIBUTES required, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxValidateObjectAttributes
{
(ULONG) STATUS_WDF_PARENT_NOT_SPECIFIED, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
207c925e-4d19-f9fa-7c27-4bb763bfb3bb     WdfCore // SRC=WdfpoolKm.cpp MJ= MN=
#typev  WdfpoolKm_cpp259 10     "%0PMDL 0x%10!p! leaked, FxObject owner %11!p!, Callers Address %12!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxMdlDump
{
pCur->Info[i].Mdl, ItemPtr -- 10
pCur->Info[i].Owner, ItemPtr -- 11
pCur->Info[i].Caller, ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
78e7bed2-0a0f-3a6f-6d69-d10c8f4438e3     WdfCore // SRC=FxRegKey.cpp MJ= MN=
#typev  FxRegKey_cpp54 11     "%0Red value name %10!s!, DataLength %11!d!, Data buffer from registry does not have double NULL terminal chars, STATUS_OBJECT_TYPE_MISMATCH"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=FxRegKey::_VerifyMultiSzString
{
RegValueName, ItemPWString -- 10
DataLength, ItemLong -- 11
}
#typev  FxRegKey_cpp41 10     "%0Reg value name %10!s!, DataLength %11!d!, Data buffer length is invalid, STATUS_OBJECT_TYPE_MISMATCH"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGERROR FUNC=FxRegKey::_VerifyMultiSzString
{
RegValueName, ItemPWString -- 10
DataLength, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0cb05f64-1305-ad9b-046c-8d30905d67c5     WdfCore // SRC=fxpkgfdo.cpp MJ= MN=
#typev  fxpkgfdo_cpp488 12     "%0Exiting QueryDeviceRelations handler, status %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::PnpQueryDeviceRelations
{
status, ItemNTSTATUS -- 10
}
#typev  fxpkgfdo_cpp434 11     "%0Entering QueryDeviceRelations handler, type %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::PnpQueryDeviceRelations
{
type, ItemEnum(_DEVICE_RELATION_TYPE) -- 10
}
#typev  fxpkgfdo_cpp530 14     "%0Exiting QueryInterface handler, %10!s!"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::_PnpQueryInterface
{
status, ItemNTSTATUS -- 10
}
#typev  fxpkgfdo_cpp525 13     "%0Entering QueryInterface handler"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::_PnpQueryInterface
{
}
#typev  fxpkgfdo_cpp606 16     "%0Exiting QueryCapabilities handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryCapabilities
{
}
#typev  fxpkgfdo_cpp586 15     "%0Entering QueryCapabilities handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryCapabilities
{
}
#typev  fxpkgfdo_cpp739 18     "%0Exiting QueryCapabilities completion handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryCapabilitiesCompletion
{
}
#typev  fxpkgfdo_cpp620 17     "%0Entering QueryCapabilities completion handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryCapabilitiesCompletion
{
}
#typev  fxpkgfdo_cpp786 21     "%0Exiting QueryPnpDeviceState completion handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryPnpDeviceStateCompletion
{
}
#typev  fxpkgfdo_cpp778 20     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! returning PNP_DEVICE_STATE 0x%12!d! IRP 0x%13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryPnpDeviceStateCompletion
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
pnpDeviceState, ItemLong -- 12
Irp->GetIrp(), ItemPtr -- 13
}
#typev  fxpkgfdo_cpp768 19     "%0Entering QueryPnpDeviceState completion handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::HandleQueryPnpDeviceStateCompletion
{
}
#typev  fxpkgfdo_cpp877 22     "%0Could not convert object to handle"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgFdo::CreateDefaultDeviceList
{
}
#typev  fxpkgfdo_cpp1500 24     "%0PNP start failed with %10!s!"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgFdo::_PnpStartDeviceCompletionRoutine
{
irp.GetStatus(), ItemNTSTATUS -- 10
}
#typev  fxpkgfdo_cpp205 10     "%0Memory allocation failed: %10!s!"      //   GLOBALS=DriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGIO FUNC=FxPkgFdo::_Create
{
status, ItemNTSTATUS -- 10
}
#typev  fxpkgfdo_cpp1062 23     "%0PNP start preprocessing failed with %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgFdo::PnpSendStartDeviceDownTheStackOverload
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
f50060b6-3b77-0b0a-4d8b-d71ff471ef61     WdfCore // SRC=fdopower.cpp MJ= MN=
#typev  fdopower_cpp313 10     "%0Received set device power irp 0x%10!p! on WDFDEVICE 0x%11!p! !devobj 0x%12!p!, but the irp was not requested by the device (the power policy owner)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgFdo::DispatchDeviceSetPower
{
Irp->GetIrp(), ItemPtr -- 10
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0e4262ce-cb72-a804-9052-51b6ae699889     WdfCore // SRC=FxPkgPdo.cpp MJ= MN=
#typev  FxPkgPdo_cpp241 10     "%0DeviceInit %10!p! could not allocate string for device IDs (length %11!I64d!), %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::Initialize
{
DeviceInit, ItemPtr -- 10
cbLength, ItemLongLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPdo_cpp508 11     "%0WDFDEVICE %10!p! failing TargetDeviceRelations, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpQueryDeviceRelations
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPdo_cpp948 12     "%0WDFDEVICE %10!p! failing Query Device Text, type %11!d!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::_PnpQueryDeviceText
{
FxDeviceToMx::GetHandle(pThis->m_Device), ItemPtr -- 10
Irp->GetParameterQueryDeviceTextType(), ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPdo_cpp1119 17     "%0Eject failed since driver's EvtDeviceEject returned %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpEventEjectHardwareOverload
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPdo_cpp1102 16     "%0waiting on event %10!p! for device to finish scanning"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpEventEjectHardwareOverload
{
&event, ItemPtr -- 10
}
#typev  FxPkgPdo_cpp1086 15     "%0Failed to mark PDO WDFDEVICE %10!p! !devobj %11!p! missing after eject %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpEventEjectHardwareOverload
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPdo_cpp1080 14     "%0PDO WDFDEVICE %10!p! !devobj %11!p! marked missing as a result of eject"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpEventEjectHardwareOverload
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
}
#typev  FxPkgPdo_cpp1230 18     "%0Removing entry reference %10!p! on FxPkgPnp %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpEventPdoRemovedOverload
{
m_Description, ItemPtr -- 10
this, ItemPtr -- 11
}
#typev  FxPkgPdo_cpp1453 20     "%0WDFDEVICE %10!p! could not alloc string for PnP query IdType %11!s!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::_PnpQueryId
{
FxDeviceToMx::GetHandle(pThis->m_Device), ItemPtr -- 10
queryIdType, ItemEnum(BUS_QUERY_ID_TYPE) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPdo_cpp1445 19     "%0WDFDEVICE %10!p! does not have a string for PnP query IdType %11!s!, %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::_PnpQueryId
{
FxDeviceToMx::GetHandle(pThis->m_Device), ItemPtr -- 10
queryIdType, ItemEnum(BUS_QUERY_ID_TYPE) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPdo_cpp1505 23     "%0Exiting QueryPnpDeviceState handler"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPdo::_PnpQueryPnpDeviceState
{
}
#typev  FxPkgPdo_cpp1497 22     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! returning PNP_DEVICE_STATE 0x%12!d! IRP 0x%13!p!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPdo::_PnpQueryPnpDeviceState
{
FxDeviceToMx::GetHandle(This->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->GetDevice()), ItemPtr -- 11
pnpDeviceState, ItemLong -- 12
Irp->GetIrp(), ItemPtr -- 13
}
#typev  FxPkgPdo_cpp1489 21     "%0Entering QueryPnpDeviceState handler"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPdo::_PnpQueryPnpDeviceState
{
}
#typev  FxPkgPdo_cpp1820 24     "%0Could not allocate ejection device list for PDO WDFDEVICE %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::AddEjectionDevice
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
377b226f-3f5b-4338-a870-94c38101cb33     WdfCore // SRC=PdoPower.cpp MJ= MN=
#typev  PdoPower_cpp169 10     "%0Received set device power irp 0x%10!p! on WDFDEVICE 0x%11!p! !devobj 0x%12!p!, but the irp was not requested by the device (the power policy owner)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPdo::DispatchDeviceSetPower
{
Irp->GetIrp(), ItemPtr -- 10
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d816b6e3-c6ba-363d-54b4-3533d1de16bb     WdfCore // SRC=FxPkgPnp.cpp MJ= MN=
#typev  FxPkgPnp_cpp924 27     "%0WDFDEVICE %10!p! could not allocate PNP_BUS_INFORMATION string,  %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusInformation
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp1059 28     "%0WDFDEVICE %10!p! could not allocate device relations for type %11!d! string,  %12!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryDeviceRelations
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
type, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPnp_cpp1173 31     "%0Power Policy State Machine init failed, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PostCreateDeviceInitialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp1165 30     "%0Power State Machine init failed, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PostCreateDeviceInitialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp1157 29     "%0PnP State Machine init failed, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PostCreateDeviceInitialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp1286 33     "%0Invalid special file type %10!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::SetSpecialFileSupport
{
FileType, ItemLong -- 10
}
#typev  FxPkgPnp_cpp1366 34     "%0WDFDEVICE %10!p! could not allocate IRP to send QI to parent !devobj %11!p!, %12!s!"      //   GLOBALS=FxDeviceToMx::GetDriverGlobals(Device) LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=PnpPassThroughQI
{
FxDeviceToMx::GetHandle(Device), ItemPtr -- 10
pTopOfStack.GetObject(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPnp_cpp2147 38     "%0WDFDEVICE %10!p!, !devobj %11!p! waiting for remove event to finish processing"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::_PnpRemoveDevice
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp2574 43     "%0Failed to register WMI power GUID %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::RegisterPowerPolicyWmiInstance
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp3993 63     "%0Before:  type %10!d!, in path %11!d!, special count %12!d!, flags 0x%13!x!, device %14!p! (WDFDEVICE %15!p!), is pageable capable %16!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::SetUsageNotificationFlags
{
Type, ItemLong -- 10
InPath, ItemLong -- 11
GetUsageCount(Type), ItemLong -- 12
oldFlags, ItemLong -- 13
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 14
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 15
FxDeviceToMx::IsPowerPageableCapable(m_Device), ItemLong -- 16
}
#typev  FxPkgPnp_cpp4143 64     "%0After:  special count %10!d!, flags 0x%11!x!, device %12!p! (WDFDEVICE %13!p!)"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::CommitUsageNotification
{
GetUsageCount(Type), ItemLong -- 10
newFlags, ItemLong -- 11
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 12
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 13
}
#typev  FxPkgPnp_cpp4364 67     "%0A new state changing pnp irp %10!s! IRP %11!p! arrived while another pnp irp %12!s! IRP %13!p! is still pending WDFDEVICE %14!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::SetPendingPnpIrp
{
Irp->GetMinorFunction(), ItemListByte(IRP_MN_START_DEVICE,IRP_MN_QUERY_REMOVE_DEVICE,IRP_MN_REMOVE_DEVICE,IRP_MN_CANCEL_REMOVE_DEVICE,IRP_MN_STOP_DEVICE,IRP_MN_QUERY_STOP_DEVICE,IRP_MN_CANCEL_STOP_DEVICE,IRP_MN_QUERY_DEVICE_RELATIONS,IRP_MN_QUERY_INTERFACE,IRP_MN_QUERY_CAPABILITIES,IRP_MN_QUERY_RESOURCES,IRP_MN_QUERY_RESOURCE_REQUIREMENTS,IRP_MN_QUERY_DEVICE_TEXT,IRP_MN_FILTER_RESOURCE_REQUIREMENTS,IRP_MN_PNP_14,IRP_MN_READ_CONFIG,IRP_MN_WRITE_CONFIG,IRP_MN_EJECT,IRP_MN_SET_LOCK,IRP_MN_QUERY_ID,IRP_MN_QUERY_PNP_DEVICE_STATE,IRP_MN_QUERY_BUS_INFORMATION,IRP_MN_DEVICE_USAGE_NOTIFICATION,IRP_MN_SURPRISE_REMOVAL) -- 10
Irp->GetIrp(), ItemPtr -- 11
pendingIrp.GetMinorFunction(), ItemListByte(IRP_MN_START_DEVICE,IRP_MN_QUERY_REMOVE_DEVICE,IRP_MN_REMOVE_DEVICE,IRP_MN_CANCEL_REMOVE_DEVICE,IRP_MN_STOP_DEVICE,IRP_MN_QUERY_STOP_DEVICE,IRP_MN_CANCEL_STOP_DEVICE,IRP_MN_QUERY_DEVICE_RELATIONS,IRP_MN_QUERY_INTERFACE,IRP_MN_QUERY_CAPABILITIES,IRP_MN_QUERY_RESOURCES,IRP_MN_QUERY_RESOURCE_REQUIREMENTS,IRP_MN_QUERY_DEVICE_TEXT,IRP_MN_FILTER_RESOURCE_REQUIREMENTS,IRP_MN_PNP_14,IRP_MN_READ_CONFIG,IRP_MN_WRITE_CONFIG,IRP_MN_EJECT,IRP_MN_SET_LOCK,IRP_MN_QUERY_ID,IRP_MN_QUERY_PNP_DEVICE_STATE,IRP_MN_QUERY_BUS_INFORMATION,IRP_MN_DEVICE_USAGE_NOTIFICATION,IRP_MN_SURPRISE_REMOVAL) -- 12
pendingIrp.GetIrp(), ItemPtr -- 13
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 14
}
#typev  FxPkgPnp_cpp4571 72     "%0The driver failed to return from a callback routine in a reasonable period of time.  This prevented the machine from going to sleep or from hibernating.  The machine crashed because that was the best way to get data about the cause of the crash into a minidump file."      //   GLOBALS=FxDeviceToMx::GetDriverGlobals(pDevice) LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxWatchdog::_WatchdogDpc
{
}
#typev  FxPkgPnp_cpp5328 73     "%0Not saving wake settings for WDFDEVICE %10!p! due to system power transition"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::SaveState
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
da4a0a10-d2dd-364f-e436-3dc54956d3ab     WdfCore // SRC=FxResource.hpp MJ= MN=
#typev  FxResource_hpp210 10     "%0FxCmResList initialize failed, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxCmResList::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxResource_hpp248 11     "%0Failed to allocate FxCmResList, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxCmResList::_CreateAndInit
{
ntStatus, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
d816b6e3-c6ba-363d-54b4-3533d1de16bb     WdfCore // SRC=FxPkgPnp.cpp MJ= MN=
#typev  FxPkgPnp_cpp588 18     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! IRP_MJ_POWER, %12!s! IRP 0x%13!p! for %14!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::Dispatch
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
irp.GetMinorFunction(), ItemListByte(IRP_MN_WAIT_WAKE,IRP_MN_POWER_SEQUENCE,IRP_MN_SET_POWER,IRP_MN_QUERY_POWER) -- 12
irp.GetIrp(), ItemPtr -- 13
irp.GetParameterPowerStateDeviceState(), ItemEnum(_DEVICE_POWER_STATE) -- 14
}
#typev  FxPkgPnp_cpp577 17     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! IRP_MJ_POWER, %12!s! IRP 0x%13!p! for %14!s! (S%15!d!)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::Dispatch
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
irp.GetMinorFunction(), ItemListByte(IRP_MN_WAIT_WAKE,IRP_MN_POWER_SEQUENCE,IRP_MN_SET_POWER,IRP_MN_QUERY_POWER) -- 12
irp.GetIrp(), ItemPtr -- 13
irp.GetParameterPowerStateSystemState(), ItemEnum(_SYSTEM_POWER_STATE) -- 14
irp.GetParameterPowerStateSystemState() - 1, ItemLong -- 15
}
#typev  FxPkgPnp_cpp600 19     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! IRP_MJ_POWER, %12!s! IRP 0x%13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::Dispatch
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
irp.GetMinorFunction(), ItemListByte(IRP_MN_WAIT_WAKE,IRP_MN_POWER_SEQUENCE,IRP_MN_SET_POWER,IRP_MN_QUERY_POWER) -- 12
irp.GetIrp(), ItemPtr -- 13
}
#typev  FxPkgPnp_cpp530 14     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p!, IRP_MJ_PNP, %12!s! IRP 0x%13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::Dispatch
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
irp.GetMinorFunction(), ItemListByte(IRP_MN_START_DEVICE,IRP_MN_QUERY_REMOVE_DEVICE,IRP_MN_REMOVE_DEVICE,IRP_MN_CANCEL_REMOVE_DEVICE,IRP_MN_STOP_DEVICE,IRP_MN_QUERY_STOP_DEVICE,IRP_MN_CANCEL_STOP_DEVICE,IRP_MN_QUERY_DEVICE_RELATIONS,IRP_MN_QUERY_INTERFACE,IRP_MN_QUERY_CAPABILITIES,IRP_MN_QUERY_RESOURCES,IRP_MN_QUERY_RESOURCE_REQUIREMENTS,IRP_MN_QUERY_DEVICE_TEXT,IRP_MN_FILTER_RESOURCE_REQUIREMENTS,IRP_MN_PNP_14,IRP_MN_READ_CONFIG,IRP_MN_WRITE_CONFIG,IRP_MN_EJECT,IRP_MN_SET_LOCK,IRP_MN_QUERY_ID,IRP_MN_QUERY_PNP_DEVICE_STATE,IRP_MN_QUERY_BUS_INFORMATION,IRP_MN_DEVICE_USAGE_NOTIFICATION,IRP_MN_SURPRISE_REMOVAL) -- 12
irp.GetIrp(), ItemPtr -- 13
}
#typev  FxPkgPnp_cpp539 15     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p!, IRP_MJ_PNP, %12!s! type %13!s! IRP 0x%14!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::Dispatch
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
irp.GetMinorFunction(), ItemListByte(IRP_MN_START_DEVICE,IRP_MN_QUERY_REMOVE_DEVICE,IRP_MN_REMOVE_DEVICE,IRP_MN_CANCEL_REMOVE_DEVICE,IRP_MN_STOP_DEVICE,IRP_MN_QUERY_STOP_DEVICE,IRP_MN_CANCEL_STOP_DEVICE,IRP_MN_QUERY_DEVICE_RELATIONS,IRP_MN_QUERY_INTERFACE,IRP_MN_QUERY_CAPABILITIES,IRP_MN_QUERY_RESOURCES,IRP_MN_QUERY_RESOURCE_REQUIREMENTS,IRP_MN_QUERY_DEVICE_TEXT,IRP_MN_FILTER_RESOURCE_REQUIREMENTS,IRP_MN_PNP_14,IRP_MN_READ_CONFIG,IRP_MN_WRITE_CONFIG,IRP_MN_EJECT,IRP_MN_SET_LOCK,IRP_MN_QUERY_ID,IRP_MN_QUERY_PNP_DEVICE_STATE,IRP_MN_QUERY_BUS_INFORMATION,IRP_MN_DEVICE_USAGE_NOTIFICATION,IRP_MN_SURPRISE_REMOVAL) -- 12
irp.GetParameterQDRType(), ItemEnum(_DEVICE_RELATION_TYPE) -- 13
irp.GetIrp(), ItemPtr -- 14
}
#typev  FxPkgPnp_cpp550 16     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p!, IRP_MJ_PNP, %12!s! IRP 0x%13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::Dispatch
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
irp.GetMinorFunction(), ItemListByte(IRP_MN_START_DEVICE,IRP_MN_QUERY_REMOVE_DEVICE,IRP_MN_REMOVE_DEVICE,IRP_MN_CANCEL_REMOVE_DEVICE,IRP_MN_STOP_DEVICE,IRP_MN_QUERY_STOP_DEVICE,IRP_MN_CANCEL_STOP_DEVICE,IRP_MN_QUERY_DEVICE_RELATIONS,IRP_MN_QUERY_INTERFACE,IRP_MN_QUERY_CAPABILITIES,IRP_MN_QUERY_RESOURCES,IRP_MN_QUERY_RESOURCE_REQUIREMENTS,IRP_MN_QUERY_DEVICE_TEXT,IRP_MN_FILTER_RESOURCE_REQUIREMENTS,IRP_MN_PNP_14,IRP_MN_READ_CONFIG,IRP_MN_WRITE_CONFIG,IRP_MN_EJECT,IRP_MN_SET_LOCK,IRP_MN_QUERY_ID,IRP_MN_QUERY_PNP_DEVICE_STATE,IRP_MN_QUERY_BUS_INFORMATION,IRP_MN_DEVICE_USAGE_NOTIFICATION,IRP_MN_SURPRISE_REMOVAL) -- 12
irp.GetIrp(), ItemPtr -- 13
}
#typev  FxPkgPnp_cpp876 26     "%0PDO %10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
pRelations->Objects[i], ItemPtr -- 10
}
#typev  FxPkgPnp_cpp868 25     "%0PDO %10!p! PDO %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
pRelations->Objects[i], ItemPtr -- 10
pRelations->Objects[i+1], ItemPtr -- 11
}
#typev  FxPkgPnp_cpp859 24     "%0PDO %10!p! PDO %11!p! PDO %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
pRelations->Objects[i], ItemPtr -- 10
pRelations->Objects[i+1], ItemPtr -- 11
pRelations->Objects[i+2], ItemPtr -- 12
}
#typev  FxPkgPnp_cpp849 23     "%0PDO %10!p! PDO %11!p! PDO %12!p! PDO %13!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
pRelations->Objects[i], ItemPtr -- 10
pRelations->Objects[i+1], ItemPtr -- 11
pRelations->Objects[i+2], ItemPtr -- 12
pRelations->Objects[i+3], ItemPtr -- 13
}
#typev  FxPkgPnp_cpp837 22     "%0WDFDEVICE %10!p! returning %11!d! devices in relations %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
pRelations->Count, ItemLong -- 11
pRelations, ItemPtr -- 12
}
#typev  FxPkgPnp_cpp828 21     "%0WDFDEVICE %10!p!, returning %11!s! from processing bus relations"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp794 20     "%0WDFDEVICE %10!p!, WDFCHILDLIST %11!p! returned %12!s! from processing bus relations"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::HandleQueryBusRelations
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
pChildList->GetHandle(), ItemPtr -- 11
listStatus, ItemNTSTATUS -- 12
}
#typev  FxPkgPnp_cpp2451 42     "%0already have a ww irp %10!p!, failing new ww irp %11!p! with %12!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::DispatchWaitWake
{
oldIrp, ItemPtr -- 10
Irp->GetIrp(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPnp_cpp2333 41     "%0wait wake irp %10!p! already canceled"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::DispatchWaitWake
{
Irp->GetIrp(), ItemPtr -- 10
}
#typev  FxPkgPnp_cpp2304 40     "%0Failing wait wake irp %10!p! with %11!s! because wait wake irp %12!p! already pended"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::DispatchWaitWake
{
Irp->GetIrp(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
m_SharedPower.m_WaitWakeIrp, ItemPtr -- 12
}
#typev  FxPkgPnp_cpp2264 39     "%0Received wait wake power irp %10!p! on device %11!p!, but the irp was not requested by the device (the power policy owner)"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::DispatchWaitWake
{
Irp->GetIrp(), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp2769 50     "%0Driver turned on S0Idle optimization. Device will remain powered off if idle when resuming from Sx"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
}
#typev  FxPkgPnp_cpp2762 49     "%0Driver turned off S0Idle optimization. Device will be powered up on resume from Sx even when it is idle"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
}
#typev  FxPkgPnp_cpp2725 48     "%0Failed to initialize USB selective suspend %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp2711 47     "%0DxState specified by driver %10!s! cannot be lighter than PowerDeviceD2 for USB selective suspend %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
dxState, ItemEnum(_DEVICE_POWER_STATE) -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp2695 46     "%0DxState specified by driver %10!s! cannot be lighter than lightest available device wake state %11!s!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
dxState, ItemEnum(_DEVICE_POWER_STATE) -- 10
PowerPolicyGetDeviceDeepestDeviceWakeState(), ItemEnum(_DEVICE_POWER_STATE) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPnp_cpp2680 45     "%0DeviceWake power state reported in device capabilities %10!s! indicates that device can not signal a wake event, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
dxState, ItemEnum(_DEVICE_POWER_STATE) -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp2631 44     "%0If registry value WdfDefaultIdleInWorkingState was present, it was not read because DDI WdfDeviceAssignS0IdleSettings was not called at PASSIVE_LEVEL"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetS0IdleSettings
{
}
#typev  FxPkgPnp_cpp3339 55     "%0succeeding system query power even though the device cannot wake the machine from S%10!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyHandleSystemQueryPower
{
QueryState - 1, ItemLong -- 10
}
#typev  FxPkgPnp_cpp3321 54     "%0failing system query power because the device cannot wake the machine from S%10!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyHandleSystemQueryPower
{
QueryState - 1, ItemLong -- 10
}
#typev  FxPkgPnp_cpp3954 62     "%0Exit %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp3696 61     "%0WDFDEVICE %10!p! could not allocate IRP to send usage notifications to related stacks, type %11!d!, inpath %12!d!, status %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
type, ItemLong -- 11
inPath, ItemLong -- 12
status, ItemNTSTATUS -- 13
}
#typev  FxPkgPnp_cpp3608 60     "%0Exit %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgPnp_cpp3597 59     "%0WDFDEVICE %10!p! could not allocate PIRP for parent !devobj %11!p! to send usage notification type %12!d!, inpath %13!d!, %14!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
topOfParentStack.GetObject(), ItemPtr -- 11
type, ItemLong -- 12
inPath, ItemLong -- 13
status, ItemNTSTATUS -- 14
}
#typev  FxPkgPnp_cpp3549 58     "%0Usage type %10!x! not supported, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
type, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp3517 57     "%0type %10!x!, in path %11!x!, can support paging %12!x!, dump file %13!x!, hiber file %14!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
type, ItemLong -- 10
inPath, ItemLong -- 11
IsUsageSupported(_SpecialTypeToUsage(WdfSpecialFilePaging)), ItemLong -- 12
IsUsageSupported(_SpecialTypeToUsage(WdfSpecialFileDump)), ItemLong -- 13
IsUsageSupported(_SpecialTypeToUsage(WdfSpecialFileHibernation)), ItemLong -- 14
}
#typev  FxPkgPnp_cpp3508 56     "%0Entering DeviceUsageNotification handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpDeviceUsageNotification
{
}
#typev  FxPkgPnp_cpp4172 65     "%0Could not allocate usage device list for WDFDEVICE %10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::AddUsageDevice
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp4240 66     "%0Could not allocate removal device list for WDFDEVICE %10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::AddRemovalDevice
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp4420 69     "%0Could not allocate enum info for WDFDEVICE %10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::AllocateEnumInfo
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp4441 70     "%0Adding FxChildList %10!p!, WDFCHILDLIST %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::AddChildList
{
List, ItemPtr -- 10
List->GetHandle(), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp4454 71     "%0Removing FxChildList %10!p!, WDFCHILDLIST %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::RemoveChildList
{
List, ItemPtr -- 10
List->GetHandle(), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp1967 37     "%0WDFDEVICE %10!p!, !devobj %11!p! waiting for pwr state machine to finish"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::CleanupStateMachines
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp1953 36     "%0WDFDEVICE %10!p!, !devobj %11!p! waiting for pwr pol state machine to finish"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::CleanupStateMachines
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp1932 35     "%0WDFDEVICE %10!p!, !devobj %11!p! waiting for pnp state machine to finish"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::CleanupStateMachines
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
}
#typev  FxPkgPnp_cpp2987 53     "%0DxState specified by driver %10!s! cannot be lighter than lightest available device wake state %11!s!, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetSxWakeSettings
{
dxState, ItemEnum(_DEVICE_POWER_STATE) -- 10
PowerPolicyGetDeviceDeepestDeviceWakeState(), ItemEnum(_DEVICE_POWER_STATE) -- 11
status, ItemNTSTATUS -- 12
}
#typev  FxPkgPnp_cpp2973 52     "%0DeviceWake power state reported in device capabilities %10!s! indicates that device can not signal a wake event, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetSxWakeSettings
{
dxState, ItemEnum(_DEVICE_POWER_STATE) -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnp_cpp2932 51     "%0If registry value WdfDefaultWakeFromSleepState was present, it was not read because DDI WdfDeviceAssignSxWakeSettings was not called at PASSIVE_LEVEL"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySetSxWakeSettings
{
}
#typev  FxPkgPnp_cpp1240 32     "%0WDFDEVICE %10!p!, !devobj %11!p! processing delayed deletion from pnp state machine"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::ProcessDelayedDeletion
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
31f474a8-23f3-c270-e156-7b455a6f635c     WdfCore // SRC=PnpStateMachine.cpp MJ= MN=
#typev  PnpStateMachine_cpp1167 14     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! entering PnP State %12!s! from %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNPPOWERSTATES FUNC=FxPkgPnp::PnpEnterNewState
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
newState, ItemEnum(_WDF_DEVICE_PNP_STATE) -- 12
currentState, ItemEnum(_WDF_DEVICE_PNP_STATE) -- 13
}
#typev  PnpStateMachine_cpp1548 16     "%0EvtDeviceQueryRemove failed, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryRemoveAskDriver
{
status, ItemNTSTATUS -- 10
}
#typev  PnpStateMachine_cpp1600 17     "%0StopIdle on WDFDEVICE %10!p! failed, %11!s!, failing query remove"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryRemoveEnsureDeviceAwake
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PnpStateMachine_cpp1679 19     "%0Failing QueryRemoveDevice due to open special file counts (paging %10!d!, hiber %11!d!, dump %12!d!)"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryRemoveStaticCheck
{
This->GetUsageCount(WdfSpecialFilePaging), ItemLong -- 10
This->GetUsageCount(WdfSpecialFileHibernation), ItemLong -- 11
This->GetUsageCount(WdfSpecialFileDump), ItemLong -- 12
}
#typev  PnpStateMachine_cpp1670 18     "%0Failing QueryRemoveDevice because the driver has indicated that it cannot be stopped, count %10!d!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryRemoveStaticCheck
{
This->m_DeviceStopCount, ItemLong -- 10
}
#typev  PnpStateMachine_cpp1782 20     "%0EvtDeviceQueryStop failed, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryStopAskDriver
{
status, ItemNTSTATUS -- 10
}
#typev  PnpStateMachine_cpp1836 21     "%0StopIdle on WDFDEVICE %10!p! failed, %11!s!, failing query stop"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryStopEnsureDeviceAwake
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PnpStateMachine_cpp1913 23     "%0Failing QueryStopDevice due to open special file counts (paging %10!d!, hiber %11!d!, dump %12!d!)"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryStopStaticCheck
{
This->GetUsageCount(WdfSpecialFilePaging), ItemLong -- 10
This->GetUsageCount(WdfSpecialFileHibernation), ItemLong -- 11
This->GetUsageCount(WdfSpecialFileDump), ItemLong -- 12
}
#typev  PnpStateMachine_cpp1904 22     "%0Failing QueryStopDevice because the driver has indicated that it cannot be stopped, count %10!d!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventQueryStopStaticCheck
{
This->m_DeviceStopCount, ItemLong -- 10
}
#typev  PnpStateMachine_cpp1087 13     "%0WDFDEVICE 0x%10!p! !devobj %11!p! current state %12!s!, policy event %13!s! is not a known dropped event, known dropped events are %14!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpProcessEventInner
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePnpState(m_Device), ItemEnum(_WDF_DEVICE_PNP_STATE) -- 12
event, ItemEnum(FxPnpEvent) -- 13
entry->StateInfo.Bits.KnownDroppedEvents, ItemEnum(FxPnpEvent) -- 14
}
#typev  PnpStateMachine_cpp1075 12     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pnp state %12!s! dropping event %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpProcessEventInner
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePnpState(m_Device), ItemEnum(_WDF_DEVICE_PNP_STATE) -- 12
event, ItemEnum(FxPnpEvent) -- 13
}
#typev  PnpStateMachine_cpp2315 24     "%0EvtDeviceReleaseHardware %10!p! failed, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventRemovingDisableInterfaces
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PnpStateMachine_cpp2527 25     "%0EvtDeviceReleaseHardware failed - %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventStopped
{
status, ItemNTSTATUS -- 10
}
#typev  PnpStateMachine_cpp3108 26     "%0EvtDeviceReleaseHardware failed with %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventRestartReleaseHardware
{
status, ItemNTSTATUS -- 10
}
#typev  PnpStateMachine_cpp3468 27     "%0EvtDevicePrepareHardware failed %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpPrepareHardware
{
status, ItemNTSTATUS -- 10
}
#typev  PnpStateMachine_cpp858 11     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pnp state %12!s! dropping event %13!s! because of a closed queue"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpProcessEvent
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePnpState(m_Device), ItemEnum(_WDF_DEVICE_PNP_STATE) -- 12
Event, ItemEnum(FxPnpEvent) -- 13
}
#typev  PnpStateMachine_cpp839 10     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pnp state %12!s! dropping event %13!s! because of a full queue"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpProcessEvent
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePnpState(m_Device), ItemEnum(_WDF_DEVICE_PNP_STATE) -- 12
Event, ItemEnum(FxPnpEvent) -- 13
}
#typev  PnpStateMachine_cpp1427 15     "%0could not query caps for stack, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpEventHardwareAvailable
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a06c4939-ec03-9e2b-f095-211ff9a6d5e5     WdfCore // SRC=PowerIdleStateMachine.cpp MJ= MN=
#typev  PowerIdleStateMachine_cpp704 10     "%0WDFDEVICE %10!p! idle (in D0) not sending io present event (already sent)"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPowerIdleMachine::TimedOutIoIncrement
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
}
#typev  PowerIdleStateMachine_cpp849 11     "%0WDFDEVICE %10!p! idle (in Dx) not sending io present event (already sent)"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPowerIdleMachine::InDxIoIncrement
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
}
#typev  PowerIdleStateMachine_cpp1883 16     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! entering power idle state %12!s! from %13!s!"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNPPOWERSTATES FUNC=FxPowerIdleMachine::ProcessEventLocked
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(pPkgPnp->GetDevice()), ItemPtr -- 11
newState, ItemEnum(FxPowerIdleStates) -- 12
m_CurrentIdleState, ItemEnum(FxPowerIdleStates) -- 13
}
#typev  PowerIdleStateMachine_cpp1869 15     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! power idle state %12!s! dropping event %13!s!"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPowerIdleMachine::ProcessEventLocked
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(pPkgPnp->GetDevice()), ItemPtr -- 11
m_CurrentIdleState, ItemEnum(FxPowerIdleStates) -- 12
Event, ItemEnum(FxPowerIdleEvents) -- 13
}
#typev  PowerIdleStateMachine_cpp1538 14     "%0WDFDEVICE %10!p! waiting for D0 in thread %11!p! failed because of invalid state , %12!s!"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPowerIdleMachine::PowerReferenceWorker
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
Mx::MxGetCurrentThread(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  PowerIdleStateMachine_cpp1528 13     "%0WDFDEVICE %10!p! waiting for D0 in thread %11!p! failed because of power failure, %12!s!"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPowerIdleMachine::PowerReferenceWorker
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
Mx::MxGetCurrentThread(), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  PowerIdleStateMachine_cpp1497 12     "%0WDFDEVICE %10!p! in thread %11!p! waiting synchronously for Dx to D0 transition"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPowerIdleMachine::PowerReferenceWorker
{
FxDeviceToMx::GetHandle(pPkgPnp->GetDevice()), ItemPtr -- 10
Mx::MxGetCurrentThread(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
1c6af04a-8c20-a063-1976-7299d70a2744     WdfCore // SRC=PowerPolicyStateMachine.cpp MJ= MN=
#typev  PowerPolicyStateMachine_cpp2539 14     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! entering power policy state %12!s! from %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNPPOWERSTATES FUNC=FxPkgPnp::PowerPolicyEnterNewState
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
newState, ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 12
currentState, ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 13
}
#typev  PowerPolicyStateMachine_cpp3170 17     "%0WDFDEVICE %10!p! Failed to Enable Wake at Bus, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingWakeWakeArrived
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp3155 16     "%0WDFDEVICE %10!p! Failed to arm for wake from Sx, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingWakeWakeArrived
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp3374 20     "%0WDFDEVICE %10!p! Failed to Enable Wake at Bus, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingWakeWakeArrivedNP
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp3359 19     "%0WDFDEVICE %10!p! Failed to arm for wake from Sx, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingWakeWakeArrivedNP
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp4130 25     "%0WDFDEVICE %10!p! Failed to Enable Wake at Bus, %11!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolTimerExpiredWakeCapableWakeArrived
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp6051 31     "%0Completing system power irp %10!p! (S%11!d!), %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyCompleteSystemPowerIrp
{
m_PendingSystemPowerIrp, ItemPtr -- 10
irp.GetParameterPowerStateSystemState()-1, ItemLong -- 11
status, ItemNTSTATUS -- 12
}
#typev  PowerPolicyStateMachine_cpp6121 34     "%0No WaitWake irp to cancel"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyCancelWaitWake
{
}
#typev  PowerPolicyStateMachine_cpp6102 33     "%0Cancel of irp %10!p! returned %11!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyCancelWaitWake
{
wwIrp, ItemPtr -- 10
result, ItemLong -- 11
}
#typev  PowerPolicyStateMachine_cpp6097 32     "%0Successfully got WaitWake irp %10!p! for cancelling"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyCancelWaitWake
{
wwIrp, ItemPtr -- 10
}
#typev  PowerPolicyStateMachine_cpp6173 36     "%0Completion of WaitWake irp %10!p!"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::_PowerPolicyWaitWakeCompletionRoutine
{
originalIrp.GetIrp(), ItemPtr -- 10
}
#typev  PowerPolicyStateMachine_cpp6188 37     "%0Not completing WaitWake irp %10!p! in completion routine"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::_PowerPolicyWaitWakeCompletionRoutine
{
originalIrp.GetIrp(), ItemPtr -- 10
}
#typev  PowerPolicyStateMachine_cpp6150 35     "%0WDFDEVICE %10!p! !devobj %11!p! Completion of WaitWake irp %12!p!, %13!s!"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::_PowerPolicyWaitWakeCompletionRoutine
{
FxDeviceToMx::GetHandle(pThis->m_Device), ItemPtr -- 10
DeviceObject, ItemPtr -- 11
originalIrp.GetIrp(), ItemPtr -- 12
originalIrp.GetStatus(), ItemNTSTATUS -- 13
}
#typev  PowerPolicyStateMachine_cpp2372 13     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current state %12!s!, policy event %13!s! is not a known dropped event, known dropped events are %14!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyProcessEventInner
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerPolicyState(m_Device), ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 12
event, ItemEnum(FxPowerPolicyEvent) -- 13
entry->StateInfo.Bits.KnownDroppedEvents, ItemEnum(FxPowerPolicyEvent) -- 14
}
#typev  PowerPolicyStateMachine_cpp2361 12     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pwr pol state %12!s! dropping event %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyProcessEventInner
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerPolicyState(m_Device), ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 12
event, ItemEnum(FxPowerPolicyEvent) -- 13
}
#typev  PowerPolicyStateMachine_cpp3191 18     "%0reverting arm for wake from Sx due to failure to allocate wait wake request or wait wake request completed immeidately.  Device will *NOT* be armed for wake from Sx"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingWakeRevertArmWake
{
}
#typev  PowerPolicyStateMachine_cpp3395 21     "%0reverting arm for wake from Sx due to failure to allocate wait wake request or wait wake request completed immeidately.  Device will *NOT* be armed for wake from Sx"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingWakeRevertArmWakeNP
{
}
#typev  PowerPolicyStateMachine_cpp3634 22     "%0WDFDEVICE %10!p! powering down before child devices have powered down. This usually indicates a faulty child device that completed the Sx irp before sending the Dx irp"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleeping
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
}
#typev  PowerPolicyStateMachine_cpp2130 11     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pwr pol state %12!s! dropping event %13!s! because of a closed queue"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyProcessEvent
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerPolicyState(m_Device), ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 12
Event, ItemEnum(FxPowerPolicyEvent) -- 13
}
#typev  PowerPolicyStateMachine_cpp2105 10     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pwr pol state %12!s! dropping event %13!s! because the Event is already enqueued."      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyProcessEvent
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerPolicyState(m_Device), ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 12
Event, ItemEnum(FxPowerPolicyEvent) -- 13
}
#typev  PowerPolicyStateMachine_cpp5858 26     "%0PowerDeviceD0 requested by WDFDEVICE 0x%10!p! !devobj 0x%11!p!, is being completed by upper driver without sending it to driver that requested it"      //   GLOBALS=pThis->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::_PowerPolDevicePowerUpComplete
{
FxDeviceToMx::GetHandle(pThis->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(pThis->GetDevice()), ItemPtr -- 11
}
#typev  PowerPolicyStateMachine_cpp5992 28     "%0Requesting D%10!d! irp, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySendDevicePowerRequest
{
DeviceState-1, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp5983 27     "%0Could not request D%10!d! irp for device %11!p! (WDFDEVICE %12!p!), %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySendDevicePowerRequest
{
DeviceState-1, ItemLong -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerPolicyStateMachine_cpp6026 30     "%0Requesting wait wake irp for S%10!d! failed, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySendWaitWakeRequest
{
SystemState-1, ItemLong -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerPolicyStateMachine_cpp6016 29     "%0Requesting wait wake irp for S%10!d!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicySendWaitWakeRequest
{
SystemState-1, ItemLong -- 10
}
#typev  PowerPolicyStateMachine_cpp6227 38     "%0WDFDEVICE %10!p!, !devobj %11!p! Completion of UsbSS irp %12!p!, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::_PowerPolicyUsbSelectiveSuspendCompletionRoutine
{
This->m_Device, ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
irp.GetIrp(), ItemPtr -- 12
irp.GetStatus(), ItemNTSTATUS -- 13
}
#typev  PowerPolicyStateMachine_cpp6292 40     "%0WDFDEVICE %10!p! !devobj 0x%11!p! not idling out because there are %12!d! children who are powered up"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyCanIdlePowerDown
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
m_PowerPolicyMachine.m_Owner->m_ChildrenPoweredOnCount, ItemLong -- 12
}
#typev  PowerPolicyStateMachine_cpp3013 15     "%0Failed to allocate D0 request to disarm from wake from S0 to allow arm for wake from Sx, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSystemSleepNeedWake
{
status, ItemNTSTATUS -- 10
}
#typev  PowerPolicyStateMachine_cpp3829 23     "%0Attempting to send wait wake request for EvtDeviceArmWakeFromSx() failed, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolSleepingSendWake
{
status, ItemNTSTATUS -- 10
}
#typev  PowerPolicyStateMachine_cpp4054 24     "%0Could not allocate wake request for wake from S0, revert arming, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolTimerExpiredWakeCapableSendWake
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
0f1627e4-9104-3b5b-0ee6-1d7b7b807395     WdfCore // SRC=NotPowerPolicyOwnerStateMachine.cpp MJ= MN=
#typev  NotPowerPolicyOwnerStateMachine_cpp261 10     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! entering not power policy owner state %12!s! from %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNPPOWERSTATES FUNC=FxPkgPnp::NotPowerPolicyOwnerEnterNewState
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
newState, ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 12
currentState, ItemEnum(_WDF_DEVICE_POWER_POLICY_STATE) -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
9fad61e3-68ff-f42e-15fe-7a3fb252225e     WdfCore // SRC=PowerStateMachine.cpp MJ= MN=
#typev  PowerStateMachine_cpp1453 15     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! entering Power State %12!s! from %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNPPOWERSTATES FUNC=FxPkgPnp::PowerEnterNewState
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
newState, ItemEnum(_WDF_DEVICE_POWER_STATE) -- 12
currentState, ItemEnum(_WDF_DEVICE_POWER_STATE) -- 13
}
#typev  PowerStateMachine_cpp2041 16     "%0EvtDeviceD0Entry WDFDEVICE 0x%10!p! !devobj 0x%11!p!,  old state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerD0Starting
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
This->m_DevicePowerState, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2094 17     "%0EvtDeviceD0EntryPostInterruptsEnabed WDFDEVICE 0x%10!p! !devobj 0x%11!p!, old state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerD0StartingConnectInterrupt
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
This->m_DevicePowerState, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2407 21     "%0PowerReference on parent WDFDEVICE %10!p! for child WDFDEVICE %11!p! failed, %12!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerStartingChild
{
FxDeviceToMx::GetHandle(                  FxDeviceToMx::GetParentDevicePnpPkg(This->m_Device)->m_Device), ItemPtr -- 10
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  PowerStateMachine_cpp2579 22     "%0Force disconnecting interups on !devobj 0x%10!p!, WDFDEVICE %11!p!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoDxNPFailed
{
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 11
}
#typev  PowerStateMachine_cpp2619 23     "%0EvtDeviceSelfManagedIoStop failed %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoDx
{
status, ItemNTSTATUS -- 10
}
#typev  PowerStateMachine_cpp3314 30     "%0EvtDeviceD0Entry WDFDEVICE 0x%10!p! !devobj 0x%11!p!, old state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWaking
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
This->m_DevicePowerState, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3359 31     "%0EvtDeviceD0Entry WDFDEVICE 0x%10!p! !devobj 0x%11!p!, old state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWakingNP
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
This->m_DevicePowerState, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3408 32     "%0EvtDeviceD0EntryPostInterruptsEnabed WDFDEVICE 0x%10!p! !devobj 0x%11!p!, old state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWakingConnectInterrupt
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
This->m_DevicePowerState, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3457 33     "%0EvtDeviceD0EntryPostInterruptsEnabed WDFDEVICE 0x%10!p! !devobj 0x%11!p!, old state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWakingConnectInterruptNP
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
This->m_DevicePowerState, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3647 35     "%0EvtDeviceD0ExitPreInterruptsDisabled WDFDEVICE 0x%10!p! !devobj 0x%11!p! new state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWakingDmaEnableFailed
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
WdfPowerDeviceD3Final, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3692 36     "%0EvtDeviceD0ExitPreInterruptsDisabled WDFDEVICE 0x%10!p! !devobj 0x%11!p! new state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWakingDmaEnableFailedNP
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
WdfPowerDeviceD3Final, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3871 37     "%0EvtDeviceD0ExitPreInterruptsDisabled WDFDEVICE 0x%10!p! !devobj 0x%11!p! new state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerInitialDmaEnableFailed
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
WdfPowerDeviceD3Final, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp4497 38     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! WW !irp 0x%12!p! is a source of wake"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerMakeWakeRequestNonCancelable
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
m_SharedPower.m_WaitWakeIrp, ItemPtr -- 12
}
#typev  PowerStateMachine_cpp4839 40     "%0EvtDeviceD0Exit WDFDEVICE 0x%10!p! !devobj 0x%11!p! failed, %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerConnectInterruptFailed
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
#typev  PowerStateMachine_cpp4826 39     "%0Interrupt(s) disconnect on WDFDEVICE %10!p! failed, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerConnectInterruptFailed
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PowerStateMachine_cpp1375 14     "%0WDFDEVICE %10!p! !devobj 0x%11!p! current state %12!s! event %13!s! is not a known dropped event, known dropped events are %14!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerProcessEventInner
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerState(m_Device), ItemEnum(_WDF_DEVICE_POWER_STATE) -- 12
event, ItemEnum(FxPowerEvent) -- 13
entry->StateInfo.Bits.KnownDroppedEvents, ItemEnum(FxPowerEvent) -- 14
}
#typev  PowerStateMachine_cpp1360 13     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current power state %12!s! dropping event %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerProcessEventInner
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerState(m_Device), ItemEnum(_WDF_DEVICE_POWER_STATE) -- 12
event, ItemEnum(FxPowerEvent) -- 13
}
#typev  PowerStateMachine_cpp2325 20     "%0EvtDeviceD0Exit WDFDEVICE 0x%10!p! !devobj 0x%11!p!, new state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoD3Stopped
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
WdfPowerDeviceD3Final, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2296 19     "%0EvtDeviceD0ExitPreInterruptsDisabled WDFDEVICE 0x%10!p! !devobj 0x%11!p!, new state %12!s! failed, %13!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoD3Stopped
{
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 11
WdfPowerDeviceD3Final, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2269 18     "%0EvtDeviceSelfManagedIoStop failed %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoD3Stopped
{
status, ItemNTSTATUS -- 10
}
#typev  PowerStateMachine_cpp2734 25     "%0EvtDeviceD0Exit WDFEVICE 0x%10!p! !devobj 0x%11!p!, new state %12!s! failed, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoDxIoStopped
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
state, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2707 24     "%0EvtDeviceD0ExitPreInterruptsDisabled WDFDEVICE 0x%10!p! !devobj 0x%11!p!, new state %12!s! failed, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoDxIoStopped
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
state, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2873 27     "%0EvtDeviceD0Exit WDFDEVICE 0x%10!p! !devobj 0x%11!p!, new state %12!s! failed, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoDxIoStoppedNP
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
state, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp2845 26     "%0EvtDeviceD0ExitPreInterruptsDisabled WDFDEVICE 0x%10!p! !devobj 0x%11!p!, new state %12!s! failed, %13!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerGotoDxIoStoppedNP
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
state, ItemEnum(_WDF_POWER_DEVICE_STATE) -- 12
status, ItemNTSTATUS -- 13
}
#typev  PowerStateMachine_cpp3097 28     "%0EvtDeviceSelfManagedIoRestart failed - %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerStartSelfManagedIo
{
status, ItemNTSTATUS -- 10
}
#typev  PowerStateMachine_cpp3157 29     "%0EvtDeviceSelfManagedIoRestart failed - %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerStartSelfManagedIoNP
{
status, ItemNTSTATUS -- 10
}
#typev  PowerStateMachine_cpp3517 34     "%0Force disconnecting interupts on !devobj %10!p!, WDFDEVICE %11!p!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerWakingConnectInterruptFailedNP
{
FxDeviceToMx::GetDeviceObject(This->m_Device), ItemPtr -- 10
FxDeviceToMx::GetHandle(This->m_Device), ItemPtr -- 11
}
#typev  PowerStateMachine_cpp1140 12     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pwr pol state %12!s! dropping event %13!s! because of a closed queue"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerProcessEvent
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerState(m_Device), ItemEnum(_WDF_DEVICE_POWER_STATE) -- 12
Event, ItemEnum(FxPowerEvent) -- 13
}
#typev  PowerStateMachine_cpp1115 11     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! current pwr pol state %12!s! dropping event %13!s! because the Event is already enqueued."      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerProcessEvent
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
FxDeviceToMx::GetDevicePowerState(m_Device), ItemEnum(_WDF_DEVICE_POWER_STATE) -- 12
Event, ItemEnum(FxPowerEvent) -- 13
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
950bd909-4e9f-8c00-5d83-948120fba76d     WdfCore // SRC=SelfManagedIoStateMachine.cpp MJ= MN=
#typev  SelfManagedIoStateMachine_cpp299 12     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! entering self managed io state %12!s! from %13!s!"      //   GLOBALS=m_PkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxSelfManagedIoMachine::ProcessEvent
{
FxDeviceToMx::GetHandle(m_PkgPnp->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_PkgPnp->GetDevice()), ItemPtr -- 11
newState, ItemEnum(FxSelfManagedIoStates) -- 12
m_CurrentState, ItemEnum(FxSelfManagedIoStates) -- 13
}
#typev  SelfManagedIoStateMachine_cpp185 10     "%0Self managed I/O state machine allocation failed for WDFDEVICE 0x%10!p!"      //   GLOBALS=PkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxSelfManagedIoMachine::_CreateAndInit
{
FxDeviceToMx::GetHandle(PkgPnp->GetDevice()), ItemPtr -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
fb68f822-d5e9-8807-4631-1362e6e35862     WdfCore // SRC=EventQueue.cpp MJ= MN=
#typev  EventQueue_cpp157 12     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! delaying deletion to outside state machine"      //   GLOBALS=m_PkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxEventQueue::SetDelayedDeletion
{
FxDeviceToMx::GetHandle(m_PkgPnp->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_PkgPnp->GetDevice()), ItemPtr -- 11
}
#typev  EventQueue_cpp222 13     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! not queueing work item to process event queue"      //   GLOBALS=m_PkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxEventQueue::QueueToThreadWorker
{
FxDeviceToMx::GetHandle(m_PkgPnp->GetDevice()), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_PkgPnp->GetDevice()), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
1544b078-9aeb-60c4-a2eb-c917200e913f     WdfCore // SRC=InterruptObject.cpp MJ= MN=
#typev  InterruptObject_cpp123 11     "%0Destroy Interrupt destroyed without calling WdfObjectDelete, or by Framework processing DeviceRemove. Possible reference count problem?"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxInterrupt::~FxInterrupt
{
}
#typev  InterruptObject_cpp115 10     "%0Destroy Interrupt destroyed without calling WdfObjectDelete, or by Framework processing DeviceRemove. Possible reference count problem?"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxInterrupt::~FxInterrupt
{
}
#typev  InterruptObject_cpp1015 16     "%0Is MSI? %10!d!, MSI-ID %11!d!, AffinityPolicy %12!s!, Priority %13!s!, Group %14!d!, Affinity 0x%15!I64x!, Irql 0x%16!x!, Vector 0x%17!x!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxInterrupt::AssignResources
{
m_InterruptInfo.MessageSignaled, ItemLong -- 10
m_InterruptInfo.MessageNumber, ItemLong -- 11
m_Policy, ItemEnum(_WDF_INTERRUPT_POLICY) -- 12
m_Priority, ItemEnum(_WDF_INTERRUPT_PRIORITY) -- 13
m_InterruptInfo.Group, ItemLong -- 14
(ULONGLONG)m_InterruptInfo.TargetProcessorSet, ItemLongLongX -- 15
m_InterruptInfo.Irql, ItemLong -- 16
m_InterruptInfo.Vector, ItemLong -- 17
}
#typev  InterruptObject_cpp716 14     "%0EvtInterruptEnable WDFDEVICE %10!p!, WDFINTERRUPT %11!p!, PKINTERRUPT %12!p! returned %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxInterrupt::Connect
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
m_Interrupt, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  InterruptObject_cpp672 13     "%0IoConnectInterrupt(Ex) Failed, SpinLock 0x%10!p!, Vector 0x%11!x!, IRQL 0x%12!x!, Synchronize IRQL 0x%13!x!, Mode 0x%14!x!, ShareVector %15!s!, ProcessorGroup %16!d!, ProcessorEnableMask 0x%17!I64x!, FloatingSave %18!s!, %19!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxInterrupt::Connect
{
m_SpinLock, ItemPtr -- 10
m_InterruptInfo.Vector, ItemLong -- 11
m_InterruptInfo.Irql, ItemLong -- 12
m_SynchronizeIrql, ItemLong -- 13
m_InterruptInfo.Mode, ItemLong -- 14
m_InterruptInfo.ShareDisposition ==                       CmResourceShareShared ? 'True' : 'False', ItemString -- 15
m_InterruptInfo.Group, ItemLong -- 16
(ULONGLONG)m_InterruptInfo.TargetProcessorSet, ItemLongLongX -- 17
m_FloatingSave ? 'True' : 'False', ItemString -- 18
status, ItemNTSTATUS -- 19
}
#typev  InterruptObject_cpp815 15     "%0EvtInterruptDisable WDFDEVICE %10!p!, WDFINTERRUPT %11!p!, PKINTERRUPT %12!p! returned %13!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxInterrupt::Disconnect
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
m_Interrupt, ItemPtr -- 12
status, ItemNTSTATUS -- 13
}
#typev  InterruptObject_cpp1120 17     "%0Force disconnect called on WDFDEVICE %10!p!, WDFINTERRUPT %11!p!, PKINTERRUPT %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxInterrupt::ForceDisconnect
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
m_Interrupt, ItemPtr -- 12
}
#typev  InterruptObject_cpp1154 18     "%0Force connect called on WDFDEVICE %10!p!, WDFINTERRUPT %11!p!, PKINTERRUPT %12!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxInterrupt::ForceReconnect
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
GetHandle(), ItemPtr -- 11
m_Interrupt, ItemPtr -- 12
}
#typev  InterruptObject_cpp202 12     "%0Could not assign parent %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxInterrupt::Initialize
{
status, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a6696db8-be5f-c18c-296f-4c06fab0eac1     WdfCore // SRC=FxInterruptApi.cpp MJ= MN=
#typev  FxInterruptApi_cpp485 14     "%0WDF_INTERRUPT_INFO %10!p! Size %11!d! invalid, expected %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptGetInfo
{
Interrupt, ItemPtr -- 10
Info->Size, ItemLong -- 11
sizeof(WDF_INTERRUPT_INFO), ItemLong -- 12
}
#typev  FxInterruptApi_cpp579 15     "%0Policy %10!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptSetPolicy
{
Policy, ItemLong -- 10
}
#typev  FxInterruptApi_cpp587 16     "%0Priority %10!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptSetPolicy
{
Priority, ItemLong -- 10
}
#typev  FxInterruptApi_cpp661 18     "%0Policy %10!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptSetExtendedPolicy
{
policy, ItemLong -- 10
}
#typev  FxInterruptApi_cpp669 19     "%0Priority %10!d! is out of range"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptSetExtendedPolicy
{
priority, ItemLong -- 10
}
#typev  FxInterruptApi_cpp678 20     "%0TargetProcessorSet's reserved fields are not zero"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptSetExtendedPolicy
{
}
#typev  FxInterruptApi_cpp645 17     "%0WDF_INTERRUPT_EXTENDED_POLICY %10!p! Size %11!d! invalid, expected %12!d!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptSetExtendedPolicy
{
PolicyAndGroup, ItemPtr -- 10
PolicyAndGroup->Size, ItemLong -- 11
sizeof(WDF_INTERRUPT_EXTENDED_POLICY), ItemLong -- 12
}
#typev  FxInterruptApi_cpp133 13     "%0not enough memory to allocate WDFINTERRUPT for WDFDEVICE %10!p!, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptCreate
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxInterruptApi_cpp119 12     "%0WDFINTERRUPTs can only be created during EvtDriverDeviceAdd or when the WDFDEVICE %10!p! is initially created, %11!s!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptCreate
{
Device, ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxInterruptApi_cpp102 11     "%0NULL EvtInterruptIsr in WDF_INTERRUPT_CONFIG structure 0x%10!p! passed"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptCreate
{
Configuration, ItemPtr -- 10
}
#typev  FxInterruptApi_cpp95 10     "%0WDF_INTERRUPT_CONFIG size 0x%10!x! incorrect, expected 0x%11!x!"      //   GLOBALS=pFxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=imp_WdfInterruptCreate
{
Configuration->Size, ItemLong -- 10
sizeof(WDF_INTERRUPT_CONFIG), ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
700c2c8f-7929-cc3b-0a3f-104b02a570ab     WdfCore // SRC=fxverifier.h MJ= MN=
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfInterruptEnable
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
#typev  fxverifier_h96 10     "%0Called at wrong IRQL; at level %10!d!, should be at level %11!d!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=imp_WdfInterruptDisable
{
currentIrql, ItemLong -- 10
Irql, ItemLong -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
32059ac4-01cd-cd85-141e-26b1f73cc04f     WdfCore // SRC=FxPkgFdoKm.cpp MJ= MN=
#typev  FxPkgFdoKm_cpp346 12     "%0Lower stack returned error for query pnp device state, %10!s!"      //   GLOBALS=This->GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgFdo::_PnpQueryPnpDeviceState
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgFdoKm_cpp218 11     "%0Exiting FilterResourceRequirements handler, %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::PnpFilterResourceRequirements
{
status, ItemNTSTATUS -- 10
}
#typev  FxPkgFdoKm_cpp72 10     "%0Entering FilterResourceRequirements handler"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgFdo::PnpFilterResourceRequirements
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
da4a0a10-d2dd-364f-e436-3dc54956d3ab     WdfCore // SRC=FxResource.hpp MJ= MN=
#typev  FxResource_hpp346 12     "%0FxIoResReqList initialize failed, %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxIoResReqList::Initialize
{
status, ItemNTSTATUS -- 10
}
#typev  FxResource_hpp383 13     "%0Failed to allocate FxIoResReqList, returning %10!s!"      //   GLOBALS=FxDriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGDEVICE FUNC=FxIoResReqList::_CreateAndInit
{
ntStatus, ItemNTSTATUS -- 10
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
7961de1b-940a-2685-c8ff-e0db70b8241c     WdfCore // SRC=FxPkgPdoKM.cpp MJ= MN=
#typev  FxPkgPdoKM_cpp195 10     "%0could not register device interface on PDO WDFDEVICE %10!p!, !devobj %11!p!, failing IRP_MN_QUERY_RESOURCE_REQUIREMENTS %12!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPdo::PnpQueryResourceRequirements
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
status, ItemNTSTATUS -- 12
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
fc3a1b54-afe6-f432-2149-b02e138eace0     WdfCore // SRC=FxPkgPnpKM.cpp MJ= MN=
#typev  FxPkgPnpKM_cpp417 13     "%0Not enough interrupt objects created for LBI by WDFDEVICE 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::FilterResourceRequirements
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
}
#typev  FxPkgPnpKM_cpp355 12     "%0Not enough interrupt objects created for MSI by WDFDEVICE 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::FilterResourceRequirements
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
}
#typev  FxPkgPnpKM_cpp153 10     "%0WDFINTERRUPT %10!p! failed to connect, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::NotifyResourceObjectsD0
{
pInterrupt->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnpKM_cpp210 11     "%0WDFINTERRUPT %10!p! failed to disconnect, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::NotifyResourceObjectsDx
{
pInterrupt->GetHandle(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  FxPkgPnpKM_cpp492 14     "%0Adding DmaEnabler %10!p!, WDFDMAENABLER %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::AddDmaEnabler
{
Enabler, ItemPtr -- 10
Enabler->GetObjectHandle(), ItemPtr -- 11
}
#typev  FxPkgPnpKM_cpp504 15     "%0Removing DmaEnabler %10!p!, WDFDMAENABLER %11!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::RemoveDmaEnabler
{
Enabler, ItemPtr -- 10
Enabler->GetObjectHandle(), ItemPtr -- 11
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
890d102c-15cc-de60-a222-0a610bea82c1     WdfCore // SRC=PnpStateMachineKM.cpp MJ= MN=
#typev  PnpStateMachineKM_cpp363 14     "%0Exiting PnpMatchResources %10!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpMatchResources
{
status, ItemNTSTATUS -- 10
}
#typev  PnpStateMachineKM_cpp277 13     "%0Not enough interrupt objects created by WDFDEVICE 0x%10!p!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpMatchResources
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
}
#typev  PnpStateMachineKM_cpp234 12     "%0Could not allocate translated resource list for WDFDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpMatchResources
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PnpStateMachineKM_cpp224 11     "%0Could not allocate raw resource list for WDFDEVICE 0x%10!p!, %11!s!"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpMatchResources
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
#typev  PnpStateMachineKM_cpp203 10     "%0Entering PnpMatchResources"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxPkgPnp::PnpMatchResources
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
b21cc415-2850-26f1-53fb-c3ab8eff5a46     WdfCore // SRC=PowerPolicyStateMachineKM.cpp MJ= MN=
#typev  PowerPolicyStateMachineKM_cpp59 10     "%0WDFDEVICE 0x%10!p! !devobj 0x%11!p! WW !irp 0x%12!p! is a source of wake"      //   GLOBALS=GetDriverGlobals() LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACINGPNP FUNC=FxPkgPnp::PowerPolicyUpdateSystemWakeSource
{
FxDeviceToMx::GetHandle(m_Device), ItemPtr -- 10
FxDeviceToMx::GetDeviceObject(m_Device), ItemPtr -- 11
Irp->GetIrp(), ItemPtr -- 12
}
#typev  PowerPolicyStateMachineKM_cpp232 12     "%0Leaving USB Selective Suspend Idle callback"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxUsbIdleInfo::_UsbIdleCallback
{
}
#typev  PowerPolicyStateMachineKM_cpp218 11     "%0Entering USB Selective Suspend Idle callback"      //   GLOBALS=pPkgPnp->GetDriverGlobals() LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACINGPNP FUNC=FxUsbIdleInfo::_UsbIdleCallback
{
}
// PDB:  e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
// PDB:  Last Updated :2010-2-9:3:27:24:741 (UTC) [tracepdb]
a3bdb932-0e0e-6275-e2c4-7e1eaadefad1     WdfCore // SRC=supportKM.cpp MJ= MN=
#typev  supportKM_cpp98 10     "%0Failed to get DEVICE_CAPABILITIES from !devobj %10!p!, %11!s!"      //   GLOBALS=DriverGlobals LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACINGPNP FUNC=GetStackCapabilities
{
DeviceInStack->GetObject(), ItemPtr -- 10
status, ItemNTSTATUS -- 11
}
faa097ce-614f-ba20-5d9f-99f5d1999db5 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_DMA_DIRECTION
{
WdfDmaDirectionReadFromDevice,0x0
WdfDmaDirectionWriteToDevice,0x1
}
#enumv _WDF_REQUEST_TYPE
{
WdfRequestTypeCreate,0x0
WdfRequestTypeCreateNamedPipe,0x1
WdfRequestTypeClose,0x2
WdfRequestTypeRead,0x3
WdfRequestTypeWrite,0x4
WdfRequestTypeQueryInformation,0x5
WdfRequestTypeSetInformation,0x6
WdfRequestTypeQueryEA,0x7
WdfRequestTypeSetEA,0x8
WdfRequestTypeFlushBuffers,0x9
WdfRequestTypeQueryVolumeInformation,0xA
WdfRequestTypeSetVolumeInformation,0xB
WdfRequestTypeDirectoryControl,0xC
WdfRequestTypeFileSystemControl,0xD
WdfRequestTypeDeviceControl,0xE
WdfRequestTypeDeviceControlInternal,0xF
WdfRequestTypeShutdown,0x10
WdfRequestTypeLockControl,0x11
WdfRequestTypeCleanup,0x12
WdfRequestTypeCreateMailSlot,0x13
WdfRequestTypeQuerySecurity,0x14
WdfRequestTypeSetSecurity,0x15
WdfRequestTypePower,0x16
WdfRequestTypeSystemControl,0x17
WdfRequestTypeDeviceChange,0x18
WdfRequestTypeQueryQuota,0x19
WdfRequestTypeSetQuota,0x1A
WdfRequestTypePnp,0x1B
WdfRequestTypeOther,0x1C
WdfRequestTypeUsb,0x40
WdfRequestTypeNoFormat,0xFF
WdfRequestTypeMax,0x100
}
5260cee9-3bc5-0a10-29e6-305743a13b1a e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_IO_TARGET_STATE
{
WdfIoTargetStateUndefined,0x0
WdfIoTargetStarted,0x1
WdfIoTargetStopped,0x2
WdfIoTargetClosedForQueryRemove,0x3
WdfIoTargetClosed,0x4
WdfIoTargetDeleted,0x5
}
73cb0a8e-2503-8d66-43eb-b775ed5588d7 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_IO_TARGET_STATE
{
WdfIoTargetStateUndefined,0x0
WdfIoTargetStarted,0x1
WdfIoTargetStopped,0x2
WdfIoTargetClosedForQueryRemove,0x3
WdfIoTargetClosed,0x4
WdfIoTargetDeleted,0x5
}
65c7a6eb-4901-fbd2-42cf-54c0e60e48dc e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_IO_TARGET_SENT_IO_ACTION
{
WdfIoTargetSentIoUndefined,0x0
WdfIoTargetCancelSentIo,0x1
WdfIoTargetWaitForSentIoToComplete,0x2
WdfIoTargetLeaveSentIoPending,0x3
}
#enumv _WDF_IO_TARGET_STATE
{
WdfIoTargetStateUndefined,0x0
WdfIoTargetStarted,0x1
WdfIoTargetStopped,0x2
WdfIoTargetClosedForQueryRemove,0x3
WdfIoTargetClosed,0x4
WdfIoTargetDeleted,0x5
}
0d1c4cb0-5250-769d-2bc3-f6349f48101a e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WdfUsbTargetDeviceSelectConfigType
{
WdfUsbTargetDeviceSelectConfigTypeInvalid,0x0
WdfUsbTargetDeviceSelectConfigTypeDeconfig,0x1
WdfUsbTargetDeviceSelectConfigTypeSingleInterface,0x2
WdfUsbTargetDeviceSelectConfigTypeMultiInterface,0x3
WdfUsbTargetDeviceSelectConfigTypeInterfacesPairs,0x4
WdfUsbTargetDeviceSelectConfigTypeInterfacesDescriptor,0x5
WdfUsbTargetDeviceSelectConfigTypeUrb,0x6
}
51335820-88c0-a4f1-720f-f5f5c8a6227b e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_USB_PIPE_TYPE
{
WdfUsbPipeTypeInvalid,0x0
WdfUsbPipeTypeControl,0x1
WdfUsbPipeTypeIsochronous,0x2
WdfUsbPipeTypeBulk,0x3
WdfUsbPipeTypeInterrupt,0x4
}
0ca6aa50-d6cd-17d2-6a37-002e21f199f8 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_DEVICE_FAILED_ACTION
{
WdfDeviceFailedUndefined,0x0
WdfDeviceFailedAttemptRestart,0x1
WdfDeviceFailedNoRestart,0x2
}
#enumv _WDF_REQUEST_TYPE
{
WdfRequestTypeCreate,0x0
WdfRequestTypeCreateNamedPipe,0x1
WdfRequestTypeClose,0x2
WdfRequestTypeRead,0x3
WdfRequestTypeWrite,0x4
WdfRequestTypeQueryInformation,0x5
WdfRequestTypeSetInformation,0x6
WdfRequestTypeQueryEA,0x7
WdfRequestTypeSetEA,0x8
WdfRequestTypeFlushBuffers,0x9
WdfRequestTypeQueryVolumeInformation,0xA
WdfRequestTypeSetVolumeInformation,0xB
WdfRequestTypeDirectoryControl,0xC
WdfRequestTypeFileSystemControl,0xD
WdfRequestTypeDeviceControl,0xE
WdfRequestTypeDeviceControlInternal,0xF
WdfRequestTypeShutdown,0x10
WdfRequestTypeLockControl,0x11
WdfRequestTypeCleanup,0x12
WdfRequestTypeCreateMailSlot,0x13
WdfRequestTypeQuerySecurity,0x14
WdfRequestTypeSetSecurity,0x15
WdfRequestTypePower,0x16
WdfRequestTypeSystemControl,0x17
WdfRequestTypeDeviceChange,0x18
WdfRequestTypeQueryQuota,0x19
WdfRequestTypeSetQuota,0x1A
WdfRequestTypePnp,0x1B
WdfRequestTypeOther,0x1C
WdfRequestTypeUsb,0x40
WdfRequestTypeNoFormat,0xFF
WdfRequestTypeMax,0x100
}
6f17437e-5a33-26e9-122d-2cccfdb78145 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_CHILD_LIST_RETRIEVE_DEVICE_STATUS
{
WdfChildListRetrieveDeviceUndefined,0x0
WdfChildListRetrieveDeviceSuccess,0x1
WdfChildListRetrieveDeviceNotYetCreated,0x2
WdfChildListRetrieveDeviceNoSuchDevice,0x3
}
0d5a1144-319e-b5ec-556c-e141df711575 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv FxRequestIrpOwnership
{
FxRequestOwnsIrp,0x1
FxRequestDoesNotOwnIrp,0x2
}
b08d780f-dac6-1796-1fec-bf92340e06bb e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_REQUEST_TYPE
{
WdfRequestTypeCreate,0x0
WdfRequestTypeCreateNamedPipe,0x1
WdfRequestTypeClose,0x2
WdfRequestTypeRead,0x3
WdfRequestTypeWrite,0x4
WdfRequestTypeQueryInformation,0x5
WdfRequestTypeSetInformation,0x6
WdfRequestTypeQueryEA,0x7
WdfRequestTypeSetEA,0x8
WdfRequestTypeFlushBuffers,0x9
WdfRequestTypeQueryVolumeInformation,0xA
WdfRequestTypeSetVolumeInformation,0xB
WdfRequestTypeDirectoryControl,0xC
WdfRequestTypeFileSystemControl,0xD
WdfRequestTypeDeviceControl,0xE
WdfRequestTypeDeviceControlInternal,0xF
WdfRequestTypeShutdown,0x10
WdfRequestTypeLockControl,0x11
WdfRequestTypeCleanup,0x12
WdfRequestTypeCreateMailSlot,0x13
WdfRequestTypeQuerySecurity,0x14
WdfRequestTypeSetSecurity,0x15
WdfRequestTypePower,0x16
WdfRequestTypeSystemControl,0x17
WdfRequestTypeDeviceChange,0x18
WdfRequestTypeQueryQuota,0x19
WdfRequestTypeSetQuota,0x1A
WdfRequestTypePnp,0x1B
WdfRequestTypeOther,0x1C
WdfRequestTypeUsb,0x40
WdfRequestTypeNoFormat,0xFF
WdfRequestTypeMax,0x100
}
#enumv FxIoStopProcessingForPowerAction
{
FxIoStopProcessingForPowerHold,0x1
FxIoStopProcessingForPowerPurgeManaged,0x2
FxIoStopProcessingForPowerPurgeNonManaged,0x3
}
3d3ed8b1-004f-68e3-66c4-3730efdecd25 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_REQUEST_TYPE
{
WdfRequestTypeCreate,0x0
WdfRequestTypeCreateNamedPipe,0x1
WdfRequestTypeClose,0x2
WdfRequestTypeRead,0x3
WdfRequestTypeWrite,0x4
WdfRequestTypeQueryInformation,0x5
WdfRequestTypeSetInformation,0x6
WdfRequestTypeQueryEA,0x7
WdfRequestTypeSetEA,0x8
WdfRequestTypeFlushBuffers,0x9
WdfRequestTypeQueryVolumeInformation,0xA
WdfRequestTypeSetVolumeInformation,0xB
WdfRequestTypeDirectoryControl,0xC
WdfRequestTypeFileSystemControl,0xD
WdfRequestTypeDeviceControl,0xE
WdfRequestTypeDeviceControlInternal,0xF
WdfRequestTypeShutdown,0x10
WdfRequestTypeLockControl,0x11
WdfRequestTypeCleanup,0x12
WdfRequestTypeCreateMailSlot,0x13
WdfRequestTypeQuerySecurity,0x14
WdfRequestTypeSetSecurity,0x15
WdfRequestTypePower,0x16
WdfRequestTypeSystemControl,0x17
WdfRequestTypeDeviceChange,0x18
WdfRequestTypeQueryQuota,0x19
WdfRequestTypeSetQuota,0x1A
WdfRequestTypePnp,0x1B
WdfRequestTypeOther,0x1C
WdfRequestTypeUsb,0x40
WdfRequestTypeNoFormat,0xFF
WdfRequestTypeMax,0x100
}
#enumv _WDF_IO_QUEUE_STATE
{
WdfIoQueueAcceptRequests,0x1
WdfIoQueueDispatchRequests,0x2
WdfIoQueueNoRequests,0x4
WdfIoQueueDriverNoRequests,0x8
WdfIoQueuePnpHeld,0x10
}
47f60883-01f9-85a5-fc9d-1be7dcd4b026 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv FxObjectState
{
FxObjectStateInvalid,0x0
FxObjectStateCreated,0x1
FxObjectStateDisposed,0x2
FxObjectStateDisposingEarly,0x3
FxObjectStateDisposingDisposeChildren,0x4
FxObjectStateDeferedDisposing,0x5
FxObjectStateDeferedDeleting,0x6
FxObjectStateWaitingForEarlyDispose,0x7
FxObjectStateWaitingForParentDeleteAndDisposed,0x8
FxObjectStateDeletedDisposing,0x9
FxObjectStateDeletedAndDisposed,0xA
FxObjectStateDeferedDestroy,0xB
FxObjectStateDestroyed,0xC
FxObjectStateMaximum,0xD
}
#enumv FxObjectDroppedEvent
{
FxObjectDroppedEventAssignParentObject,0x0
FxObjectDroppedEventAddChildObjectInternal,0x1
FxObjectDroppedEventRemoveChildObjectInternal,0x2
FxObjectDroppedEventDeleteObject,0x3
FxObjectDroppedEventPerformEarlyDispose,0x4
FxObjectDroppedEventRemoveParentAssignment,0x5
FxObjectDroppedEventParentDeleteEvent,0x6
}
4a25592a-8cae-c35c-6091-a285ae14baaa e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_EXECUTION_LEVEL
{
WdfExecutionLevelInvalid,0x0
WdfExecutionLevelInheritFromParent,0x1
WdfExecutionLevelPassive,0x2
WdfExecutionLevelDispatch,0x3
}
#enumv _WDF_SYNCHRONIZATION_SCOPE
{
WdfSynchronizationScopeInvalid,0x0
WdfSynchronizationScopeInheritFromParent,0x1
WdfSynchronizationScopeDevice,0x2
WdfSynchronizationScopeQueue,0x3
WdfSynchronizationScopeNone,0x4
}
0cb05f64-1305-ad9b-046c-8d30905d67c5 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _DEVICE_RELATION_TYPE
{
BusRelations,0x0
EjectionRelations,0x1
PowerRelations,0x2
RemovalRelations,0x3
TargetDeviceRelation,0x4
SingleBusRelations,0x5
TransportRelations,0x6
}
0e4262ce-cb72-a804-9052-51b6ae699889 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv BUS_QUERY_ID_TYPE
{
BusQueryDeviceID,0x0
BusQueryHardwareIDs,0x1
BusQueryCompatibleIDs,0x2
BusQueryInstanceID,0x3
BusQueryDeviceSerialNumber,0x4
BusQueryContainerID,0x5
}
d816b6e3-c6ba-363d-54b4-3533d1de16bb e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _DEVICE_POWER_STATE
{
PowerDeviceUnspecified,0x0
PowerDeviceD0,0x1
PowerDeviceD1,0x2
PowerDeviceD2,0x3
PowerDeviceD3,0x4
PowerDeviceMaximum,0x5
}
#enumv _SYSTEM_POWER_STATE
{
PowerSystemUnspecified,0x0
PowerSystemWorking,0x1
PowerSystemSleeping1,0x2
PowerSystemSleeping2,0x3
PowerSystemSleeping3,0x4
PowerSystemHibernate,0x5
PowerSystemShutdown,0x6
PowerSystemMaximum,0x7
}
#enumv _DEVICE_RELATION_TYPE
{
BusRelations,0x0
EjectionRelations,0x1
PowerRelations,0x2
RemovalRelations,0x3
TargetDeviceRelation,0x4
SingleBusRelations,0x5
TransportRelations,0x6
}
31f474a8-23f3-c270-e156-7b455a6f635c e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_DEVICE_PNP_STATE
{
WdfDevStatePnpInvalid,0x0
WdfDevStatePnpObjectCreated,0x100
WdfDevStatePnpCheckForDevicePresence,0x101
WdfDevStatePnpEjectFailed,0x102
WdfDevStatePnpEjectHardware,0x103
WdfDevStatePnpEjectedWaitingForRemove,0x104
WdfDevStatePnpInit,0x105
WdfDevStatePnpInitStarting,0x106
WdfDevStatePnpInitSurpriseRemoved,0x107
WdfDevStatePnpHardwareAvailable,0x108
WdfDevStatePnpEnableInterfaces,0x109
WdfDevStatePnpHardwareAvailablePowerPolicyFailed,0x10A
WdfDevStatePnpQueryRemoveAskDriver,0x10B
WdfDevStatePnpQueryRemovePending,0x10C
WdfDevStatePnpQueryRemoveStaticCheck,0x10D
WdfDevStatePnpQueriedRemoving,0x10E
WdfDevStatePnpQueryStopAskDriver,0x10F
WdfDevStatePnpQueryStopPending,0x110
WdfDevStatePnpQueryStopStaticCheck,0x111
WdfDevStatePnpQueryCanceled,0x112
WdfDevStatePnpRemoved,0x113
WdfDevStatePnpPdoRemoved,0x114
WdfDevStatePnpRemovedPdoWait,0x115
WdfDevStatePnpRemovedPdoSurpriseRemoved,0x116
WdfDevStatePnpRemovingDisableInterfaces,0x117
WdfDevStatePnpRestarting,0x118
WdfDevStatePnpStarted,0x119
WdfDevStatePnpStartedCancelStop,0x11A
WdfDevStatePnpStartedCancelRemove,0x11B
WdfDevStatePnpStartedRemoving,0x11C
WdfDevStatePnpStartingFromStopped,0x11D
WdfDevStatePnpStopped,0x11E
WdfDevStatePnpStoppedWaitForStartCompletion,0x11F
WdfDevStatePnpStartedStopping,0x120
WdfDevStatePnpSurpriseRemove,0x121
WdfDevStatePnpInitQueryRemove,0x122
WdfDevStatePnpInitQueryRemoveCanceled,0x123
WdfDevStatePnpFdoRemoved,0x124
WdfDevStatePnpRemovedWaitForChildren,0x125
WdfDevStatePnpQueriedSurpriseRemove,0x126
WdfDevStatePnpSurpriseRemoveIoStarted,0x127
WdfDevStatePnpFailedPowerDown,0x128
WdfDevStatePnpFailedIoStarting,0x129
WdfDevStatePnpFailedOwnHardware,0x12A
WdfDevStatePnpFailed,0x12B
WdfDevStatePnpFailedSurpriseRemoved,0x12C
WdfDevStatePnpFailedStarted,0x12D
WdfDevStatePnpFailedWaitForRemove,0x12E
WdfDevStatePnpFailedInit,0x12F
WdfDevStatePnpPdoInitFailed,0x130
WdfDevStatePnpRestart,0x131
WdfDevStatePnpRestartReleaseHardware,0x132
WdfDevStatePnpRestartHardwareAvailable,0x133
WdfDevStatePnpPdoRestart,0x134
WdfDevStatePnpFinal,0x135
WdfDevStatePnpRemovedChildrenRemoved,0x136
WdfDevStatePnpQueryRemoveEnsureDeviceAwake,0x137
WdfDevStatePnpQueryStopEnsureDeviceAwake,0x138
WdfDevStatePnpNull,0x139
}
#enumv FxPnpEvent
{
PnpEventInvalid,0x0
PnpEventAddDevice,0x1
PnpEventStartDevice,0x2
PnpEventStartDeviceComplete,0x4
PnpEventStartDeviceFailed,0x8
PnpEventQueryRemove,0x10
PnpEventQueryStop,0x20
PnpEventCancelRemove,0x40
PnpEventCancelStop,0x80
PnpEventStop,0x100
PnpEventRemove,0x200
PnpEventSurpriseRemove,0x400
PnpEventEject,0x800
PnpEventPwrPolStopped,0x1000
PnpEventPwrPolStopFailed,0x2000
PnpEventPowerUpFailed,0x4000
PnpEventPowerDownFailed,0x8000
PnpEventParentRemoved,0x10000
PnpEventChildrenRemovalComplete,0x20000
PnpEventPwrPolStarted,0x40000
PnpEventPwrPolStartFailed,0x80000
PnpEventDeviceInD0,0x100000
PnpEventPending,0xDF4
PnpPriorityEventsMask,0x1C3000
PnpEventNull,0xFF
}
a06c4939-ec03-9e2b-f095-211ff9a6d5e5 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv FxPowerIdleStates
{
FxIdleStopped,0x1
FxIdleStarted,0x2
FxIdleStartedPowerUp,0x3
FxIdleStartedPowerFailed,0x4
FxIdleDisabled,0x5
FxIdleCheckIoCount,0x6
FxIdleBusy,0x7
FxIdleDecrementIo,0x8
FxIdleStartTimer,0x9
FxIdleTimerRunning,0xA
FxIdleTimingOut,0xB
FxIdleTimedOut,0xC
FxIdleTimedOutIoIncrement,0xD
FxIdleTimedOutPowerDown,0xE
FxIdleTimedOutPowerDownFailed,0xF
FxIdleGoingToDx,0x10
FxIdleInDx,0x11
FxIdleInDxIoIncrement,0x12
FxIdleInDxPowerUpFailure,0x13
FxIdleInDxStopped,0x14
FxIdleInDxDisabled,0x15
FxIdleInDxEnabled,0x16
FxIdlePowerUp,0x17
FxIdlePowerUpComplete,0x18
FxIdleTimedOutDisabled,0x19
FxIdleTimedOutEnabled,0x1A
FxIdleCancelTimer,0x1B
FxIdleWaitForTimeout,0x1C
FxIdleTimerExpired,0x1D
FxIdleDisabling,0x1E
FxIdleDisablingWaitForTimeout,0x1F
FxIdleDisablingTimerExpired,0x20
FxIdlePowerFailedWaitForTimeout,0x21
FxIdlePowerFailed,0x22
FxIdleMax,0x23
}
#enumv FxPowerIdleEvents
{
PowerIdleEventPowerUpFailed,0x2
PowerIdleEventPowerUpComplete,0x4
PowerIdleEventPowerDown,0x8
PowerIdleEventPowerDownFailed,0x10
PowerIdleEventTimerExpired,0x20
PowerIdleEventEnabled,0x40
PowerIdleEventDisabled,0x80
PowerIdleEventIoDecrement,0x100
PowerIdleEventIoIncrement,0x200
PowerIdleEventStart,0x400
PowerIdleEventStop,0x800
PowerIdleNull,0x0
}
1c6af04a-8c20-a063-1976-7299d70a2744 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_DEVICE_POWER_POLICY_STATE
{
WdfDevStatePwrPolInvalid,0x0
WdfDevStatePwrPolObjectCreated,0x500
WdfDevStatePwrPolStarting,0x501
WdfDevStatePwrPolStartingSucceeded,0x502
WdfDevStatePwrPolStartingFailed,0x503
WdfDevStatePwrPolStartingDecideS0Wake,0x504
WdfDevStatePwrPolStartedIdleCapable,0x505
WdfDevStatePwrPolTimerExpiredNoWake,0x506
WdfDevStatePwrPolTimerExpiredNoWakeCompletePowerDown,0x507
WdfDevStatePwrPolWaitingUnarmed,0x508
WdfDevStatePwrPolWaitingUnarmedQueryIdle,0x509
WdfDevStatePwrPolS0NoWakePowerUp,0x50A
WdfDevStatePwrPolS0NoWakeCompletePowerUp,0x50B
WdfDevStatePwrPolSystemSleepFromDeviceWaitingUnarmed,0x50C
WdfDevStatePwrPolSystemSleepNeedWake,0x50D
WdfDevStatePwrPolSystemSleepNeedWakeCompletePowerUp,0x50E
WdfDevStatePwrPolSystemSleepPowerRequestFailed,0x50F
WdfDevStatePwrPolCheckPowerPageable,0x510
WdfDevStatePwrPolSleepingWakeWakeArrived,0x511
WdfDevStatePwrPolSleepingWakeRevertArmWake,0x512
WdfDevStatePwrPolSystemAsleepWakeArmed,0x513
WdfDevStatePwrPolSystemWakeDeviceWakeEnabled,0x514
WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceled,0x515
WdfDevStatePwrPolSystemWakeDeviceWakeDisarm,0x516
WdfDevStatePwrPolSystemWakeDeviceWakeTriggered,0x517
WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0,0x518
WdfDevStatePwrPolSystemWakeDeviceWokeDisarm,0x519
WdfDevStatePwrPolSleepingWakeWakeArrivedNP,0x851A
WdfDevStatePwrPolSleepingWakeRevertArmWakeNP,0x851B
WdfDevStatePwrPolSleepingWakePowerDownFailed,0x51C
WdfDevStatePwrPolSleepingWakePowerDownFailedWakeCanceled,0x51D
WdfDevStatePwrPolSystemAsleepWakeArmedNP,0x851E
WdfDevStatePwrPolSystemWakeDeviceWakeEnabledNP,0x851F
WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceledNP,0x8520
WdfDevStatePwrPolSystemWakeDeviceWakeDisarmNP,0x8521
WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredNP,0x8522
WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0NP,0x8523
WdfDevStatePwrPolSystemWakeDeviceWokeDisarmNP,0x8524
WdfDevStatePwrPolSystemWakeDeviceWakeCompletePowerUp,0x525
WdfDevStatePwrPolSleeping,0x526
WdfDevStatePwrPolSleepingNoWakePowerDown,0x527
WdfDevStatePwrPolSleepingNoWakeCompletePowerDown,0x528
WdfDevStatePwrPolSleepingNoWakeDxRequestFailed,0x529
WdfDevStatePwrPolSleepingWakePowerDown,0x52A
WdfDevStatePwrPolSleepingSendWake,0x52B
WdfDevStatePwrPolSystemAsleepNoWake,0x52C
WdfDevStatePwrPolSystemWakeDeviceWakeDisabled,0x52D
WdfDevStatePwrPolSystemWakeDeviceToD0,0x52E
WdfDevStatePwrPolSystemWakeDeviceToD0CompletePowerUp,0x52F
WdfDevStatePwrPolSystemWakeQueryIdle,0x530
WdfDevStatePwrPolStartedWakeCapable,0x531
WdfDevStatePwrPolTimerExpiredDecideUsbSS,0x532
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDown,0x533
WdfDevStatePwrPolTimerExpiredWakeCapableSendWake,0x534
WdfDevStatePwrPolTimerExpiredWakeCapableUsbSS,0x535
WdfDevStatePwrPolTimerExpiredWakeCapableWakeArrived,0x536
WdfDevStatePwrPolTimerExpiredWakeCapableCancelWake,0x537
WdfDevStatePwrPolTimerExpiredWakeCapableWakeCanceled,0x538
WdfDevStatePwrPolTimerExpiredWakeCapableCleanup,0x539
WdfDevStatePwrPolTimerExpiredWakeCapableDxAllocFailed,0x53A
WdfDevStatePwrPolTimerExpiredWakeCompletedPowerDown,0x53B
WdfDevStatePwrPolTimerExpiredWakeCompletedPowerUp,0x53C
WdfDevStatePwrPolWaitingArmedUsbSS,0x53D
WdfDevStatePwrPolWaitingArmed,0x53E
WdfDevStatePwrPolWaitingArmedQueryIdle,0x53F
WdfDevStatePwrPolIoPresentArmed,0x540
WdfDevStatePwrPolIoPresentArmedWakeCanceled,0x541
WdfDevStatePwrPolS0WakeDisarm,0x542
WdfDevStatePwrPolS0WakeCompletePowerUp,0x543
WdfDevStatePwrPolTimerExpiredWakeSucceeded,0x544
WdfDevStatePwrPolTimerExpiredWakeCompletedDisarm,0x545
WdfDevStatePwrPolTimerExpiredWakeCapableWakeSucceeded,0x546
WdfDevStatePwrPolTimerExpiredWakeCapableWakeFailed,0x547
WdfDevStatePwrPolWakeFailedUsbSS,0x548
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedCancelWake,0x549
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled,0x54A
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedUsbSS,0x54B
WdfDevStatePwrPolCancelingWakeForSystemSleep,0x54C
WdfDevStatePwrPolCancelingWakeForSystemSleepWakeCanceled,0x54D
WdfDevStatePwrPolDisarmingWakeForSystemSleepCompletePowerUp,0x54E
WdfDevStatePwrPolPowerUpForSystemSleepFailed,0x54F
WdfDevStatePwrPolWokeFromS0UsbSS,0x550
WdfDevStatePwrPolWokeFromS0,0x551
WdfDevStatePwrPolWokeFromS0NotifyDriver,0x552
WdfDevStatePwrPolStoppingResetDevice,0x553
WdfDevStatePwrPolStoppingResetDeviceCompletePowerUp,0x554
WdfDevStatePwrPolStoppingResetDeviceFailed,0x555
WdfDevStatePwrPolStoppingD0,0x556
WdfDevStatePwrPolStoppingD0Failed,0x557
WdfDevStatePwrPolStoppingDisarmWake,0x558
WdfDevStatePwrPolStoppingDisarmWakeCancelWake,0x559
WdfDevStatePwrPolStoppingDisarmWakeWakeCanceled,0x55A
WdfDevStatePwrPolStopping,0x55B
WdfDevStatePwrPolStoppingFailed,0x55C
WdfDevStatePwrPolStoppingSendStatus,0x55D
WdfDevStatePwrPolStoppingCancelTimer,0x55E
WdfDevStatePwrPolStoppingWaitForIdleTimeout,0x55F
WdfDevStatePwrPolStoppingCancelUsbSS,0x560
WdfDevStatePwrPolStoppingWaitForUsbSSCompletion,0x561
WdfDevStatePwrPolStoppingCancelWake,0x562
WdfDevStatePwrPolStopped,0x563
WdfDevStatePwrPolCancelUsbSS,0x564
WdfDevStatePwrPolStarted,0x565
WdfDevStatePwrPolStartedCancelTimer,0x566
WdfDevStatePwrPolStartedWaitForIdleTimeout,0x567
WdfDevStatePwrPolStartedWakeCapableCancelTimerForSleep,0x568
WdfDevStatePwrPolStartedWakeCapableWaitForIdleTimeout,0x569
WdfDevStatePwrPolStartedWakeCapableSleepingUsbSS,0x56A
WdfDevStatePwrPolStartedIdleCapableCancelTimerForSleep,0x56B
WdfDevStatePwrPolStartedIdleCapableWaitForIdleTimeout,0x56C
WdfDevStatePwrPolDeviceD0PowerRequestFailed,0x56D
WdfDevStatePwrPolDevicePowerRequestFailed,0x56E
WdfDevStatePwrPolGotoDx,0x56F
WdfDevStatePwrPolGotoDxInDx,0x570
WdfDevStatePwrPolDx,0x571
WdfDevStatePwrPolGotoD0,0x572
WdfDevStatePwrPolGotoD0InD0,0x573
WdfDevStatePwrPolFinal,0x574
WdfDevStatePwrPolSleepingPowerDownNotProcessed,0x575
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownNotProcessed,0x576
WdfDevStatePwrPolTimerExpiredNoWakePowerDownNotProcessed,0x577
WdfDevStatePwrPolTimerExpiredNoWakePoweredDownDisableIdleTimer,0x578
WdfDevStatePwrPolStoppingWaitingForImplicitPowerDown,0x579
WdfDevStatePwrPolStoppingPoweringUp,0x57A
WdfDevStatePwrPolStoppingPoweringDown,0x57B
WdfDevStatePwrPolPowerUpForSystemSleepNotSeen,0x57C
WdfDevStatePwrPolWaitingArmedStoppingCancelUsbSS,0x57D
WdfDevStatePwrPolWaitingArmedWakeFailedCancelUsbSS,0x57E
WdfDevStatePwrPolWaitingArmedIoPresentCancelUsbSS,0x57F
WdfDevStatePwrPolWaitingArmedWakeSucceededCancelUsbSS,0x580
WdfDevStatePwrPolCancelingUsbSSForSystemSleep,0x581
WdfDevStatePwrPolStoppingD0CancelUsbSS,0x582
WdfDevStatePwrPolNull,0x583
}
#enumv FxPowerPolicyEvent
{
PwrPolInvalid,0x0
PwrPolStart,0x1
PwrPolStop,0x2
PwrPolSx,0x4
PwrPolS0,0x8
PwrPolPowerDown,0x10
PwrPolPowerUp,0x20
PwrPolPowerDownIoStopped,0x40
PwrPolPowerUpHwStarted,0x80
PwrPolWakeArrived,0x100
PwrPolWakeSuccess,0x200
PwrPolWakeFailed,0x400
PwrPolIoPresent,0x800
PwrPolPowerTimeoutExpired,0x1000
PwrPolS0IdlePolicyChanged,0x2000
PwrPolSurpriseRemove,0x4000
PwrPolUsbSelectiveSuspendCallback,0x8000
PwrPolUsbSelectiveSuspendCompleted,0x10000
PwrPolPowerDownFailed,0x20000
PwrPolPowerUpFailed,0x40000
PwrPolImplicitPowerDown,0x80000
PwrPolImplicitPowerDownFailed,0x100000
PwrPolPowerUpNotSeen,0x200000
PwrPolPriorityEventsMask,0x3F07F0
PwrPolNotOwnerPriorityEventsMask,0x60030
PowerPolSingularEventMask,0x2000
PwrPolNull,0xFF
}
0f1627e4-9104-3b5b-0ee6-1d7b7b807395 e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_DEVICE_POWER_POLICY_STATE
{
WdfDevStatePwrPolInvalid,0x0
WdfDevStatePwrPolObjectCreated,0x500
WdfDevStatePwrPolStarting,0x501
WdfDevStatePwrPolStartingSucceeded,0x502
WdfDevStatePwrPolStartingFailed,0x503
WdfDevStatePwrPolStartingDecideS0Wake,0x504
WdfDevStatePwrPolStartedIdleCapable,0x505
WdfDevStatePwrPolTimerExpiredNoWake,0x506
WdfDevStatePwrPolTimerExpiredNoWakeCompletePowerDown,0x507
WdfDevStatePwrPolWaitingUnarmed,0x508
WdfDevStatePwrPolWaitingUnarmedQueryIdle,0x509
WdfDevStatePwrPolS0NoWakePowerUp,0x50A
WdfDevStatePwrPolS0NoWakeCompletePowerUp,0x50B
WdfDevStatePwrPolSystemSleepFromDeviceWaitingUnarmed,0x50C
WdfDevStatePwrPolSystemSleepNeedWake,0x50D
WdfDevStatePwrPolSystemSleepNeedWakeCompletePowerUp,0x50E
WdfDevStatePwrPolSystemSleepPowerRequestFailed,0x50F
WdfDevStatePwrPolCheckPowerPageable,0x510
WdfDevStatePwrPolSleepingWakeWakeArrived,0x511
WdfDevStatePwrPolSleepingWakeRevertArmWake,0x512
WdfDevStatePwrPolSystemAsleepWakeArmed,0x513
WdfDevStatePwrPolSystemWakeDeviceWakeEnabled,0x514
WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceled,0x515
WdfDevStatePwrPolSystemWakeDeviceWakeDisarm,0x516
WdfDevStatePwrPolSystemWakeDeviceWakeTriggered,0x517
WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0,0x518
WdfDevStatePwrPolSystemWakeDeviceWokeDisarm,0x519
WdfDevStatePwrPolSleepingWakeWakeArrivedNP,0x851A
WdfDevStatePwrPolSleepingWakeRevertArmWakeNP,0x851B
WdfDevStatePwrPolSleepingWakePowerDownFailed,0x51C
WdfDevStatePwrPolSleepingWakePowerDownFailedWakeCanceled,0x51D
WdfDevStatePwrPolSystemAsleepWakeArmedNP,0x851E
WdfDevStatePwrPolSystemWakeDeviceWakeEnabledNP,0x851F
WdfDevStatePwrPolSystemWakeDeviceWakeEnabledWakeCanceledNP,0x8520
WdfDevStatePwrPolSystemWakeDeviceWakeDisarmNP,0x8521
WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredNP,0x8522
WdfDevStatePwrPolSystemWakeDeviceWakeTriggeredS0NP,0x8523
WdfDevStatePwrPolSystemWakeDeviceWokeDisarmNP,0x8524
WdfDevStatePwrPolSystemWakeDeviceWakeCompletePowerUp,0x525
WdfDevStatePwrPolSleeping,0x526
WdfDevStatePwrPolSleepingNoWakePowerDown,0x527
WdfDevStatePwrPolSleepingNoWakeCompletePowerDown,0x528
WdfDevStatePwrPolSleepingNoWakeDxRequestFailed,0x529
WdfDevStatePwrPolSleepingWakePowerDown,0x52A
WdfDevStatePwrPolSleepingSendWake,0x52B
WdfDevStatePwrPolSystemAsleepNoWake,0x52C
WdfDevStatePwrPolSystemWakeDeviceWakeDisabled,0x52D
WdfDevStatePwrPolSystemWakeDeviceToD0,0x52E
WdfDevStatePwrPolSystemWakeDeviceToD0CompletePowerUp,0x52F
WdfDevStatePwrPolSystemWakeQueryIdle,0x530
WdfDevStatePwrPolStartedWakeCapable,0x531
WdfDevStatePwrPolTimerExpiredDecideUsbSS,0x532
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDown,0x533
WdfDevStatePwrPolTimerExpiredWakeCapableSendWake,0x534
WdfDevStatePwrPolTimerExpiredWakeCapableUsbSS,0x535
WdfDevStatePwrPolTimerExpiredWakeCapableWakeArrived,0x536
WdfDevStatePwrPolTimerExpiredWakeCapableCancelWake,0x537
WdfDevStatePwrPolTimerExpiredWakeCapableWakeCanceled,0x538
WdfDevStatePwrPolTimerExpiredWakeCapableCleanup,0x539
WdfDevStatePwrPolTimerExpiredWakeCapableDxAllocFailed,0x53A
WdfDevStatePwrPolTimerExpiredWakeCompletedPowerDown,0x53B
WdfDevStatePwrPolTimerExpiredWakeCompletedPowerUp,0x53C
WdfDevStatePwrPolWaitingArmedUsbSS,0x53D
WdfDevStatePwrPolWaitingArmed,0x53E
WdfDevStatePwrPolWaitingArmedQueryIdle,0x53F
WdfDevStatePwrPolIoPresentArmed,0x540
WdfDevStatePwrPolIoPresentArmedWakeCanceled,0x541
WdfDevStatePwrPolS0WakeDisarm,0x542
WdfDevStatePwrPolS0WakeCompletePowerUp,0x543
WdfDevStatePwrPolTimerExpiredWakeSucceeded,0x544
WdfDevStatePwrPolTimerExpiredWakeCompletedDisarm,0x545
WdfDevStatePwrPolTimerExpiredWakeCapableWakeSucceeded,0x546
WdfDevStatePwrPolTimerExpiredWakeCapableWakeFailed,0x547
WdfDevStatePwrPolWakeFailedUsbSS,0x548
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedCancelWake,0x549
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled,0x54A
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownFailedUsbSS,0x54B
WdfDevStatePwrPolCancelingWakeForSystemSleep,0x54C
WdfDevStatePwrPolCancelingWakeForSystemSleepWakeCanceled,0x54D
WdfDevStatePwrPolDisarmingWakeForSystemSleepCompletePowerUp,0x54E
WdfDevStatePwrPolPowerUpForSystemSleepFailed,0x54F
WdfDevStatePwrPolWokeFromS0UsbSS,0x550
WdfDevStatePwrPolWokeFromS0,0x551
WdfDevStatePwrPolWokeFromS0NotifyDriver,0x552
WdfDevStatePwrPolStoppingResetDevice,0x553
WdfDevStatePwrPolStoppingResetDeviceCompletePowerUp,0x554
WdfDevStatePwrPolStoppingResetDeviceFailed,0x555
WdfDevStatePwrPolStoppingD0,0x556
WdfDevStatePwrPolStoppingD0Failed,0x557
WdfDevStatePwrPolStoppingDisarmWake,0x558
WdfDevStatePwrPolStoppingDisarmWakeCancelWake,0x559
WdfDevStatePwrPolStoppingDisarmWakeWakeCanceled,0x55A
WdfDevStatePwrPolStopping,0x55B
WdfDevStatePwrPolStoppingFailed,0x55C
WdfDevStatePwrPolStoppingSendStatus,0x55D
WdfDevStatePwrPolStoppingCancelTimer,0x55E
WdfDevStatePwrPolStoppingWaitForIdleTimeout,0x55F
WdfDevStatePwrPolStoppingCancelUsbSS,0x560
WdfDevStatePwrPolStoppingWaitForUsbSSCompletion,0x561
WdfDevStatePwrPolStoppingCancelWake,0x562
WdfDevStatePwrPolStopped,0x563
WdfDevStatePwrPolCancelUsbSS,0x564
WdfDevStatePwrPolStarted,0x565
WdfDevStatePwrPolStartedCancelTimer,0x566
WdfDevStatePwrPolStartedWaitForIdleTimeout,0x567
WdfDevStatePwrPolStartedWakeCapableCancelTimerForSleep,0x568
WdfDevStatePwrPolStartedWakeCapableWaitForIdleTimeout,0x569
WdfDevStatePwrPolStartedWakeCapableSleepingUsbSS,0x56A
WdfDevStatePwrPolStartedIdleCapableCancelTimerForSleep,0x56B
WdfDevStatePwrPolStartedIdleCapableWaitForIdleTimeout,0x56C
WdfDevStatePwrPolDeviceD0PowerRequestFailed,0x56D
WdfDevStatePwrPolDevicePowerRequestFailed,0x56E
WdfDevStatePwrPolGotoDx,0x56F
WdfDevStatePwrPolGotoDxInDx,0x570
WdfDevStatePwrPolDx,0x571
WdfDevStatePwrPolGotoD0,0x572
WdfDevStatePwrPolGotoD0InD0,0x573
WdfDevStatePwrPolFinal,0x574
WdfDevStatePwrPolSleepingPowerDownNotProcessed,0x575
WdfDevStatePwrPolTimerExpiredWakeCapablePowerDownNotProcessed,0x576
WdfDevStatePwrPolTimerExpiredNoWakePowerDownNotProcessed,0x577
WdfDevStatePwrPolTimerExpiredNoWakePoweredDownDisableIdleTimer,0x578
WdfDevStatePwrPolStoppingWaitingForImplicitPowerDown,0x579
WdfDevStatePwrPolStoppingPoweringUp,0x57A
WdfDevStatePwrPolStoppingPoweringDown,0x57B
WdfDevStatePwrPolPowerUpForSystemSleepNotSeen,0x57C
WdfDevStatePwrPolWaitingArmedStoppingCancelUsbSS,0x57D
WdfDevStatePwrPolWaitingArmedWakeFailedCancelUsbSS,0x57E
WdfDevStatePwrPolWaitingArmedIoPresentCancelUsbSS,0x57F
WdfDevStatePwrPolWaitingArmedWakeSucceededCancelUsbSS,0x580
WdfDevStatePwrPolCancelingUsbSSForSystemSleep,0x581
WdfDevStatePwrPolStoppingD0CancelUsbSS,0x582
WdfDevStatePwrPolNull,0x583
}
9fad61e3-68ff-f42e-15fe-7a3fb252225e e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_DEVICE_POWER_STATE
{
WdfDevStatePowerInvalid,0x0
WdfDevStatePowerObjectCreated,0x300
WdfDevStatePowerCheckDeviceType,0x301
WdfDevStatePowerCheckDeviceTypeNP,0x8302
WdfDevStatePowerCheckParentState,0x303
WdfDevStatePowerCheckParentStateNP,0x8304
WdfDevStatePowerEnablingWakeAtBus,0x305
WdfDevStatePowerEnablingWakeAtBusNP,0x8306
WdfDevStatePowerD0,0x307
WdfDevStatePowerD0NP,0x8308
WdfDevStatePowerD0BusWakeOwner,0x309
WdfDevStatePowerD0BusWakeOwnerNP,0x830A
WdfDevStatePowerD0ArmedForWake,0x30B
WdfDevStatePowerD0ArmedForWakeNP,0x830C
WdfDevStatePowerD0DisarmingWakeAtBus,0x30D
WdfDevStatePowerD0DisarmingWakeAtBusNP,0x830E
WdfDevStatePowerD0Starting,0x30F
WdfDevStatePowerD0StartingConnectInterrupt,0x310
WdfDevStatePowerD0StartingDmaEnable,0x311
WdfDevStatePowerD0StartingStartSelfManagedIo,0x312
WdfDevStatePowerDecideD0State,0x313
WdfDevStatePowerGotoD3Stopped,0x314
WdfDevStatePowerStopped,0x315
WdfDevStatePowerStartingCheckDeviceType,0x316
WdfDevStatePowerStartingChild,0x317
WdfDevStatePowerDxDisablingWakeAtBus,0x318
WdfDevStatePowerDxDisablingWakeAtBusNP,0x8319
WdfDevStatePowerGotoDx,0x31A
WdfDevStatePowerGotoDxNP,0x831B
WdfDevStatePowerGotoDxIoStopped,0x31C
WdfDevStatePowerGotoDxIoStoppedNP,0x831D
WdfDevStatePowerGotoDxNPFailed,0x831E
WdfDevStatePowerDx,0x31F
WdfDevStatePowerDxNP,0x8320
WdfDevStatePowerGotoDxArmedForWake,0x321
WdfDevStatePowerGotoDxArmedForWakeNP,0x8322
WdfDevStatePowerGotoDxIoStoppedArmedForWake,0x323
WdfDevStatePowerGotoDxIoStoppedArmedForWakeNP,0x8324
WdfDevStatePowerDxArmedForWake,0x325
WdfDevStatePowerDxArmedForWakeNP,0x8326
WdfDevStatePowerCheckParentStateArmedForWake,0x327
WdfDevStatePowerCheckParentStateArmedForWakeNP,0x8328
WdfDevStatePowerWaitForParentArmedForWake,0x329
WdfDevStatePowerWaitForParentArmedForWakeNP,0x832A
WdfDevStatePowerStartSelfManagedIo,0x32B
WdfDevStatePowerStartSelfManagedIoNP,0x832C
WdfDevStatePowerStartSelfManagedIoFailed,0x32D
WdfDevStatePowerStartSelfManagedIoFailedNP,0x832E
WdfDevStatePowerWaitForParent,0x32F
WdfDevStatePowerWaitForParentNP,0x8330
WdfDevStatePowerWakePending,0x331
WdfDevStatePowerWakePendingNP,0x8332
WdfDevStatePowerWaking,0x333
WdfDevStatePowerWakingNP,0x8334
WdfDevStatePowerWakingConnectInterrupt,0x335
WdfDevStatePowerWakingConnectInterruptNP,0x8336
WdfDevStatePowerWakingConnectInterruptFailed,0x337
WdfDevStatePowerWakingConnectInterruptFailedNP,0x8338
WdfDevStatePowerWakingDmaEnable,0x339
WdfDevStatePowerWakingDmaEnableNP,0x833A
WdfDevStatePowerWakingDmaEnableFailed,0x33B
WdfDevStatePowerWakingDmaEnableFailedNP,0x833C
WdfDevStatePowerReportPowerUpFailedDerefParent,0x33D
WdfDevStatePowerReportPowerUpFailed,0x33E
WdfDevStatePowerPowerFailedPowerDown,0x33F
WdfDevStatePowerReportPowerDownFailed,0x340
WdfDevStatePowerInitialConnectInterruptFailed,0x341
WdfDevStatePowerInitialDmaEnableFailed,0x342
WdfDevStatePowerInitialSelfManagedIoFailed,0x343
WdfDevStatePowerInitialPowerUpFailedDerefParent,0x344
WdfDevStatePowerInitialPowerUpFailed,0x345
WdfDevStatePowerDxStoppedDisarmWake,0x346
WdfDevStatePowerDxStoppedDisarmWakeNP,0x8347
WdfDevStatePowerGotoDxStoppedDisableInterruptNP,0x8348
WdfDevStatePowerGotoDxStopped,0x349
WdfDevStatePowerDxStopped,0x34A
WdfDevStatePowerGotoStopped,0x34B
WdfDevStatePowerStoppedCompleteDx,0x34C
WdfDevStatePowerDxStoppedDecideDxState,0x34D
WdfDevStatePowerDxStoppedArmForWake,0x34E
WdfDevStatePowerDxStoppedArmForWakeNP,0x834F
WdfDevStatePowerFinalPowerDownFailed,0x350
WdfDevStatePowerFinal,0x351
WdfDevStatePowerNull,0x352
}
#enumv _WDF_POWER_DEVICE_STATE
{
WdfPowerDeviceInvalid,0x0
WdfPowerDeviceD0,0x1
WdfPowerDeviceD1,0x2
WdfPowerDeviceD2,0x3
WdfPowerDeviceD3,0x4
WdfPowerDeviceD3Final,0x5
WdfPowerDevicePrepareForHibernation,0x6
WdfPowerDeviceMaximum,0x7
}
#enumv FxPowerEvent
{
PowerEventInvalid,0x0
PowerD0,0x1
PowerDx,0x2
PowerWakeArrival,0x4
PowerWakeSucceeded,0x8
PowerWakeFailed,0x10
PowerWakeCanceled,0x20
PowerImplicitD0,0x40
PowerImplicitD3,0x80
PowerParentToD0,0x100
PowerMarkPageable,0x200
PowerMarkNonpageable,0x400
PowerCompleteD0,0x800
PowerCompleteDx,0x1000
PowerPriorityEventsMask,0x1900
PowerSingularEventMask,0x100
PowerEventMaximum,0xFF
}
950bd909-4e9f-8c00-5d83-948120fba76d e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv FxSelfManagedIoStates
{
FxSelfManagedIoInvalid,0x0
FxSelfManagedIoCreated,0x1
FxSelfManagedIoInit,0x2
FxSelfManagedIoInitFailed,0x3
FxSelfManagedIoStarted,0x4
FxSelfManagedIoSuspending,0x5
FxSelfManagedIoStopped,0x6
FxSelfManagedIoRestarting,0x7
FxSelfManagedIoFailed,0x8
FxSelfManagedIoFlushing,0x9
FxSelfManagedIoFlushed,0xA
FxSelfManagedIoCleanup,0xB
FxSelfManagedIoFinal,0xC
FxSelfManagedIoMax,0xD
}
1544b078-9aeb-60c4-a2eb-c917200e913f e:\5359.obj.x86fre\minkernel\wdf\framework\kmdf\src\dynamic\version\version\objfre\i386\Wdf01000.pdb
#enumv _WDF_INTERRUPT_POLICY
{
WdfIrqPolicyMachineDefault,0x0
WdfIrqPolicyAllCloseProcessors,0x1
WdfIrqPolicyOneCloseProcessor,0x2
WdfIrqPolicyAllProcessorsInMachine,0x3
WdfIrqPolicySpecifiedProcessors,0x4
WdfIrqPolicySpreadMessagesAcrossAllProcessors,0x5
}
#enumv _WDF_INTERRUPT_PRIORITY
{
WdfIrqPriorityUndefined,0x0
WdfIrqPriorityLow,0x1
WdfIrqPriorityNormal,0x2
WdfIrqPriorityHigh,0x3
}
