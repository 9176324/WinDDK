<?xml version="1.0"?>
<component>

<?component error="true" debug="true"?>

<comment>
	This component is responsible for maintaining a list of defect definitions,
	which is fairly static. This component is also responsible for the sorting
	of this list, including the persistence of the sort preferences.
</comment>

<registration
	description="PREfast Defect Definitions"
	progid="PREfast.DefectDefs"
	version="1.00"
	classid="{bbb699cb-e53c-4298-824b-99cea70d052f}"
>
</registration>

<public>
	<property name="defectDefNodes"><get /></property>
	<property name="sortKeys"      ><get /></property>

    <method name="FinalConstruct">
        <parameter name="funcCreateObject" />
        <parameter name="objPREfast" />
    </method>

	<method name="exists">
		<parameter name="strID" />
	</method>

	<method name="enableFromFilter">
		<parameter name="objFilter" />
	</method>

	<method name="helpURL">
		<parameter name="defectcode" />
	</method>

    <method name="connectEvents">
        <parameter name="objListener" />
    </method>

	<event name="onSortKeysChanged" />
	<event name="onEnabledChanged" />
</public>

<script language="JScript">
<![CDATA[
/////////////////////////////////////////////////////////////////////////////
// Beginning of script block
//

/////////////////////////////////////////////////////////////////////////////
// Construction
var description = new PREfastDefectDefinitions;
function PREfastDefectDefinitions()
{
	// Initialize the class
	this.get_defectDefNodes = get_defectDefNodes;
	this.get_sortKeys = get_sortKeys;
    this.FinalConstruct = FinalConstruct;
	this.exists = exists;
	this.enableFromFilter = enableFromFilter;
    this.connectEvents = connectEvents;

    m_objListeners = new Array();

}

function FinalConstruct( funcCreateObject, objPREfast )
{
    m_funcCreatePREfastObject = funcCreateObject;
    m_objPREfast = objPREfast;
    m_objSortKeys = m_funcCreatePREfastObject("PREfast.SortKeys");
    m_objSortKeys.connectEvents(this);

	// Load the product defect definitions
	LoadDefectDefs(m_objPREfast.ScriptsDirectory + "\\DefectUI\\DefectDefs.xml",
			   	   m_objPREfast.ScriptsDirectory + "\\DefectUI\\DefectVersion.txt", m_doc);
				   
	// Initialize the PREfast.SortKeys object
	m_objSortKeys.init("number(@id);@id\nnumber(@enabled)\ndisplay", "number(@id);@id",
		"number(@id);@id", "DefectUI\\Filters\\SortKeys");

	// Sort the defect defs
	SortDefectDefs();
}

function connectEvents( objListener )
{
    m_objListeners.push( objListener );
}

function LoadDefectDefs(strDefectFile, strVersionFile, doc)
{
	var objFSO = new ActiveXObject("Scripting.FileSystemObject");		
	var fCreateDefectDefs = false;
	var strPREfastVersion = m_objPREfast.InstalledBuildNumber; 
	
	if (!objFSO.FileExists(strDefectFile))
	{
		fCreateDefectDefs = true;
	}
	else if (!objFSO.FileExists(strVersionFile))
	{
		fCreateDefectDefs = true;
	}
	else
	{
		var objFile = objFSO.GetFile(strVersionFile);
		var objTS = objFile.OpenAsTextStream(1, 0);
		var strDefectVersion = objTS.ReadLine().replace(/\s/g, "");		
		
		if (strPREfastVersion != strDefectVersion)
		{
			fCreateDefectDefs = true;  
		}
	}	
	
    if (fCreateDefectDefs)
    {
        // Concatenate the Defect Defs file if it does not exist
        try
        {
            var strCommand = '"' + objFSO.BuildPath( m_objPREfast.ScriptsDirectory, "pftutil.exe" ) + '"';
            strCommand += ' concatenate "' + strDefectFile + '"';
            m_wsh.Run( strCommand, 7, true );
			
			// Update the defect version file
			var objTSOut = objFSO.CreateTextFile(strVersionFile, true);
			objTSOut.WriteLine(strPREfastVersion);

			// Close the output text stream
			objTSOut.Close();
        }
        catch (e)
        {
            return false;
        }
    }

	// Attempt to load the specified file
	if (!doc.load(strDefectFile))
		return false;

	// Get the main element of the main document
	var elemDefectDefs = m_doc.selectSingleNode("DefectDefs");
		
	// Process all defect definitions
	var defs = doc.selectNodes("DefectDefs//DefectDef");
	var cDefs = defs.length;
	for (var i = 0; i < cDefs; ++i)
	{
		var def = defs(i);
		def.setAttribute("enabled", true);
		m_dict(def.selectSingleNode("@id").text) = true;

		// Create the description element for each def
		var strDesc = GetDisplayString(def);
		if (!strDesc.length)
			strDesc = "(no description)";

		var elem = doc.createElement("display");
		elem.text = strDesc;
		def.appendChild(elem);

		// Move the defect def into the main document
		if (doc != m_doc)
			elemDefectDefs.appendChild(def);
	}

	// Indicate success
	return true;
}

function GetDisplayString(def)
{
	// Lookup the needed parts of the defect definition
	var strDescription = GenerateDisplay(def, "description");
	var strAdditionalInfo = GenerateDisplay(def, "additionalInfo");
	if (strAdditionalInfo.length)
		strDescription += ": " + strAdditionalInfo + ".";
    else 
        strDescription += ".";

	return strDescription;
}


/////////////////////////////////////////////////////////////////////////////
//
function GenerateDisplay(def, strField, nIndex)
{
	var arr = GenerateDisplayArray(def, strField, nIndex);
	var str = "";
	if (arr)
	{
		for (var i in arr)
			str += arr[i].text;
	}
	else
	{
		@set @ENABLE_DEFECTDEF_1_0_COMPATIBILITY = 1
		@if (@ENABLE_DEFECTDEF_1_0_COMPATIBILITY)
		{
			if ("description" == strField)
			{
				format = def.selectSingleNode("display");
				if (!format)
					format = def.selectSingleNode("format");
				if (format)
					return format.text;
			}
		}
		@end // @ENABLE_DEFECTDEF_1_0_COMPATIBILITY

		// Return an empty string
		return "";
	}

	// Make the first character uppercase
	str = str.charAt(0).toUpperCase() + str.substr(1);

	// Remove any extra spaces
	var re = /\s{2,}/g;
	return str.replace(re, " ");
}


/////////////////////////////////////////////////////////////////////////////
//
function GenerateDisplayArray(def, strField, nIndex)
{
	// Set the default value of nIndex, if not specified
	if (!nIndex)
		nIndex = 0;

	// Get the specified element within the <DefectDef> element
	var strPattern = strField + "[" + nIndex + "]";
	var field = def.selectSingleNode(strPattern);

	// Return an empty array when the specified field does not exist as an element	
	if (!field)
		return null;

	// The element must have a <format> subelement
	var format = field.selectSingleNode("format");
	var strFormat = format.text;

	// Break the format string into %-delimited tokens
	var arr = new Array;
	var re = /%([A-Za-z_][A-Za-z0-9_]*)%/;
	var rg;
	do
	{
		rg = re.exec(strFormat);
		if (rg)
		{
			// Insert the next string part
			var item = new Object;
			item.isParam = false;
			item.text = strFormat.substr(0, rg.index);
			arr[arr.length] = item;

			// Create the default display name for the parameter
			var strParamDisplay = "<" + rg[1] + ">";
			var strParamName    = rg[1];

			// Lookup the parameter's replacement text
			var param = field.selectSingleNode("param[@name='" + strParamName + "']");
			var attrDisplay = param.getAttributeNode("display");
			if (attrDisplay)
				strParamDisplay = attrDisplay.text;

			// Insert the parameter
			var item = new Object;
			item.isParam = true;
			item.text = strParamDisplay;
			item.name = strParamName;
			arr[arr.length] = item;

			// Pull-out the right side of the match
			strFormat = strFormat.substr(rg.lastIndex);
		}
		else
		{
			// Insert the remainder of the string
			var item = new Object;
			item.isParam = false;
			item.text = strFormat;
			arr[arr.length] = item;
		}

	} while (rg);

	// Return the array
	return arr;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_defectDefNodes()
{
	// Return the defect defs nodes
	return m_doc.selectNodes("DefectDefs//DefectDef");	
}


/////////////////////////////////////////////////////////////////////////////
//
function get_sortKeys()
{
	return m_objSortKeys;
}


/////////////////////////////////////////////////////////////////////////////
//
function exists(strID)
{
	return m_dict.Exists(strID);
}


/////////////////////////////////////////////////////////////////////////////
//
function enableFromFilter(objFilter)
{
	// Set the "enabled" attribute to match the specified filter
	var fChanged = false;
	var defs = get_defectDefNodes();
	var cDefs = defs.length;
	for (var i = 0; i < cDefs; ++i)
	{
		var def = defs(i);
		var strID = def.selectSingleNode("@id").text;
		var fIsEnabled = objFilter.isEnabled(strID);
		var varAttr = def.getAttribute("enabled");

		if ("" == varAttr)
			fChanged = true;
		else if (new Boolean(varAttr) != fIsEnabled)
			fChanged = true;
		def.setAttribute("enabled", fIsEnabled);
	}

	// Fire an event if anything changed
	if (fChanged)
		fireOnEnabledChanged();
}


/////////////////////////////////////////////////////////////////////////////
//
function helpURL(defectcode)
{
	return "";
}

/////////////////////////////////////////////////////////////////////////////
// Firing Events
function fireOnEnabledChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectDefs_onEnabledChanged ) )
            m_objListeners[i].DefectDefs_onEnabledChanged();
    }
}

function fireOnSortKeysChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectDefs_SortKeysChanged ) )
            m_objListeners[i].DefectDefs_SortKeysChanged();
    }
}

/////////////////////////////////////////////////////////////////////////////
// Event Handlers


/////////////////////////////////////////////////////////////////////////////
//
function SortKeys_onChange()
{
	// Sort the defect defs
	SortDefectDefs();

	// Reflect the event
	fireOnSortKeysChanged();
}


/////////////////////////////////////////////////////////////////////////////
// Implementation


/////////////////////////////////////////////////////////////////////////////
//
function SortDefectDefs()
{
	// Get the style sheet for sorting
	var xslSortDefs = m_objPREfast.GetXMLWithinWSC("pftDefectDefs.wsc", "xslSortDefs");

	// Modify the XSL with the sort string
	var elemForEach =
		xslSortDefs.selectSingleNode("//xsl:for-each[@select='.//DefectDef']");
	elemForEach.setAttribute("order-by", m_objSortKeys.currentKeyString);

	// Move all of the defect defs into a temporary DOM
	var xmlTemp = new ActiveXObject("Microsoft.XMLDOM");
	for (var e = new Enumerator(m_doc.childNodes); !e.atEnd(); e.moveNext())
		xmlTemp.appendChild(e.item());

	// Transform to arrive at the filtered and sorted set
	xmlTemp.documentElement.transformNodeToObject(xslSortDefs, m_doc);
}


/////////////////////////////////////////////////////////////////////////////
// Data Members

var m_objPREfast;
var m_objSortKeys;

var m_funcCreatePREfastObject;

// Members to send events to
var m_objListeners;

//
// End of script block
/////////////////////////////////////////////////////////////////////////////
]]>
</script>

<object id="m_doc"         progid="Microsoft.XMLDOM"                      />
<object id="m_dict"        progid="Scripting.Dictionary"                  />
<object id="m_wsh"         progid="WScript.Shell"                         />
<comment>
    These objects now have to become ordinary members in order to load by
    path rather than ProgID
    <object id="m_objPREfast"  progid="PREfast.ExecEnvironment"               />
    <object id="m_objSortKeys" progid="PREfast.SortKeys"        events="true" />
</comment>


<comment>
	This block is where all private XML trees are placed. Although WSC's
	don't explicitly support putting free-form markup within a component,
	putting it within a comment element seems to work just fine.

	/////////////////////////////////////////////////////////////////////////
	// Identity transform that will be modified to sort the defect defs
	//
	<XML id="xslSortDefs">
		<xsl:stylesheet xmlns:xsl="http://www.w3.org/TR/WD-xsl">

			<!-- default template: copy all nodes, attributes, text -->
			<xsl:template><xsl:copy><xsl:apply-templates select="@* | * | text() | comment() | pi()" /></xsl:copy></xsl:template>

			<!-- special-case the <DefectDefs> node -->
			<xsl:template match="DefectDefs">
				<xsl:copy>
					<xsl:for-each select=".//DefectDef" order-by="number(@id)">
						<xsl:copy><xsl:apply-templates select="@* | * | text() | comment() | pi()" /></xsl:copy>
					</xsl:for-each>
				</xsl:copy>
			</xsl:template>

		</xsl:stylesheet>
	</XML>

</comment>

</component>
