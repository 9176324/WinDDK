<?xml version="1.0"?>
<component>

<?component error="true" debug="true"?>

<comment>
</comment>

<registration
	description="PREfast Defect Filter Presets"
	progid="PREfast.DefectFilterPresets"
	version="1.00"
	classid="{91404F3F-2861-4801-BBB4-318BFDB2797C}"
>
</registration>

<public>
	<property name="presetNames"            ><get />       </property>
	<property name="selectedPreset"         ><get /><put /></property>
	<property name="defectDefinitions"      ><get />       </property>
	<property name="defectRegExpDefinitions"><get />       </property>
    
	<method name="item" dispid="0">
		<parameter name="varFilter" />
	</method>

    <method name="FinalConstruct">
        <parameter name="funcCreateObject" />
        <parameter name="objPREfast" />
    </method>

    <method name="connectEvents">
        <parameter name="objListener" />
    </method>

	<event name="onSelChanged"      />
	<event name="onSortKeysChanged" />
</public>

<script language="JScript">
<![CDATA[
/////////////////////////////////////////////////////////////////////////////
// Beginning of script block
//

/////////////////////////////////////////////////////////////////////////////
// Construction
var description = new PREfastDefectFilterPresets;
function PREfastDefectFilterPresets()
{
	// Initialize the class
	this.get_presetNames = get_presetNames;
	this.get_selectedPreset = get_selectedPreset;
	this.put_selectedPreset = put_selectedPreset;
	this.get_defectDefinitions = get_defectDefinitions;
	this.get_defectRegExpDefinitions = get_defectRegExpDefinitions;
	this.item = item;
    this.FinalConstruct = FinalConstruct;
    this.connectEvents = connectEvents;

    m_objListeners = new Array();
}

function FinalConstruct( funcCreateObject, objPREfast )
{
    m_funcCreatePREfastObject = funcCreateObject;
    m_objPREfast = objPREfast;
    m_objDefectDefs = funcCreateObject("PREfast.DefectDefs");
    m_objDefectDefs.connectEvents( this );

    m_objDefectRegExpDefs = funcCreateObject("PREfast.DefectRegExpDefs");
    m_objDefectRegExpDefs.connectEvents( this );

    m_objFilterCustom = funcCreateObject("PREfast.DefectFilter");
    
	// Load the defect filter presets
	LoadDefectFilterPresets();
}

function connectEvents( objListener )
{
    m_objListeners.push( objListener );
}

/////////////////////////////////////////////////////////////////////////////
// Properties

/////////////////////////////////////////////////////////////////////////////
//
function get_presetNames()
{
	var arr = (new VBArray(m_objFilters.Keys())).toArray();
	return arr.join('\n');
}

/////////////////////////////////////////////////////////////////////////////
//
function get_selectedPreset()
{
	return m_objFilterSelected;
}

/////////////////////////////////////////////////////////////////////////////
//
function put_selectedPreset(varFilter)
{
	var strRegPath = m_objPREfast.RegistryKey + "DefectUI\\Filters\\";

	// Find a matching preset
	var objFilter = item(varFilter);

	// Use the (custom) preset if it doesn't match a known one
	if (typeof(objFilter) == typeof(varFilter) && objFilter == varFilter)
	{
        var objCustom = item("(custom)");

        if ( objCustom )
        {        
		    objFilter.copyTo(objCustom);
		    objFilter = objCustom;
		    objFilter.name = "(custom)";
        }
        else
        {
            // (custom) should have been created already, but if not, do it here
            objFilter = CreateFilter( "(custom)", objFilter.excludeWarnings, objFilter.excludeRegExps, false );
        }

		// Persist the details of the (custom) preset
        try
        {
		    m_objShell.RegWrite(strRegPath + "(custom)\\Exclude",
			    objFilter.excludeWarnings + ";" + objFilter.excludeRegExps);
        }
        catch(e)
        {
            // forget about it if we can't write to the registry
        }
	}
	else
	{
		// Do nothing if selection has not changed
		if (m_objFilterSelected.isEquivalent(objFilter))
			return;
	}

	m_objFilterSelected = objFilter;

	// Persist the name of the selected preset
    try
    {
	    m_objShell.RegWrite(m_objPREfast.RegistryKey + "SavedSwitches\\FILTERPRESET\\", m_objFilterSelected.name);
    }
    catch (e) 
    {
        // forget about it if we can't write to the registry
    }

	// Set the 'enabled' attribute to match the current filter
	get_defectDefinitions().enableFromFilter(m_objFilterSelected);
	get_defectRegExpDefinitions().enableFromFilter(m_objFilterSelected);

	// Fire an event
	fireOnSelChanged();
}

/////////////////////////////////////////////////////////////////////////////
//
function get_defectDefinitions()
{
	return m_objDefectDefs;
}

/////////////////////////////////////////////////////////////////////////////
//
function get_defectRegExpDefinitions()
{
	return m_objDefectRegExpDefs;
}

function item(varFilter)
{
	var objFilter;
	if ("string" == typeof(varFilter))
	{
		if (m_objFilters.Exists(varFilter))
			return m_objFilters(varFilter);
		return null;
	}
	else
	{
		// Determine if the specified filter matches one of the known ones
		var fPreset = false;
		var arr = (new VBArray(m_objFilters.Keys())).toArray();
		for (var i in arr)
		{
			var strPresetName = arr[i];
			var filter = m_objFilters(strPresetName);
			if (filter.isEquivalent(varFilter))
				return filter;
		}
	}

	// Return the specified filter if it doesn't match a preset
	return varFilter;
}


/////////////////////////////////////////////////////////////////////////////
// Implementation

/////////////////////////////////////////////////////////////////////////////
//
function LoadDefectFilterPresets()
{
    var preset;
    var strName;
    var strExcludeWarnings;
    var strExcludeRegExps;

	// Get the presets
	var presets = m_objDefectRegExpDefs.presetDefinitions;
	var cPresets = presets.length;
	for (var i = 0; i < cPresets; ++i)
	{
		preset = presets(i);
		strName = preset.getAttribute("name");
        strExcludeWarnings = GetXMLText( preset, "excludeWarnings",  "");
		strExcludeRegExps = GetXMLText( preset, "excludeRegExps", "");
        if ( "1" == preset.getAttribute("recommended"))
            strExcludeRegExps += m_objDefectRegExpDefs.recommendedIDs;
        var bInvert = ( "1" == preset.getAttribute("invert") );
		CreateFilter(strName, strExcludeWarnings, strExcludeRegExps, true, bInvert);
	}

	// Get the name of the previously selected filter
	var strFilterSelected;
    var objEnvironment = m_objShell.Environment("Process");
    strFilterSelected = objEnvironment("PREFAST_FILTER_PRESET")
    if (!strFilterSelected)
    {
	    try
	    {
		    strFilterSelected = m_objShell.RegRead(m_objPREfast.RegistryKey + "SavedSwitches\\FILTERPRESET\\");                       
	    }
	    catch (e)
	    {
	    }
    }

	// Set the initially selected filter
    m_objFilterSelected = item(strFilterSelected); 

	if (!m_objFilterSelected)
		m_objFilterSelected = item(m_objDefectRegExpDefs.defaultPreset);

    // If the custom filter doesn't exist, make it match the initially selected filter
    if ( !item("(custom)") )
    {
        if ( m_objFilterSelected )
            CreateFilter("(custom)", m_objFilterSelected.excludeWarnings, m_objFilterSelected.excludeRegExps, false );
        else
            m_objFilterSelected = CreateFilter("(custom)", "", "", false, false );

    }

	// Set the 'enabled' attribute to match the current filter
	get_defectDefinitions().enableFromFilter(m_objFilterSelected);
	get_defectRegExpDefinitions().enableFromFilter(m_objFilterSelected);
}

function GetXMLText(elem, strPattern, strDefault)
{
	try
	{
		return elem.selectSingleNode(strPattern).text;
	}
	catch (e)
	{
		return strDefault;
	}
}


function CreateFilter(strPreset, strExcludeWarnings, strExcludeRegExps, fReadOnly, fInvert)
{
	// Create a PREfast.DefectFilter object
	var objFilter = m_funcCreatePREfastObject("PREfast.DefectFilter");
	objFilter.init(m_objDefectDefs, m_objDefectRegExpDefs, strPreset,
		strExcludeWarnings, strExcludeRegExps, fReadOnly, fInvert);

	// Save the filter object in a dictionary by name
	m_objFilters(strPreset) = objFilter;
    
    return objFilter;
}

/////////////////////////////////////////////////////////////////////////////
//
function fireOnSelChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectFilterPresets_onSelChanged ) )
            m_objListeners[i].DefectFilterPresets_onSelChanged();
    }
}

function fireOnSortKeysChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectFilterPresets_onSortKeysChanged ) )
            m_objListeners[i].DefectFilterPresets_onSortKeysChanged();
    }
}

/////////////////////////////////////////////////////////////////////////////
// Event Handlers

function DefectDefs_onSortKeysChanged()
{
	// Reflect the event
    fireOnSortKeysChanged();
}


function DefectRegExpDefs_onSortKeysChanged()
{
    // Reflect the event
    fireOnSortKeysChanged();
}

/////////////////////////////////////////////////////////////////////////////
// Data Members

var m_objFilterSelected;

var m_funcCreatePREfastObject;
var m_objPREfast;
var m_objDefectDefs;
var m_objDefectRegExpDefs;
var m_objFilterCustom;

var m_objListeners;

//
// End of script block
/////////////////////////////////////////////////////////////////////////////
]]>
</script>

<object id="m_objShell"            progid="WScript.Shell"            />
<object id="m_objFilters"          progid="Scripting.Dictionary"     />

<comment>
    These objects now have to become ordinary members in order to load by
    path rather than ProgID

    <object id="m_objPREfast"          progid="PREfast.ExecEnvironment"  />
    <object id="m_objDefectDefs"       progid="PREfast.DefectDefs"       events="true" />
    <object id="m_objDefectRegExpDefs" progid="PREfast.DefectRegExpDefs" events="true" />
    <object id="m_objFilterCustom"     progid="PREfast.DefectFilter"     />
</comment>

<comment>
	This block is where all private XML trees are placed. Although WSC's
	don't explicitly support putting free-form markup within a component,
	putting it within a comment element seems to work just fine.

</comment>

</component>
