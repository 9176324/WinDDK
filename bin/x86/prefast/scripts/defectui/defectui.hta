<HTML>

<HEAD>
	<title>PREfast Defect Log</title>

	<HTA:APPLICATION ID="oHTA"
	  APPLICATIONNAME="DefectUI"
	  BORDER="thick"
	  BORDERSTYLE="normal"
	  CAPTION="yes"
	  ICON="images/DefectUI.ico"
	  MAXIMIZEBUTTON="yes"
	  MINIMIZEBUTTON="yes"
	  SHOWINTASKBAR="yes"
	  SINGLEINSTANCE="no"
	  SYSMENU="yes"
	  VERSION="1.0"
	/>

</HEAD>

<SCRIPT>

	function contentWindow(frameElement)
	{
		// The contentWindow property works in IE >= 5.5
		if (frameElement.contentWindow)
			return frameElement.contentWindow;

		var strIndex = frameElement.name;
		if (!strIndex || !strIndex.length)
			strIndex = frameElement.id;

		return frameElement.document.frames(strIndex);
	}


	// State variables
	var g_fShowOnlyFunction = true;
	var g_fso;
	var g_arrPathTranslations = new Array();

	// Cached DHTML objects
	var g_theFrameSet;
	var g_defectControlFrame;
	var g_defectFrame;
	var g_listControlFrame; 
	var g_listFrame;

    var g_objPREfast;

	function GetShowOnlyFunction()
	{
		return g_fShowOnlyFunction;
	}

	function ShowOnlyFunction(fOnlyFunction)
	{
		if (!!g_fShowOnlyFunction == !!fOnlyFunction)
			return;

		g_fShowOnlyFunction = !!fOnlyFunction;
		contentWindow(g_defectFrame).GetViewFrame().HideShowBeforeAndAfterFunc(!GetShowOnlyFunction());
	}

	function GetPathTranslations()
	{
		return g_arrPathTranslations;
	}

	function GetFileSystemObject()
	{
		if (!g_fso)
			g_fso = new ActiveXObject("Scripting.FileSystemObject");
		return g_fso;
	}

	function GetSelectedDefect()
	{
		return g_listFrame ? contentWindow(g_listFrame).GetSelectedDefect() : null;
	}

	function ShowPrevInList()
	{
		if (g_listFrame)
		{
			if (contentWindow(g_listFrame).SelectPreviousDefect())
				ShowDefectView();
		}
	}

	function ShowNextInList()
	{
		if (g_listFrame)
		{
			if (contentWindow(g_listFrame).SelectNextDefect())
				ShowDefectView();
		}
	}

	function ShowDefectView()
	{
		// Reload the defect frame
		contentWindow(g_defectFrame).GetViewFrame().document.location.reload();

		// Once the defect frame has reloaded, continue display changes
		window.setTimeout(ShowDefectView_cont, 0);
	}

	function ShowDefectView_cont()
	{
		g_defectFrame.style.display = "";
		g_theFrameSet.rows = "0,0,62,*";
		g_listFrame.style.display = "none";
		ScrollList();

		g_listControlFrame.tabIndex   = "-1";
		g_listFrame.tabIndex          = "-1";
		g_defectControlFrame.tabIndex = "1";
		g_defectFrame.tabIndex        = "1";
		g_defectFrame.focus();
		contentWindow(g_defectFrame).focus();
	}

	function ShowFilterButton(fShow)
	{
		contentWindow(g_listControlFrame).ShowFilterButton(fShow);
	}

	function ShowFilter(fShow)
	{
		contentWindow(g_listFrame).ShowFilter(fShow);
	}

	function ShowList()
	{
		g_listFrame.style.display = "";
		g_theFrameSet.rows = "62,*,0,0";
		g_defectFrame.style.display = "none";

		g_listControlFrame.tabIndex   =  "1";
		g_listFrame.tabIndex          =  "1";
		g_defectControlFrame.tabIndex = "-1";
		g_defectFrame.tabIndex        = "-1";
		g_listFrame.focus();
		contentWindow(g_listFrame).focus();
		contentWindow(g_listFrame).theList.focus();

		ScrollList();
	}

	function ScrollList()
	{
		// Update text of control frames
		UpdateDefectCountText();

		// Ensure that the selected list item is in view
		if (contentWindow(g_listFrame).theList.object.SelectedItem)
			contentWindow(g_listFrame).theList.object.SelectedItem.EnsureVisible();
	}

	function UpdateDefectCountText()
	{
		var listWindow = contentWindow(g_listFrame);
		var cDefects = listWindow.GetTotalDefectCount();
		var cDefectsFiltered = listWindow.GetFilteredDefectCount();
		var str;
		if (listWindow.GetSelectedDefect())
			str = "Defect&nbsp;" + (listWindow.GetSelectedDefect().getAttribute("_seq")) + "&nbsp;of&nbsp;" + cDefects;
		else if (cDefects != 1)
			str = cDefects + "&nbsp;Defects";
		else
			str = "1&nbsp;Defect";

		if (listWindow.IsFilterInEffect())
			str += "<br />Filter&nbsp;Matches&nbsp;" + cDefectsFiltered;
		else
			str += "<br />No&nbsp;Filter";

		contentWindow(g_listControlFrame).UpdateDefectCountText(str);
		contentWindow(g_defectControlFrame).UpdateDefectCountText(str);
	}
    
	function theFrameSet_onload()
	{
		// Cache several DHTML objects
		g_theFrameSet        = document.all(       "theFrameSet");
		g_defectControlFrame = document.all("defectControlFrame");
		g_defectFrame        = document.all(       "defectFrame");
		g_listControlFrame   = document.all(  "listControlFrame");
		g_listFrame          = document.all(         "listFrame");

		// Load the build number
		g_objPREfast = GuardedCreatePREfastObject("PREfast.ExecEnvironment");

		// Show the version string in the control frames
		var strVersion = g_objPREfast.ComposeVersionString(g_objPREfast.InstalledBuildNumber);
		contentWindow(g_defectControlFrame).UpdateVersionText(strVersion);
		contentWindow(g_listControlFrame).UpdateVersionText(strVersion);

		// Allow the list frame to begin its work
		contentWindow(g_listFrame).InitialUpdate();
	}

    var g_dictPREfastObjects = null;
    var g_objFSO = new ActiveXObject("Scripting.FileSystemObject");
    var g_objProcEnv = new ActiveXObject("WScript.Shell").Environment("Process");

    /////////////////////////////////////////////////////////////////////////////
    //
    function GuardedCreatePREfastObject(strProgID)
    {
        try
        {
            if ( null == g_dictPREfastObjects )
            {
                g_dictPREfastObjects = new ActiveXObject( "Scripting.Dictionary" );
                g_dictPREfastObjects("PREfast.ExecEnvironment") = "pftExecEnv.wsc";
                g_dictPREfastObjects("PREfast.DefectSet") = "pftDefectSet.wsc";
                g_dictPREfastObjects("PREfast.DefectFilterPresets") = "pftDefectFilterPresets.wsc";
                g_dictPREfastObjects("PREfast.ModuleInfoCollection2") = "Util.dll";
                g_dictPREfastObjects("PREfast.SortKeys") = "pftSortKeys.wsc";
                g_dictPREfastObjects("PREfast.DefectFilter") = "pftDefectFilter.wsc";
                g_dictPREfastObjects("PREfast.DefectRegExpDefs") = "pftDefectRegExpDefs.wsc";
                g_dictPREfastObjects("PREfast.DefectDefs") = "pftDefectDefs.wsc";
            }

            var strFileName = g_dictPREfastObjects(strProgID);
            if ( null == strFileName )
                throw "Unknown PREfast component " + strProgID + "\n";

            var strPath = g_objProcEnv("PREFAST_ROOT");
    	    var fDevEnv = false;
	        if (g_objProcEnv("PREFAST_DEVENV"))
		        if (0 != (new Number(g_objProcEnv("PREFAST_DEVENV"))))
			        fDevEnv = true;

            if ( fDevEnv )
                strPath = g_objFSO.BuildPath( strPath, "bin\\scripts" );
            else
                strPath = g_objFSO.BuildPath( strPath, "scripts" );
            strPath = g_objFSO.BuildPath( strPath, strFileName );
            if ( !g_objFSO.FileExists( strPath ) )
                throw "Required PREfast file '" + strPath + "' does not exist\n";

            var strArg = "script:" + strPath;
            var objNew = GetObject( strArg );

            if ( "undefined" != typeof( objNew.FinalConstruct ) )
                objNew.FinalConstruct( GuardedCreatePREfastObject, g_objPREfast );

            return objNew;
        }
        catch ( e )
        {
            throw e;
        }
    }

</SCRIPT>

<frameset name="theFrameSet" framespacing="0" frameborder="0" rows="62,*,0,0" onload="theFrameSet_onload();">

	<frame name="listControlFrame" scrolling="auto" application="yes" src="frames/listControl.html" noresize="true" tabindex="1" />
	<frame name="listFrame" application="yes" src="frames/list.html" noresize="true" tabindex="1" />

	<frame name="defectControlFrame" application="yes" src="frames/defectControl.html" noresize="true" tabindex="-1" />
	<frame name="defectFrame" application="yes" src="frames/defect.html" noresize="true" style="display:none;" tabindex="-1" />

	<noframes tabindex="-1">
		<body bgcolor="#FFFFFF">
			<p>This page uses frames, but your browser doesn't support them.</p>
		</body>
	</noframes>

</frameset>

</HTML>
