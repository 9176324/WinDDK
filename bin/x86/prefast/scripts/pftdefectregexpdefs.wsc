<?xml version="1.0"?>
<component>

<?component error="true" debug="true"?>

<comment>
	This component is responsible for maintaining a list of defect definitions,
	which is fairly static. This component is also responsible for the sorting
	of this list, including the persistence of the sort preferences.
</comment>

<registration
	description="PREfast Defect Regular Expression Definitions"
	progid="PREfast.DefectRegExpDefs"
	version="1.00"
	classid="{75D080C7-3DC8-405e-9CBF-5AC76C5D3FF6}"
>
</registration>

<public>
	<property name="defectFilterNodes"><get /></property>
	<property name="sortKeys"         ><get /></property>
	<property name="recommendedIDs"   ><get /></property>
    <property name="presetDefinitions"><get /></property>
    <property name="defaultPreset"    ><get /></property>

	<method name="exists">
		<parameter name="strID" />
	</method>

	<method name="enableFromFilter">
		<parameter name="objFilter" />
	</method>

    <method name="FinalConstruct">
        <parameter name="funcCreateObject" />
        <parameter name="objPREfast" />
    </method>

    <method name="connectEvents">
        <parameter name="objListener" />
    </method>

	<event name="onSortKeysChanged" />
	<event name="onEnabledChanged" />

</public>

<script language="JScript">
<![CDATA[
/////////////////////////////////////////////////////////////////////////////
// Beginning of script block
//

/////////////////////////////////////////////////////////////////////////////
// Construction
var description = new PREfastRegExpDefs;
function PREfastRegExpDefs()
{
	// Initialize the class
	this.get_defectFilterNodes = get_defectFilterNodes;
	this.get_sortKeys = get_sortKeys;
	this.get_recommendedIDs = get_recommendedIDs;
    this.get_presetDefinitions = get_presetDefinitions;
    this.get_defaultPreset = get_defaultPreset;
	this.exists = exists;
	this.enableFromFilter = enableFromFilter;
    this.FinalConstruct = FinalConstruct;
    this.connectEvents = connectEvents;

    m_objListeners = new Array();
}

function FinalConstruct( funcCreateObject, objPREfast )
{
    m_objPREfast = objPREfast;
    m_objSortKeys = funcCreateObject("PREfast.SortKeys");
    m_objSortKeys.connectEvents( this );

	// Initialize the PREfast.SortKeys object
	m_objSortKeys.init("number(@enabled)\nnumber(@id);@id\ndisplay",
		"display\nnumber(@id);@id", "number(@id);@id",
		"DefectUI\\Filters\\SortKeysRegExp");

	// Load the defect filter defs
	LoadDefectFilters();

	// Add all filter ID's to a dictionary for quick lookup in exists method
	var defs = m_doc.selectNodes("DefectFilters/Filter");
	var cDefs = defs.length;
	for (var i = 0; i < cDefs; ++i)
	{
		defs(i).setAttribute("enabled", true);
		m_dict(defs(i).selectSingleNode("@id").text) = true;
	}

	// Sort the defect filter defs
	SortDefectFilterDefs();
}

function connectEvents( objListener )
{
    m_objListeners.push( objListener );
}

/////////////////////////////////////////////////////////////////////////////
//
function get_defectFilterNodes()
{
	// Return the defect filter nodes
	return m_doc.selectNodes("DefectFilters/Filter");	
}

/////////////////////////////////////////////////////////////////////////////
//
function get_presetDefinitions()
{
    // Return the preset definition nodes
    return m_doc.selectNodes("DefectFilters/preset");
}


/////////////////////////////////////////////////////////////////////////////
//
function get_sortKeys()
{
	return m_objSortKeys;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_recommendedIDs()
{
	return m_strRecommendedFilters;
}

/////////////////////////////////////////////////////////////////////////////
//
function get_defaultPreset()
{
    return m_strDefaultPreset;
}


/////////////////////////////////////////////////////////////////////////////
//
function exists(strID)
{
	return m_dict.Exists(strID);
}


/////////////////////////////////////////////////////////////////////////////
//
function enableFromFilter(objFilter)
{
	// Set the "enabled" attribute to match the specified filter
	var fChanged = false;
	var defs = get_defectFilterNodes();
	var cDefs = defs.length;
	for (var i = 0; i < cDefs; ++i)
	{
		var def = defs(i);
		var strID = def.selectSingleNode("@id").text;
		var fIsEnabled = objFilter.isEnabled(strID);
		var varAttr = def.getAttribute("enabled");

		if ("" == varAttr)
			fChanged = true;
		else if (new Boolean(varAttr) != fIsEnabled)
			fChanged = true;
		def.setAttribute("enabled", fIsEnabled);
	}

	// Fire an event if anything changed
	if (fChanged)
		fireOnEnabledChanged();
}

/////////////////////////////////////////////////////////////////////////////
// Firing Events
function fireOnEnabledChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectRegExpDefs_onEnabledChanged ) )
            m_objListeners[i].DefectRegExpDefs_onEnabledChanged();
    }
}

function fireOnSortKeysChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectRegExpDefs_onSortKeysChanged ) )
            m_objListeners[i].DefectRegExpDefs_onSortKeysChanged();
    }
}

/////////////////////////////////////////////////////////////////////////////
// Event Handlers


/////////////////////////////////////////////////////////////////////////////
//
function SortKeys_onChange()
{
	// Sort the defect defs
	SortDefectFilterDefs();

	// Reflect the event
    fireOnSortKeysChanged();
}


/////////////////////////////////////////////////////////////////////////////
// Implementation

/////////////////////////////////////////////////////////////////////////////
//
function LoadDefectFilters()
{
	// Load the filter definitions
	var strURL = m_objPREfast.ScriptsDirectory + "\\DefectUI\\Filters.xml";
	if (!m_doc.load(strURL))
		throw new Error(m_doc.parseError.errorCode, m_doc.parseError.reason);

    m_strDefaultPreset = GetXMLText( m_doc, "/DefectFilters/@defaultPreset", "Recommended Filters" );

	// Get the filespec of the user-defined defect filters
	var strFile = m_objShell.ExpandEnvironmentStrings("%PREFAST_Filters%");
	if ("%PREFAST_Filters%" != strFile)
	{
		// Separate each filter file by a semicolon
		var arrFiles = strFile.split(';');

		// Load each file containing user-defined defect filters
		var docUserFilters = new ActiveXObject("Microsoft.XMLDOM");
		for (var i in arrFiles)
		{
			// Merge the user-defined defect filters
			if (docUserFilters.load(arrFiles[i]))
				MergeDefectFilters(docUserFilters);
		}
	}

	// Load the combined set of defect filters
	var arrRecommendedFilters = new Array;
	var filters = m_doc.selectNodes("DefectFilters/Filter");
	var cFilters = filters.length;
	for (var i = 0; i < cFilters; ++i)
	{
		// Get the <Filter> element
		var filter = filters(i);

		// Get the filter values
		var strID              = GetXMLText(filter, "@id"             , null);
		var strEnableByDefault = GetXMLText(filter, "@enableByDefault",  "1");
		var strDesc            = GetXMLText(filter, "description"     , null);
		var strField           = GetXMLText(filter, "field"           , null);
		var strRE              = GetXMLText(filter, "regexp"          , null);

		// Remove the filter if it does not have a required field
		if (!strID || !strID.length || !strDesc || !strDesc.length ||
			!strField || !strField.length || !strRE || !strRE.length)
		{
			filters.removeChild(filter);
			continue;
		}

		// Attempt to create each specified regular expression
		try
		{
			var regexps = filter.selectNodes("regexp");
			var cRegexps = regexps.length;
			for (var iRE = 0; iRE < cRegexps; ++iRE)
			{
				var strRE = regexps(iRE).text;
				var re = new RegExp(strRE, "i");
			}
		}
		catch (e)
		{
			// Remove the filter if a regular expression cannot be created
			filters.removeChild(filter);
			continue;
		}


		// Add it to the dictionary of recommended filters, if specified
		var fEnabledByDefault = "0" != strEnableByDefault;
		if (fEnabledByDefault)
			arrRecommendedFilters[arrRecommendedFilters.length] = strID;

		// Add a display element
		var display = filter.ownerDocument.createElement("display");
		display.text = strDesc;
		filter.appendChild(display);

		// Add an enabled attribute
		filter.setAttribute('enabled', fEnabledByDefault ? "1" : "0");
	}

	// Create the list of recommended filters
	m_strRecommendedFilters = arrRecommendedFilters.join(';');
}


/////////////////////////////////////////////////////////////////////////////
//
function MergeDefectFilters(doc)
{
	// Get the XML Document of the filters and presets.
	var elemDefectFilters = m_doc.selectSingleNode("DefectFilters");

    m_strDefaultPreset = GetXMLText( doc, "DefectFilters/@defaultPreset", m_strDefaultPreset );

	var nodes = doc.selectNodes("DefectFilters/(Filter|preset)");
	var cNodes = nodes.length;
	for (var i = 0; i < cNodes; ++i)
	{
		// Get the element
		var node = nodes(i);
        var nodePrev;

        if ( "Filter" == node.tagName )
        {
		    // Get the ID as its name
		    var strID = GetXMLText(node, "@id", null);

		    // Ignore it if it has no ID
		    if (!strID || !strID.length )
        	    continue;

            nodePrev = elemDefectFilters.selectSingleNode("Filter[@id='" + strID + "']");
        }
        else
        {
		    // Get the name as its name
		    var strID = GetXMLText(node, "@name", null);

		    // Ignore it if it has no ID
		    if (!strID || !strID.length )
        	    continue;

            nodePrev = elemDefectFilters.selectSingleNode("preset[@name='" + strID + "']");
        }

		// Replace any previously defined filter or preset of the same name
		if (nodePrev)
			elemDefectFilters.removeChild(nodePrev);

		// Move the filter to the standard document
		elemDefectFilters.appendChild(node);
	}
}


/////////////////////////////////////////////////////////////////////////////
//
function GetXMLText(elem, strPattern, strDefault)
{
	try
	{
		return elem.selectSingleNode(strPattern).text;
	}
	catch (e)
	{
		return strDefault;
	}
}


/////////////////////////////////////////////////////////////////////////////
//
function SortDefectFilterDefs()
{
	// Get the style sheet for sorting
	var xslSortDefs =
		m_objPREfast.GetXMLWithinWSC("pftDefectRegExpDefs.wsc", "xslSortDefs");

	// Modify the XSL with the sort string
	var elemForEach =
		xslSortDefs.selectSingleNode("//xsl:for-each[@select='./(Filter|preset)']");
	elemForEach.setAttribute("order-by", m_objSortKeys.currentKeyString);

	// Move all of the defect defs into a temporary DOM
	var xmlTemp = new ActiveXObject("Microsoft.XMLDOM");
	for (var e = new Enumerator(m_doc.childNodes); !e.atEnd(); e.moveNext())
		xmlTemp.appendChild(e.item());

	// Transform to arrive at the filtered and sorted set
	xmlTemp.documentElement.transformNodeToObject(xslSortDefs, m_doc);
}


/////////////////////////////////////////////////////////////////////////////
// Data Members

var m_strRecommendedFilters;
var m_objPREfast;
var m_objSortKeys;
var m_strDefaultPreset;

// These variables are used for firing fake events
var m_objListeners;

//
// End of script block
/////////////////////////////////////////////////////////////////////////////
]]>
</script>

<object id="m_doc"         progid="Microsoft.XMLDOM"                      />
<object id="m_objShell"    progid="WScript.Shell"                         />
<object id="m_dict"        progid="Scripting.Dictionary"                  />

<comment>
    These objects now have to become ordinary members in order to load by
    path rather than ProgID
    <object id="m_objPREfast"  progid="PREfast.ExecEnvironment"               />
    <object id="m_objSortKeys" progid="PREfast.SortKeys"        events="true" />
</comment>


<comment>
	This block is where all private XML trees are placed. Although WSC's
	don't explicitly support putting free-form markup within a component,
	putting it within a comment element seems to work just fine.

	/////////////////////////////////////////////////////////////////////////
	// Identity transform that will be modified to sort the defect defs
	//
	<XML id="xslSortDefs">
		<xsl:stylesheet xmlns:xsl="http://www.w3.org/TR/WD-xsl">

			<!-- default template: copy all nodes, attributes, text -->
			<xsl:template><xsl:copy><xsl:apply-templates select="@* | * | text() | comment() | pi()" /></xsl:copy></xsl:template>

			<!-- special-case the <DefectFilters> node -->
			<xsl:template match="DefectFilters">
				<xsl:copy>
					<xsl:for-each select="./(Filter|preset)" order-by="display">
						<xsl:copy><xsl:apply-templates select="@* | * | text() | comment() | pi()" /></xsl:copy>
					</xsl:for-each>
				</xsl:copy>
			</xsl:template>

		</xsl:stylesheet>
	</XML>

</comment>

</component>
