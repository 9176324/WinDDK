<?xml version="1.0"?>
<component>

<?component error="true" debug="true"?>

<registration
	description="PREfast Defect Set"
	progid="PREfast.DefectSet"
	version="1.00"
	classid="{0da90235-df20-4b4c-a2f5-cccfd0424318}"
>
</registration>

<public>
	<property name="url"                    ><get /></property>
	<property name="defectsElementMaster"   ><get /></property>
	<property name="defectNodesMaster"      ><get /></property>
	<property name="defectsElementFiltered" ><get /></property>
	<property name="defectNodesFiltered"    ><get /></property>
	<property name="isLoadComplete"         ><get /></property>
	<property name="sortKeys"               ><get /></property>
	<property name="filter"          ><put /><get /></property>

	<method name="load">
		<parameter name="strURL" />
		<parameter name="fAsync" />
	</method>

    <method name="save">
        <parameter name="strFilename" />
        <parameter name="fFiltered" />
    </method>

    <method name="FinalConstruct">
        <parameter name="funcCreateObject" />
        <parameter name="objPREfast" />
    </method>

    <method name= "connectEvents">
        <parameter name="objListener" />
    </method>

	<event name="onSortKeysChanged" />
	<event name="onFilterChanged" />

</public>

<script language="JScript">
<![CDATA[
/////////////////////////////////////////////////////////////////////////////
// Beginning of script block
//

// Construction
var description = new PREfastDefectSet;
function PREfastDefectSet()
{
	// Initialize the class
	this.get_url = get_url;
	this.get_defectsElementMaster = get_defectsElementMaster;
	this.get_defectNodesMaster = get_defectNodesMaster;
	this.get_defectsElementFiltered = get_defectsElementFiltered;
	this.get_defectNodesFiltered = get_defectNodesFiltered;
	this.get_isLoadComplete = get_isLoadComplete;
	this.get_sortKeys = get_sortKeys;
	this.get_filter = get_filter;
	this.put_filter = put_filter;

	this.load = load;
    this.save = save;
    this.FinalConstruct = FinalConstruct;
    this.connectEvents = connectEvents;

    m_objListeners = new Array();
}

function FinalConstruct( funcCreateObject, objPREfast )
{
    m_funcCreatePREfastObject = funcCreateObject;
    m_objPREfast =          objPREfast;
    m_objSortKeys =         funcCreateObject("PREfast.SortKeys");
    m_objSortKeys.connectEvents( this );

    m_objFilter =           funcCreateObject("PREfast.DefectFilter");
    m_objDefectDefs =       funcCreateObject("PREfast.DefectDefs");
    m_objDefectRegExpDefs = funcCreateObject("PREfast.DefectRegExpDefs");


	// Initialize the PREfast.SortKeys object
	m_objSortKeys.init(
		// Valid Keys
		"number(@_seq)\n" + "DESCRIPTION\n" +"number(DEFECTCODE)\n" +
		"SFA/FILEPATH;SFA/FILENAME;number(SFA/LINE)\n" + "FUNCTION", 
		// Unique Keys, Default Keys, Persistence Path
		"number(@_seq)", "number(@_seq)", "DefectUI\\SortKeys");

	// Initialize the dictionary of regular expression defs
	m_dictRegExps.CompareMode = 1;
	var filters = m_objDefectRegExpDefs.defectFilterNodes;
	var cFilters = filters.length;
	for (var iFilter = 0; iFilter < cFilters; ++iFilter)
	{
		// Get the ID of the regexp filter
		var filter = filters(iFilter);
		var strID = filter.selectSingleNode("@id").text;

		// Create an object to associated with the regexp filter ID
		var oFilter = new Object;
		oFilter.field = filter.selectSingleNode("field").text;

		// Create an array of each regular expression
		oFilter.regexps = new Array;
		var regExps = filter.selectNodes("regexp");
		var cRegExps = regExps.length;
		for (var iRE = 0; iRE < cRegExps; ++iRE)
		{
			var strRE = regExps(iRE).text;
			oFilter.regexps[oFilter.regexps.length] = new RegExp(strRE, "i");
		}

		// Add it to the dictionary
		m_dictRegExps(strID) = oFilter;
	}

	// Initialize the filter
	m_objFilter.init(m_objDefectDefs, m_objDefectRegExpDefs, "(effective)",
		"", "", false);
}

function connectEvents( objListener )
{
    m_objListeners.push( objListener );
}


/////////////////////////////////////////////////////////////////////////////
// Implementation

/////////////////////////////////////////////////////////////////////////////
//
function sortAndFilter()
{
	// Load the stylesheet
	var xslSortAndFilter =
		m_objPREfast.GetXMLWithinWSC("pftDefectSet.wsc", "xslSortAndFilter");

	// Modify the XSL with the sort string
	var elemForEach =
		xslSortAndFilter.selectSingleNode("//xsl:for-each[@select='DEFECT']");
	elemForEach.setAttribute("order-by", m_objSortKeys.currentKeyString);

	// Create the filter pattern and array of regular expressions
	var arrDefectFilters = new Array;
	var strFilter = GenerateFilterPattern(arrDefectFilters);

	// Modify the XSL with the filter pattern
	var elemFilterTemplate =
		xslSortAndFilter.selectSingleNode("//xsl:template[@match='DEFECT-FILTERED']");
	elemFilterTemplate.setAttribute("match", strFilter);

	// Determine which master set to use
	var xmlMaster = (m_fDirtyFilter || !m_defectNodesFiltered) ?
		get_defectsElementMaster() : m_defectsElementFiltered;

	if (xmlMaster)
	{
		// Create another XML DOM Document for the sorted and filtered set
		var docFiltered = new ActiveXObject("Microsoft.XMLDOM");

		// Transform to arrive at the filtered and sorted set
		xmlMaster.transformNodeToObject(xslSortAndFilter, docFiltered);

		// Restore the XSL match string (so that we can find it again)
		if (elemFilterTemplate)
			elemFilterTemplate.setAttribute("match", "DEFECT-FILTERED");

		// Remove defects specified by file filter
		if (m_fDirtyFilter && arrDefectFilters.length)
		{
			for (var e = new Enumerator(docFiltered.selectNodes("DEFECTS/DEFECT")); !e.atEnd(); e.moveNext())
			{
				var defect = e.item();
				if (DefectMatchesAFilter(defect, arrDefectFilters))
				{
					defect.parentNode.removeChild(defect);
				}
			}
		}
	}

	// Reinitialize the collection objects
	m_defectsElementFiltered = docFiltered.selectSingleNode("DEFECTS");
	m_defectNodesFiltered = m_defectsElementFiltered.selectNodes("DEFECT");

	// Reset the sort and filter dirty flags
	m_fDirtySort = m_fDirtyFilter = false;
}


/////////////////////////////////////////////////////////////////////////////
//
function GenerateFilterPattern(arrDefectFilters)
{
	// Generate the XSL pattern from the selected filter
	var strPattern = "";
	var arrExclude = m_objFilter.excludeWarnings.split(';');
	for (var i in arrExclude)
	{
		var strID = arrExclude[i];
		if (strID && strID.length)
		{
			if (strPattern.length > 0)
				strPattern += " or ";
			strPattern += 'DEFECTCODE="' + strID + '"';
		}
	}
	var arrExclude = m_objFilter.excludeRegExps.split(';');
	for (var i in arrExclude)
	{
		var strID = arrExclude[i];
		if (m_dictRegExps.Exists(strID))
		{
			// Lookup the regexp filter information
			var oFilter = m_dictRegExps(strID);

			// Add the regexp filter information to the specified array
			arrDefectFilters[arrDefectFilters.length] = oFilter;
		}
	}

	return strPattern.length ?
		"DEFECT[" + strPattern + "]" : "DEFECT[DEFECTCODE='']";
}


/////////////////////////////////////////////////////////////////////////////
//
function DefectMatchesAFilter(defect, arrDefectFilters)
{
	// Clear the cache per defect
	m_dictFields.RemoveAll();

	// Loop through each specified filter
	for (var iFilter in arrDefectFilters)
	{
		// Get the defect filter
		var oFilter = arrDefectFilters[iFilter];

		// Create the string to match the expression against
		var str;
		if (m_dictFields.Exists(oFilter.field))
		{
			str = m_dictFields(oFilter.field);
		}
		else
		{
			str = "";
			var arrFields = oFilter.field.split(';');
			for (var iField in arrFields)
				str += defect.selectSingleNode(arrFields[iField]).text;
			m_dictFields(oFilter.field) = str;
		}

		// Test the string against each expression
		for (var iRE in oFilter.regexps)
		{
			var re = oFilter.regexps[iRE];
			if (re.test(str))
				return true;
		}
	}

	// Defect didn't match
	return false;
}


/////////////////////////////////////////////////////////////////////////////
// Properties


/////////////////////////////////////////////////////////////////////////////
//
function get_url()
{
	return m_strURL;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_defectsElementMaster()
{
	// Cannot get element until document load is complete
	if (!get_isLoadComplete())
		return null;

	// Select the nodes, if we haven't already
	if (!m_defectsElementMaster)
	{
		m_defectsElementMaster = m_doc.selectSingleNode("DEFECTS");
	}

	// Return the nodes
	return m_defectsElementMaster;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_defectNodesMaster()
{
	// Select the nodes, if we haven't already
	if (!m_defectNodesMaster)
	{
		// Get the defects element
		var elemDefects = get_defectsElementMaster();
		if (!elemDefects)
			return null;

		// Get the defect nodes
		m_defectNodesMaster = elemDefects.selectNodes("DEFECT");
	}

	// Return the nodes
	return m_defectNodesMaster;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_defectsElementFiltered()
{
	// Cannot get element until document load is complete
	if (!get_isLoadComplete())
		return null;

	// Filter the defects, if we need to
	if (m_fDirtySort || m_fDirtyFilter)
	{
		sortAndFilter();
	}

	// Return the nodes
	return m_defectsElementFiltered;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_defectNodesFiltered()
{
	// Get the defects element
	var elemDefects = get_defectsElementFiltered();
	if (!elemDefects)
		return null;

	// Get the defect nodes
	return m_defectNodesFiltered;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_isLoadComplete()
{
	// Load is not complete if there is no document
	if (!m_doc)
		return false;

	// Check the status of the document
	if (4 != m_doc.readyState)
		return false;

	// Check for an error
	var e = m_doc.parseError;
	if (e.errorCode)
	{
		var elem = m_doc.createElement("DEFECTS");
		var node = m_doc.documentElement ? m_doc.documentElement : m_doc;
		node.appendChild(elem);
	}

	// Indicate that the document is successfully loaded
	return true;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_sortKeys()
{
	return m_objSortKeys;
}


/////////////////////////////////////////////////////////////////////////////
//
function get_filter()
{
	// Only return a copy of the filter
	var objFilter = m_funcCreatePREfastObject("PREfast.DefectFilter");
	objFilter.init(m_objDefectDefs, m_objDefectRegExpDefs, "(effective)", "", "", false);
	m_objFilter.copyTo(objFilter);
	return objFilter;
}


/////////////////////////////////////////////////////////////////////////////
//
function put_filter(objFilter)
{
	// Do nothing if the specified filter is the same
	if (m_objFilter && m_objFilter.isEquivalent(objFilter))
		return;

	// Copy the specified filter
	objFilter.copyTo(m_objFilter);

	// Set the filter dirty flag
	m_fDirtyFilter = true;

	// Fire an event
	fireOnFilterChanged();
}


/////////////////////////////////////////////////////////////////////////////
//
function load(strURL, fAsync)
{
	// Close any previous objects
	m_defectNodesMaster = null;
	m_defectFiltered = null;
	m_doc = null;
	m_strURL = null;

	// Set the sort and filter dirty flags
	m_fDirtySort = true;
	m_fDirtyFilter = true;

	// Create the helper object
	var doc = new ActiveXObject("Microsoft.XMLDOM");

	// Load the specified URL
	doc.async = !!fAsync;
	if (!doc.load(strURL))
	{
		var elem = doc.createElement("DEFECTS");
		var node = doc.documentElement ? doc.documentElement : doc;
		node.appendChild(elem);
	}

	// Save the URL and the document objects
	m_strURL = strURL;
	m_doc = doc;
}

/////////////////////////////////////////////////////////////////////////////
//
function save(strFilename, fFiltered)
{
    var doc;

    if ( fFiltered )
    {
	    doc = new ActiveXObject("microsoft.xmldom");
	    doc.appendChild(doc.createProcessingInstruction("xml", 'version="1.0" encoding="UTF-8"'));
        
        // Use the getter to ensure filtering has been done as needed.
        var defectsFiltered = get_defectsElementFiltered();
	    doc.appendChild(defectsFiltered);
    }
    else
        doc = m_doc;

    var objFSO = new ActiveXObject("Scripting.FileSystemObject");

   	if (objFSO.FileExists(strFilename))
		objFSO.DeleteFile(strFilename);

	// Save the new XML document to the specified output file name
	doc.save(strFilename);

	// Indicate success
	return 0;
}

/////////////////////////////////////////////////////////////////////////////
// Fire "events"
function fireOnSortKeysChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectSet_onSortKeysChanged ) )
            m_objListeners[i].DefectSet_onSortKeysChanged();
    }
}

function fireOnFilterChanged()
{
    for ( var i in m_objListeners )
    {        
        if ( "undefined" != typeof( m_objListeners[i].DefectSet_onFilterChanged ) )
            m_objListeners[i].DefectSet_onFilterChanged();
    }
}


/////////////////////////////////////////////////////////////////////////////
// Event Handlers


/////////////////////////////////////////////////////////////////////////////
//
function SortKeys_onChange()
{
	// Set the flag to sort the defects
	m_fDirtySort = true;

	// Reflect the event
	fireOnSortKeysChanged();
}


/////////////////////////////////////////////////////////////////////////////
// Implementation


/////////////////////////////////////////////////////////////////////////////
// Data Members

var m_doc;
var m_strURL;
var m_defectsElementMaster
var m_defectNodesMaster;
var m_defectsElementFiltered;
var m_defectNodesFiltered;
var m_fDirtySort;
var m_fDirtyFilter;

var m_funcCreatePREfastObject;
var m_objPREfast;
var m_objSortKeys;
var m_objFilter;
var m_objDefectDefs;
var m_objDefectRegExpDefs;

var m_objListeners;

//
// End of script block
/////////////////////////////////////////////////////////////////////////////
]]>
</script>

<object id="m_dictRegExps"         progid="Scripting.Dictionary"                   />
<object id="m_dictFields"          progid="Scripting.Dictionary"                   />

<comment>
    These objects have to be replaced by member variables to load by path
    instead of registration.
    <object id="m_objPREfast"          progid="PREfast.ExecEnvironment"                />
    <object id="m_objSortKeys"         progid="PREfast.SortKeys"         events="true" />
    <object id="m_objFilter"           progid="PREfast.DefectFilter"                   />
    <object id="m_objDefectDefs"       progid="PREfast.DefectDefs"                     />
    <object id="m_objDefectRegExpDefs" progid="PREfast.DefectRegExpDefs"               />
</comment>

<comment>
	This block is where all private XML trees are placed. Although WSC's
	don't explicitly support putting free-form markup within a component,
	putting it within a comment element seems to work just fine.

	<XML id="xslSortAndFilter">
		<xsl:stylesheet xmlns:xsl="http://www.w3.org/TR/WD-xsl">

			<!-- default template: copy all nodes, attributes, text -->
			<xsl:template><xsl:copy><xsl:apply-templates select="@* | * | text() | comment() | pi()" /></xsl:copy></xsl:template>

			<!-- special-case the <DEFECTS> node -->
			<xsl:template match="DEFECTS">
				<xsl:copy>
					<xsl:for-each select="DEFECT" order-by="number(@_seq)">
						<xsl:apply-templates select="."/>
					</xsl:for-each>
				</xsl:copy>
			</xsl:template>

			<!-- special-case all other <DEFECT> nodes -->
			<xsl:template match="DEFECT">
				<xsl:copy><xsl:apply-templates select="@* | * | text() | comment() | pi()" /></xsl:copy>
			</xsl:template>

			<!-- special-case the filtered-out <DEFECT> nodes -->
			<xsl:template match="DEFECT-FILTERED" />

		</xsl:stylesheet>
	</XML>

</comment>

</component>
